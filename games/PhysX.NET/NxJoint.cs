//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxJoint : DoxyBindObject
	{
		
		internal NxJoint(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Sets the limit point. </summary>
		/// <param name="point">The limit reference point defined in the global frame. Range: position vector </param>
		/// <param name="pointIsOnActor2">if true the point is attached to the second actor. Otherwise it is attached to the first.</param>
		public virtual void setLimitPoint(ref NxVec3 point, bool pointIsOnActor2)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setLimitPoint_INVOKE(ClassPointer, doSetFunctionPointers, ref point, pointIsOnActor2);
		}
		
		private void setLimitPoint_virtual([In()] ref NxVec3 point, bool pointIsOnActor2)
		{
			setLimitPoint(ref point, pointIsOnActor2);
		}
		
		delegate void setLimitPoint_0_delegate([In()] ref NxVec3 point, bool pointIsOnActor2);
		
		
		
		
		
		
		private setLimitPoint_0_delegate setLimitPoint_0_delegatefield;
		
		/// <summary>Sets the limit point. </summary>
		/// <param name="point">The limit reference point defined in the global frame. Range: position vector </param>
		/// <param name="pointIsOnActor2">if true the point is attached to the second actor. Otherwise it is attached to the first.</param>
		public virtual void setLimitPoint(ref NxVec3 point)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setLimitPoint_1_INVOKE(ClassPointer, doSetFunctionPointers, ref point);
		}
		
		private void setLimitPoint_virtual([In()] ref NxVec3 point)
		{
			setLimitPoint(ref point);
		}
		
		delegate void setLimitPoint_1_delegate([In()] ref NxVec3 point);
		
		
		
		
		
		
		private setLimitPoint_1_delegate setLimitPoint_1_delegatefield;
		
		/// <summary>Retrieves the global space limit point. </summary>
		/// <param name="worldLimitPoint">Used to store the global frame limit point. </param>
		public virtual bool getLimitPoint(ref NxVec3 worldLimitPoint)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getLimitPoint_INVOKE(ClassPointer, doSetFunctionPointers, ref worldLimitPoint);
		}
		
		private bool getLimitPoint_virtual([In()] [Out()] ref NxVec3 worldLimitPoint)
		{
			return getLimitPoint(ref worldLimitPoint);
		}
		
		delegate bool getLimitPoint_2_delegate([In()] [Out()] ref NxVec3 worldLimitPoint);
		
		
		
		
		
		
		private getLimitPoint_2_delegate getLimitPoint_2_delegatefield;
		
		/// <summary>Adds a limit plane. </summary>
		/// <param name="normal">Normal for the limit plane in global coordinates. Range: direction vector </param>
		/// <param name="pointInPlane">Point in the limit plane in global coordinates. Range: position vector </param>
		/// <param name="restitution">Restitution of the limit plane. Range: [0.0, 1.0] Default: 0.0 </param>
		public virtual bool addLimitPlane(ref NxVec3 normal, ref NxVec3 pointInPlane, float restitution)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_addLimitPlane_INVOKE(ClassPointer, doSetFunctionPointers, ref normal, ref pointInPlane, restitution);
		}
		
		private bool addLimitPlane_virtual([In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane, float restitution)
		{
			return addLimitPlane(ref normal, ref pointInPlane, restitution);
		}
		
		delegate bool addLimitPlane_3_delegate([In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane, float restitution);
		
		
		
		
		
		
		private addLimitPlane_3_delegate addLimitPlane_3_delegatefield;
		
		/// <summary>Adds a limit plane. </summary>
		/// <param name="normal">Normal for the limit plane in global coordinates. Range: direction vector </param>
		/// <param name="pointInPlane">Point in the limit plane in global coordinates. Range: position vector </param>
		/// <param name="restitution">Restitution of the limit plane. Range: [0.0, 1.0] Default: 0.0 </param>
		public virtual bool addLimitPlane(ref NxVec3 normal, ref NxVec3 pointInPlane)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_addLimitPlane_1_INVOKE(ClassPointer, doSetFunctionPointers, ref normal, ref pointInPlane);
		}
		
		private bool addLimitPlane_virtual([In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane)
		{
			return addLimitPlane(ref normal, ref pointInPlane);
		}
		
		delegate bool addLimitPlane_4_delegate([In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane);
		
		
		
		
		
		
		private addLimitPlane_4_delegate addLimitPlane_4_delegatefield;
		
		/// <summary>deletes all limit planes added to the joint. </summary>
		public virtual void purgeLimitPlanes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_purgeLimitPlanes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void purgeLimitPlanes_virtual()
		{
			purgeLimitPlanes();
		}
		
		delegate void purgeLimitPlanes_5_delegate();
		
		
		
		
		
		
		private purgeLimitPlanes_5_delegate purgeLimitPlanes_5_delegatefield;
		
		/// <summary>Restarts the limit plane iteration. </summary>
		public virtual void resetLimitPlaneIterator()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_resetLimitPlaneIterator_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void resetLimitPlaneIterator_virtual()
		{
			resetLimitPlaneIterator();
		}
		
		delegate void resetLimitPlaneIterator_6_delegate();
		
		
		
		
		
		
		private resetLimitPlaneIterator_6_delegate resetLimitPlaneIterator_6_delegatefield;
		
		/// <summary>Returns true until the iterator reaches the end of the set of limit planes. </summary>
		public virtual bool hasMoreLimitPlanes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_hasMoreLimitPlanes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool hasMoreLimitPlanes_virtual()
		{
			return hasMoreLimitPlanes();
		}
		
		delegate bool hasMoreLimitPlanes_7_delegate();
		
		
		
		
		
		
		private hasMoreLimitPlanes_7_delegate hasMoreLimitPlanes_7_delegatefield;
		
		/// <summary>Returns the next element pointed to by the limit plane iterator, and increments the iterator. </summary>
		/// <param name="planeNormal">Used to store the plane normal. </param>
		/// <param name="planeD">Used to store the plane 'D'. </param>
		/// <param name="restitution">Optional, used to store restitution of the limit plane. </param>
		public virtual bool getNextLimitPlane(ref NxVec3 planeNormal, ref float planeD, float[] restitution)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getNextLimitPlane_INVOKE(ClassPointer, doSetFunctionPointers, ref planeNormal, ref planeD, restitution);
		}
		
		private bool getNextLimitPlane_virtual([In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref float planeD, float[] restitution)
		{
			return getNextLimitPlane(ref planeNormal, ref planeD, restitution);
		}
		
		delegate bool getNextLimitPlane_8_delegate([In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref float planeD, float[] restitution);
		
		
		
		
		
		
		private getNextLimitPlane_8_delegate getNextLimitPlane_8_delegatefield;
		
		/// <summary>Returns the next element pointed to by the limit plane iterator, and increments the iterator. </summary>
		/// <param name="planeNormal">Used to store the plane normal. </param>
		/// <param name="planeD">Used to store the plane 'D'. </param>
		/// <param name="restitution">Optional, used to store restitution of the limit plane. </param>
		public virtual bool getNextLimitPlane(ref NxVec3 planeNormal, ref float planeD)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getNextLimitPlane_1_INVOKE(ClassPointer, doSetFunctionPointers, ref planeNormal, ref planeD);
		}
		
		private bool getNextLimitPlane_virtual([In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref float planeD)
		{
			return getNextLimitPlane(ref planeNormal, ref planeD);
		}
		
		delegate bool getNextLimitPlane_9_delegate([In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref float planeD);
		
		
		
		
		
		
		private getNextLimitPlane_9_delegate getNextLimitPlane_9_delegatefield;
		
		/// <summary>Type casting operator. The result may be cast to the desired subclass type. </summary>
		/// <param name="type">Used to query for a specific joint type. </param>
		public virtual System.IntPtr @is(NxJointType type)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_is_INVOKE(ClassPointer, doSetFunctionPointers, type);
		}
		
		private System.IntPtr is_virtual(NxJointType type)
		{
			return @is(type);
		}
		
		delegate System.IntPtr is_10_delegate(NxJointType type);
		
		
		
		
		
		
		private is_10_delegate is_10_delegatefield;
		
		/// <summary>Attempts to perform a cast to a NxRevoluteJoint. </summary>
		public NxRevoluteJoint isRevoluteJoint()
		{
			return NxRevoluteJoint.GetClass(NxJoint_isRevoluteJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxPointInPlaneJoint. </summary>
		public NxPointInPlaneJoint isPointInPlaneJoint()
		{
			return NxPointInPlaneJoint.GetClass(NxJoint_isPointInPlaneJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxPointOnLineJoint. </summary>
		public NxPointOnLineJoint isPointOnLineJoint()
		{
			return NxPointOnLineJoint.GetClass(NxJoint_isPointOnLineJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxD6Joint. </summary>
		public NxD6Joint isD6Joint()
		{
			return NxD6Joint.GetClass(NxJoint_isD6Joint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxPrismaticJoint. </summary>
		public NxPrismaticJoint isPrismaticJoint()
		{
			return NxPrismaticJoint.GetClass(NxJoint_isPrismaticJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxCylindricalJoint. </summary>
		public NxCylindricalJoint isCylindricalJoint()
		{
			return NxCylindricalJoint.GetClass(NxJoint_isCylindricalJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxSphericalJoint. </summary>
		public NxSphericalJoint isSphericalJoint()
		{
			return NxSphericalJoint.GetClass(NxJoint_isSphericalJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxFixedJoint. </summary>
		public NxFixedJoint isFixedJoint()
		{
			return NxFixedJoint.GetClass(NxJoint_isFixedJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxDistanceJoint. </summary>
		public NxDistanceJoint isDistanceJoint()
		{
			return NxDistanceJoint.GetClass(NxJoint_isDistanceJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to perform a cast to a NxPulleyJoint. </summary>
		public NxPulleyJoint isPulleyJoint()
		{
			return NxPulleyJoint.GetClass(NxJoint_isPulleyJoint_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxJoint_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJoint_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>used internally, do not change. </summary>
		public System.IntPtr appData
		{
			get
			{
				System.IntPtr value = get_NxJoint_appData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJoint_appData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxJoint() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxJoint)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxJoint_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxJoint_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Retrieves the Actors involved. </summary>
		/// <param name="actor1">First actor associated with joint. </param>
		/// <param name="actor2">Second actor associated with joint.</param>
		public virtual void getActors(DoxyBindArray<NxActor> actor1, DoxyBindArray<NxActor> actor2)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_getActors_INVOKE(ClassPointer, doSetFunctionPointers, actor1, actor2);
		}
		
		private void getActors_virtual(IntPtr[] actor1, IntPtr[] actor2)
		{
			getActors(actor1, actor2);
		}
		
		delegate void getActors_11_delegate(IntPtr[] actor1, IntPtr[] actor2);
		
		
		
		
		
		
		private getActors_11_delegate getActors_11_delegatefield;
		
		/// <summary>Sets the point where the two actors are attached, specified in global coordinates. </summary>
		/// <param name="vec">Point the actors are attached at, specified in the global frame. Range: position vector</param>
		public virtual void setGlobalAnchor(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setGlobalAnchor_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setGlobalAnchor_virtual([In()] ref NxVec3 vec)
		{
			setGlobalAnchor(ref vec);
		}
		
		delegate void setGlobalAnchor_12_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setGlobalAnchor_12_delegate setGlobalAnchor_12_delegatefield;
		
		/// <summary>Sets the direction of the joint's primary axis, specified in global coordinates. </summary>
		/// <param name="vec">Direction of primary axis in the global frame. Range: direction vector</param>
		public virtual void setGlobalAxis(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setGlobalAxis_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setGlobalAxis_virtual([In()] ref NxVec3 vec)
		{
			setGlobalAxis(ref vec);
		}
		
		delegate void setGlobalAxis_13_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setGlobalAxis_13_delegate setGlobalAxis_13_delegatefield;
		
		/// <summary>Retrieves the joint anchor. </summary>
		public virtual NxVec3 getGlobalAnchor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getGlobalAnchor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getGlobalAnchor_virtual()
		{
			return getGlobalAnchor();
		}
		
		delegate NxVec3 getGlobalAnchor_14_delegate();
		
		
		
		
		
		
		private getGlobalAnchor_14_delegate getGlobalAnchor_14_delegatefield;
		
		/// <summary>Retrieves the joint axis. </summary>
		public virtual NxVec3 getGlobalAxis()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getGlobalAxis_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getGlobalAxis_virtual()
		{
			return getGlobalAxis();
		}
		
		delegate NxVec3 getGlobalAxis_15_delegate();
		
		
		
		
		
		
		private getGlobalAxis_15_delegate getGlobalAxis_15_delegatefield;
		
		/// <summary>Returns the state of the joint. </summary>
		public virtual NxJointState getState()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getState_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxJointState getState_virtual()
		{
			return getState();
		}
		
		delegate NxJointState getState_16_delegate();
		
		
		
		
		
		
		private getState_16_delegate getState_16_delegatefield;
		
		/// <summary>Sets the maximum force magnitude that the joint is able to withstand without breaking. </summary>
		/// <param name="maxForce">Maximum force the joint can withstand without breaking. Range: (0,inf] </param>
		/// <param name="maxTorque">Maximum torque the joint can withstand without breaking. Range: (0,inf]</param>
		public virtual void setBreakable(float maxForce, float maxTorque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setBreakable_INVOKE(ClassPointer, doSetFunctionPointers, maxForce, maxTorque);
		}
		
		private void setBreakable_virtual(float maxForce, float maxTorque)
		{
			setBreakable(maxForce, maxTorque);
		}
		
		delegate void setBreakable_17_delegate(float maxForce, float maxTorque);
		
		
		
		
		
		
		private setBreakable_17_delegate setBreakable_17_delegatefield;
		
		/// <summary>Retrieves the max forces of a breakable joint. See setBreakable(). </summary>
		/// <param name="maxForce">Retrieves the maximum force the joint can withstand without breaking. </param>
		/// <param name="maxTorque">Retrieves the maximum torque the joint can withstand without breaking.</param>
		public virtual void getBreakable(ref float maxForce, ref float maxTorque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_getBreakable_INVOKE(ClassPointer, doSetFunctionPointers, ref maxForce, ref maxTorque);
		}
		
		private void getBreakable_virtual([In()] [Out()] ref float maxForce, [In()] [Out()] ref float maxTorque)
		{
			getBreakable(ref maxForce, ref maxTorque);
		}
		
		delegate void getBreakable_18_delegate([In()] [Out()] ref float maxForce, [In()] [Out()] ref float maxTorque);
		
		
		
		
		
		
		private getBreakable_18_delegate getBreakable_18_delegatefield;
		
		/// <summary>Sets the solver extrapolation factor. </summary>
		/// <param name="solverExtrapolationFactor">The solver extrapolation factor.</param>
		public virtual void setSolverExtrapolationFactor(float solverExtrapolationFactor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setSolverExtrapolationFactor_INVOKE(ClassPointer, doSetFunctionPointers, solverExtrapolationFactor);
		}
		
		private void setSolverExtrapolationFactor_virtual(float solverExtrapolationFactor)
		{
			setSolverExtrapolationFactor(solverExtrapolationFactor);
		}
		
		delegate void setSolverExtrapolationFactor_19_delegate(float solverExtrapolationFactor);
		
		
		
		
		
		
		private setSolverExtrapolationFactor_19_delegate setSolverExtrapolationFactor_19_delegatefield;
		
		/// <summary>Retrieves the solver extrapolation factor. </summary>
		public virtual float getSolverExtrapolationFactor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getSolverExtrapolationFactor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSolverExtrapolationFactor_virtual()
		{
			return getSolverExtrapolationFactor();
		}
		
		delegate float getSolverExtrapolationFactor_20_delegate();
		
		
		
		
		
		
		private getSolverExtrapolationFactor_20_delegate getSolverExtrapolationFactor_20_delegatefield;
		
		/// <summary>Switch between acceleration and force based spring. </summary>
		/// <param name="b">{true: use acceleration spring, false: use force spring}.</param>
		public virtual void setUseAccelerationSpring(bool b)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setUseAccelerationSpring_INVOKE(ClassPointer, doSetFunctionPointers, b);
		}
		
		private void setUseAccelerationSpring_virtual(bool b)
		{
			setUseAccelerationSpring(b);
		}
		
		delegate void setUseAccelerationSpring_21_delegate(bool b);
		
		
		
		
		
		
		private setUseAccelerationSpring_21_delegate setUseAccelerationSpring_21_delegatefield;
		
		/// <summary>Checks whether acceleration spring is used. </summary>
		public virtual bool getUseAccelerationSpring()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getUseAccelerationSpring_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool getUseAccelerationSpring_virtual()
		{
			return getUseAccelerationSpring();
		}
		
		delegate bool getUseAccelerationSpring_22_delegate();
		
		
		
		
		
		
		private getUseAccelerationSpring_22_delegate getUseAccelerationSpring_22_delegatefield;
		
		/// <summary>Retrieve the type of this joint. </summary>
		public virtual NxJointType getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxJointType getType_virtual()
		{
			return getType();
		}
		
		delegate NxJointType getType_23_delegate();
		
		
		
		
		
		
		private getType_23_delegate getType_23_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxJoint_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_24_delegate(string name);
		
		
		
		
		
		
		private setName_24_delegate setName_24_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxJoint_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_25_delegate();
		
		
		
		
		
		
		private getName_25_delegate getName_25_delegatefield;
		
		/// <summary>Retrieves owner scene. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxJoint_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_26_delegate();
		
		
		
		
		
		
		private getScene_26_delegate getScene_26_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setLimitPoint")]
        private extern static void NxJoint_setLimitPoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 point, System.Boolean pointIsOnActor2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setLimitPoint_1")]
        private extern static void NxJoint_setLimitPoint_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 point);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getLimitPoint")]
        private extern static System.Boolean NxJoint_getLimitPoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 worldLimitPoint);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_addLimitPlane")]
        private extern static System.Boolean NxJoint_addLimitPlane_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane, System.Single restitution);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_addLimitPlane_1")]
        private extern static System.Boolean NxJoint_addLimitPlane_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 normal, [In()] ref NxVec3 pointInPlane);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_purgeLimitPlanes")]
        private extern static void NxJoint_purgeLimitPlanes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_resetLimitPlaneIterator")]
        private extern static void NxJoint_resetLimitPlaneIterator_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_hasMoreLimitPlanes")]
        private extern static System.Boolean NxJoint_hasMoreLimitPlanes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getNextLimitPlane")]
        private extern static System.Boolean NxJoint_getNextLimitPlane_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref System.Single planeD, System.Single[] restitution);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getNextLimitPlane_1")]
        private extern static System.Boolean NxJoint_getNextLimitPlane_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 planeNormal, [In()] [Out()] ref System.Single planeD);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_is")]
        private extern static System.IntPtr NxJoint_is_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxJointType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isRevoluteJoint")]
        private extern static IntPtr NxJoint_isRevoluteJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isPointInPlaneJoint")]
        private extern static IntPtr NxJoint_isPointInPlaneJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isPointOnLineJoint")]
        private extern static IntPtr NxJoint_isPointOnLineJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isD6Joint")]
        private extern static IntPtr NxJoint_isD6Joint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isPrismaticJoint")]
        private extern static IntPtr NxJoint_isPrismaticJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isCylindricalJoint")]
        private extern static IntPtr NxJoint_isCylindricalJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isSphericalJoint")]
        private extern static IntPtr NxJoint_isSphericalJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isFixedJoint")]
        private extern static IntPtr NxJoint_isFixedJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isDistanceJoint")]
        private extern static IntPtr NxJoint_isDistanceJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_isPulleyJoint")]
        private extern static IntPtr NxJoint_isPulleyJoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJoint_userData")]
        private extern static void set_NxJoint_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJoint_userData")]
        private extern static System.IntPtr get_NxJoint_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJoint_appData")]
        private extern static void set_NxJoint_appData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJoint_appData")]
        private extern static System.IntPtr get_NxJoint_appData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxJoint")]
        private extern static IntPtr new_NxJoint_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getActors")]
        private extern static void NxJoint_getActors_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] actor1, IntPtr[] actor2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setGlobalAnchor")]
        private extern static void NxJoint_setGlobalAnchor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setGlobalAxis")]
        private extern static void NxJoint_setGlobalAxis_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getGlobalAnchor")]
        private extern static NxVec3 NxJoint_getGlobalAnchor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getGlobalAxis")]
        private extern static NxVec3 NxJoint_getGlobalAxis_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getState")]
        private extern static NxJointState NxJoint_getState_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setBreakable")]
        private extern static void NxJoint_setBreakable_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single maxForce, System.Single maxTorque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getBreakable")]
        private extern static void NxJoint_getBreakable_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single maxForce, [In()] [Out()] ref System.Single maxTorque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setSolverExtrapolationFactor")]
        private extern static void NxJoint_setSolverExtrapolationFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single solverExtrapolationFactor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getSolverExtrapolationFactor")]
        private extern static System.Single NxJoint_getSolverExtrapolationFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setUseAccelerationSpring")]
        private extern static void NxJoint_setUseAccelerationSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getUseAccelerationSpring")]
        private extern static System.Boolean NxJoint_getUseAccelerationSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getType")]
        private extern static NxJointType NxJoint_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_setName")]
        private extern static void NxJoint_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getName")]
        private extern static System.String NxJoint_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJoint_getScene")]
        private extern static IntPtr NxJoint_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxJoint GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxJoint)(obj.Target));
				}
			}
			return new NxJoint(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setLimitPoint_0_delegatefield = new setLimitPoint_0_delegate(this.setLimitPoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLimitPoint_0_delegatefield));
			setLimitPoint_1_delegatefield = new setLimitPoint_1_delegate(this.setLimitPoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLimitPoint_1_delegatefield));
			getLimitPoint_2_delegatefield = new getLimitPoint_2_delegate(this.getLimitPoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLimitPoint_2_delegatefield));
			addLimitPlane_3_delegatefield = new addLimitPlane_3_delegate(this.addLimitPlane_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLimitPlane_3_delegatefield));
			addLimitPlane_4_delegatefield = new addLimitPlane_4_delegate(this.addLimitPlane_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLimitPlane_4_delegatefield));
			purgeLimitPlanes_5_delegatefield = new purgeLimitPlanes_5_delegate(this.purgeLimitPlanes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(purgeLimitPlanes_5_delegatefield));
			resetLimitPlaneIterator_6_delegatefield = new resetLimitPlaneIterator_6_delegate(this.resetLimitPlaneIterator_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetLimitPlaneIterator_6_delegatefield));
			hasMoreLimitPlanes_7_delegatefield = new hasMoreLimitPlanes_7_delegate(this.hasMoreLimitPlanes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(hasMoreLimitPlanes_7_delegatefield));
			getNextLimitPlane_8_delegatefield = new getNextLimitPlane_8_delegate(this.getNextLimitPlane_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNextLimitPlane_8_delegatefield));
			getNextLimitPlane_9_delegatefield = new getNextLimitPlane_9_delegate(this.getNextLimitPlane_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNextLimitPlane_9_delegatefield));
			is_10_delegatefield = new is_10_delegate(this.is_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(is_10_delegatefield));
			getActors_11_delegatefield = new getActors_11_delegate(this.getActors_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getActors_11_delegatefield));
			setGlobalAnchor_12_delegatefield = new setGlobalAnchor_12_delegate(this.setGlobalAnchor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalAnchor_12_delegatefield));
			setGlobalAxis_13_delegatefield = new setGlobalAxis_13_delegate(this.setGlobalAxis_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalAxis_13_delegatefield));
			getGlobalAnchor_14_delegatefield = new getGlobalAnchor_14_delegate(this.getGlobalAnchor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalAnchor_14_delegatefield));
			getGlobalAxis_15_delegatefield = new getGlobalAxis_15_delegate(this.getGlobalAxis_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalAxis_15_delegatefield));
			getState_16_delegatefield = new getState_16_delegate(this.getState_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getState_16_delegatefield));
			setBreakable_17_delegatefield = new setBreakable_17_delegate(this.setBreakable_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setBreakable_17_delegatefield));
			getBreakable_18_delegatefield = new getBreakable_18_delegate(this.getBreakable_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getBreakable_18_delegatefield));
			setSolverExtrapolationFactor_19_delegatefield = new setSolverExtrapolationFactor_19_delegate(this.setSolverExtrapolationFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSolverExtrapolationFactor_19_delegatefield));
			getSolverExtrapolationFactor_20_delegatefield = new getSolverExtrapolationFactor_20_delegate(this.getSolverExtrapolationFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSolverExtrapolationFactor_20_delegatefield));
			setUseAccelerationSpring_21_delegatefield = new setUseAccelerationSpring_21_delegate(this.setUseAccelerationSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setUseAccelerationSpring_21_delegatefield));
			getUseAccelerationSpring_22_delegatefield = new getUseAccelerationSpring_22_delegate(this.getUseAccelerationSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getUseAccelerationSpring_22_delegatefield));
			getType_23_delegatefield = new getType_23_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_23_delegatefield));
			setName_24_delegatefield = new setName_24_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_24_delegatefield));
			getName_25_delegatefield = new getName_25_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_25_delegatefield));
			getScene_26_delegatefield = new getScene_26_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_26_delegatefield));
			return list;
		}
	}
}
