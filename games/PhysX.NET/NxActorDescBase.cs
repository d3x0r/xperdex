//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxActorDescBase : DoxyBindObject
	{
		
		internal NxActorDescBase(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The pose of the actor in the world. </summary>
		public NxMat34 globalPose
		{
			get
			{
				NxMat34 value = get_NxActorDescBase_globalPose_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_globalPose_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Body descriptor, null for static actors. </summary>
		public NxBodyDesc body
		{
			get
			{
				return NxBodyDesc.GetClass(get_NxActorDescBase_body_INVOKE(ClassPointer));
			}
			set
			{
				set_NxActorDescBase_body_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Density used during mass/inertia computation. </summary>
		public float density
		{
			get
			{
				float value = get_NxActorDescBase_density_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_density_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Combination of NxActorFlag flags. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxActorDescBase_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The actors group. </summary>
		public ushort group
		{
			get
			{
				ushort value = get_NxActorDescBase_group_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_group_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Dominance group for this actor. </summary>
		public ushort dominanceGroup
		{
			get
			{
				ushort value = get_NxActorDescBase_dominanceGroup_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_dominanceGroup_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Combination of NxContactPairFlag flags. </summary>
		public uint contactReportFlags
		{
			get
			{
				uint value = get_NxActorDescBase_contactReportFlags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_contactReportFlags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force Field Material Index, index != 0 has to be created. </summary>
		public ushort forceFieldMaterial
		{
			get
			{
				ushort value = get_NxActorDescBase_forceFieldMaterial_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_forceFieldMaterial_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxActor::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxActorDescBase_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxActorDescBase_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActorDescBase_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The compartment to place the actor in. Must be either a pointer to an NxCompartment of type NX_SCT_RIGIDBODY, or NULL. A NULL compartment means creating the actor in the scene proper. </summary>
		public NxCompartment compartment
		{
			get
			{
				return NxCompartment.GetClass(get_NxActorDescBase_compartment_INVOKE(ClassPointer));
			}
			set
			{
				set_NxActorDescBase_compartment_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxActorDescBase_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxActorDescBase_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Retrieve the actor type. </summary>
		public NxActorDescType getType()
		{
			return NxActorDescBase_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>constructor sets to default. </summary>
		protected NxActorDescBase() : 
				base(new_NxActorDescBase_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		protected bool isValidInternal(bool hasSolidShape)
		{
			throw new System.NotImplementedException("Cannot call protected C++ member");
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_globalPose")]
        private extern static void set_NxActorDescBase_globalPose_INVOKE (HandleRef classPointer, NxMat34 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_globalPose")]
        private extern static NxMat34 get_NxActorDescBase_globalPose_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_body")]
        private extern static void set_NxActorDescBase_body_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_body")]
        private extern static IntPtr get_NxActorDescBase_body_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_density")]
        private extern static void set_NxActorDescBase_density_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_density")]
        private extern static System.Single get_NxActorDescBase_density_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_flags")]
        private extern static void set_NxActorDescBase_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_flags")]
        private extern static System.UInt32 get_NxActorDescBase_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_group")]
        private extern static void set_NxActorDescBase_group_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_group")]
        private extern static System.UInt16 get_NxActorDescBase_group_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_dominanceGroup")]
        private extern static void set_NxActorDescBase_dominanceGroup_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_dominanceGroup")]
        private extern static System.UInt16 get_NxActorDescBase_dominanceGroup_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_contactReportFlags")]
        private extern static void set_NxActorDescBase_contactReportFlags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_contactReportFlags")]
        private extern static System.UInt32 get_NxActorDescBase_contactReportFlags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_forceFieldMaterial")]
        private extern static void set_NxActorDescBase_forceFieldMaterial_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_forceFieldMaterial")]
        private extern static System.UInt16 get_NxActorDescBase_forceFieldMaterial_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_userData")]
        private extern static void set_NxActorDescBase_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_userData")]
        private extern static System.IntPtr get_NxActorDescBase_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_name")]
        private extern static void set_NxActorDescBase_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_name")]
        private extern static System.String get_NxActorDescBase_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActorDescBase_compartment")]
        private extern static void set_NxActorDescBase_compartment_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActorDescBase_compartment")]
        private extern static IntPtr get_NxActorDescBase_compartment_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActorDescBase_setToDefault")]
        private extern static void NxActorDescBase_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActorDescBase_isValid")]
        private extern static System.Boolean NxActorDescBase_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActorDescBase_getType")]
        private extern static NxActorDescType NxActorDescBase_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxActorDescBase")]
        private extern static IntPtr new_NxActorDescBase_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxActorDescBase GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxActorDescBase)(obj.Target));
				}
			}
			return new NxActorDescBase(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
