//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxForceFieldShapeGroup : DoxyBindObject
	{
		
		internal NxForceFieldShapeGroup(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxForceFieldShapeGroup_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldShapeGroup_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxForceFieldShapeGroup() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxForceFieldShapeGroup)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxForceFieldShapeGroup_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxForceFieldShapeGroup_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Creates a NxForceFieldShape and adds it to the group. </summary>
		public virtual NxForceFieldShape createShape(NxForceFieldShapeDesc unknown20)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShape.GetClass(NxForceFieldShapeGroup_createShape_INVOKE(ClassPointer, doSetFunctionPointers, (unknown20!=null ? unknown20.ClassPointer : NullRef)));
		}
		
		private IntPtr createShape_virtual(IntPtr unknown20)
		{
			return createShape(NxForceFieldShapeDesc.GetClass(unknown20)).ClassPointer.Handle;
		}
		
		delegate IntPtr createShape_0_delegate(IntPtr unknown20);
		
		
		
		
		
		
		private createShape_0_delegate createShape_0_delegatefield;
		
		/// <summary>Releases the passed force field shape. </summary>
		public virtual void releaseShape(NxForceFieldShape unknown21)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShapeGroup_releaseShape_INVOKE(ClassPointer, doSetFunctionPointers, (unknown21!=null ? unknown21.ClassPointer : NullRef));
		}
		
		private void releaseShape_virtual(IntPtr unknown21)
		{
			releaseShape(NxForceFieldShape.GetClass(unknown21));
		}
		
		delegate void releaseShape_1_delegate(IntPtr unknown21);
		
		
		
		
		
		
		private releaseShape_1_delegate releaseShape_1_delegatefield;
		
		/// <summary>Returns the number of shapes in the force field group. </summary>
		public virtual uint getNbShapes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup_getNbShapes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbShapes_virtual()
		{
			return getNbShapes();
		}
		
		delegate uint getNbShapes_2_delegate();
		
		
		
		
		
		
		private getNbShapes_2_delegate getNbShapes_2_delegatefield;
		
		/// <summary>Restarts the shape iterator so that the next call to getNextShape() returns the first shape in the force field group. </summary>
		public virtual void resetShapesIterator()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShapeGroup_resetShapesIterator_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void resetShapesIterator_virtual()
		{
			resetShapesIterator();
		}
		
		delegate void resetShapesIterator_3_delegate();
		
		
		
		
		
		
		private resetShapesIterator_3_delegate resetShapesIterator_3_delegatefield;
		
		/// <summary>Retrieves the next shape when iterating. </summary>
		public virtual NxForceFieldShape getNextShape()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShape.GetClass(NxForceFieldShapeGroup_getNextShape_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getNextShape_virtual()
		{
			return getNextShape().ClassPointer.Handle;
		}
		
		delegate IntPtr getNextShape_4_delegate();
		
		
		
		
		
		
		private getNextShape_4_delegate getNextShape_4_delegatefield;
		
		/// <summary>If this is an include group, getForceField() will return the force field of this group, else NULL will be returned. </summary>
		public virtual NxForceField getForceField()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField.GetClass(NxForceFieldShapeGroup_getForceField_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getForceField_virtual()
		{
			return getForceField().ClassPointer.Handle;
		}
		
		delegate IntPtr getForceField_5_delegate();
		
		
		
		
		
		
		private getForceField_5_delegate getForceField_5_delegatefield;
		
		/// <summary>Returns the force field shape group flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_6_delegate();
		
		
		
		
		
		
		private getFlags_6_delegate getFlags_6_delegatefield;
		
		/// <summary>Writes all of the shape groups's attributes to the description. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the shape group.</param>
		public virtual void saveToDesc(NxForceFieldShapeGroupDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShapeGroup_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxForceFieldShapeGroupDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_7_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_7_delegate saveToDesc_7_delegatefield;
		
		/// <summary>Retrieves the scene which this force field group belongs to. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxForceFieldShapeGroup_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_8_delegate();
		
		
		
		
		
		
		private getScene_8_delegate getScene_8_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShapeGroup_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_9_delegate(string name);
		
		
		
		
		
		
		private setName_9_delegate setName_9_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_10_delegate();
		
		
		
		
		
		
		private getName_10_delegate getName_10_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldShapeGroup_userData")]
        private extern static void set_NxForceFieldShapeGroup_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldShapeGroup_userData")]
        private extern static System.IntPtr get_NxForceFieldShapeGroup_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxForceFieldShapeGroup")]
        private extern static IntPtr new_NxForceFieldShapeGroup_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_createShape")]
        private extern static IntPtr NxForceFieldShapeGroup_createShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef unknown20);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_releaseShape")]
        private extern static void NxForceFieldShapeGroup_releaseShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef unknown21);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getNbShapes")]
        private extern static System.UInt32 NxForceFieldShapeGroup_getNbShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_resetShapesIterator")]
        private extern static void NxForceFieldShapeGroup_resetShapesIterator_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getNextShape")]
        private extern static IntPtr NxForceFieldShapeGroup_getNextShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getForceField")]
        private extern static IntPtr NxForceFieldShapeGroup_getForceField_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getFlags")]
        private extern static System.UInt32 NxForceFieldShapeGroup_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_saveToDesc")]
        private extern static void NxForceFieldShapeGroup_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getScene")]
        private extern static IntPtr NxForceFieldShapeGroup_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_setName")]
        private extern static void NxForceFieldShapeGroup_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShapeGroup_getName")]
        private extern static System.String NxForceFieldShapeGroup_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxForceFieldShapeGroup GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxForceFieldShapeGroup)(obj.Target));
				}
			}
			return new NxForceFieldShapeGroup(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			createShape_0_delegatefield = new createShape_0_delegate(this.createShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createShape_0_delegatefield));
			releaseShape_1_delegatefield = new releaseShape_1_delegate(this.releaseShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseShape_1_delegatefield));
			getNbShapes_2_delegatefield = new getNbShapes_2_delegate(this.getNbShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbShapes_2_delegatefield));
			resetShapesIterator_3_delegatefield = new resetShapesIterator_3_delegate(this.resetShapesIterator_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetShapesIterator_3_delegatefield));
			getNextShape_4_delegatefield = new getNextShape_4_delegate(this.getNextShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNextShape_4_delegatefield));
			getForceField_5_delegatefield = new getForceField_5_delegate(this.getForceField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceField_5_delegatefield));
			getFlags_6_delegatefield = new getFlags_6_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_6_delegatefield));
			saveToDesc_7_delegatefield = new saveToDesc_7_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_7_delegatefield));
			getScene_8_delegatefield = new getScene_8_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_8_delegatefield));
			setName_9_delegatefield = new setName_9_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_9_delegatefield));
			getName_10_delegatefield = new getName_10_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_10_delegatefield));
			return list;
		}
	}
}
