//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserAllocatorDefault : NxUserAllocator
	{
		
		internal NxUserAllocatorDefault(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Allocates size bytes of memory. </summary>
		public override System.IntPtr malloc(System.IntPtr size, NxMemoryType type)
		{
			return NxUserAllocatorDefault_malloc_INVOKE(ClassPointer, doSetFunctionPointers, size, type);
		}
		
		private System.IntPtr malloc_virtual(System.IntPtr size, NxMemoryType type)
		{
			return malloc(size, type);
		}
		
		delegate System.IntPtr malloc_0_delegate(System.IntPtr size, NxMemoryType type);
		
		
		
		
		
		
		private malloc_0_delegate malloc_0_delegatefield;
		
		/// <summary>Allocates size bytes of memory. </summary>
		/// <param name="size">Number of bytes to allocate. </param>
		public override System.IntPtr malloc(System.IntPtr size)
		{
			return NxUserAllocatorDefault_malloc_1_INVOKE(ClassPointer, doSetFunctionPointers, size);
		}
		
		private System.IntPtr malloc_virtual(System.IntPtr size)
		{
			return malloc(size);
		}
		
		delegate System.IntPtr malloc_1_delegate(System.IntPtr size);
		
		
		
		
		
		
		private malloc_1_delegate malloc_1_delegatefield;
		
		/// <summary>Allocates size bytes of memory. </summary>
		public override System.IntPtr mallocDEBUG(System.IntPtr size, string fileName, int line, string className, NxMemoryType type)
		{
			return NxUserAllocatorDefault_mallocDEBUG_INVOKE(ClassPointer, doSetFunctionPointers, size, fileName, line, className, type);
		}
		
		private System.IntPtr mallocDEBUG_virtual(System.IntPtr size, string fileName, int line, string className, NxMemoryType type)
		{
			return mallocDEBUG(size, fileName, line, className, type);
		}
		
		delegate System.IntPtr mallocDEBUG_2_delegate(System.IntPtr size, string fileName, int line, string className, NxMemoryType type);
		
		
		
		
		
		
		private mallocDEBUG_2_delegate mallocDEBUG_2_delegatefield;
		
		/// <summary>Allocates size bytes of memory. </summary>
		/// <param name="size">Number of bytes to allocate. </param>
		/// <param name="fileName">File which is allocating the memory. </param>
		/// <param name="line">Line which is allocating the memory. </param>
		public override System.IntPtr mallocDEBUG(System.IntPtr size, string fileName, int line)
		{
			return NxUserAllocatorDefault_mallocDEBUG_1_INVOKE(ClassPointer, doSetFunctionPointers, size, fileName, line);
		}
		
		private System.IntPtr mallocDEBUG_virtual(System.IntPtr size, string fileName, int line)
		{
			return mallocDEBUG(size, fileName, line);
		}
		
		delegate System.IntPtr mallocDEBUG_3_delegate(System.IntPtr size, string fileName, int line);
		
		
		
		
		
		
		private mallocDEBUG_3_delegate mallocDEBUG_3_delegatefield;
		
		/// <summary>Resizes the memory block previously allocated with malloc() or realloc() to be size() bytes, and returns the possibly moved memory. </summary>
		public override System.IntPtr realloc(System.IntPtr memory, System.IntPtr size)
		{
			return NxUserAllocatorDefault_realloc_INVOKE(ClassPointer, doSetFunctionPointers, memory, size);
		}
		
		private System.IntPtr realloc_virtual(System.IntPtr memory, System.IntPtr size)
		{
			return realloc(memory, size);
		}
		
		delegate System.IntPtr realloc_4_delegate(System.IntPtr memory, System.IntPtr size);
		
		
		
		
		
		
		private realloc_4_delegate realloc_4_delegatefield;
		
		/// <summary>Frees the memory previously allocated by malloc() or realloc(). </summary>
		public override void free(System.IntPtr memory)
		{
			NxUserAllocatorDefault_free_INVOKE(ClassPointer, doSetFunctionPointers, memory);
		}
		
		private void free_virtual(System.IntPtr memory)
		{
			free(memory);
		}
		
		delegate void free_5_delegate(System.IntPtr memory);
		
		
		
		
		
		
		private free_5_delegate free_5_delegatefield;
		
		/// <summary></summary>
		public void check()
		{
			NxUserAllocatorDefault_check_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_malloc")]
        private extern static System.IntPtr NxUserAllocatorDefault_malloc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size, NxMemoryType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_malloc_1")]
        private extern static System.IntPtr NxUserAllocatorDefault_malloc_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_mallocDEBUG")]
        private extern static System.IntPtr NxUserAllocatorDefault_mallocDEBUG_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size, System.String fileName, System.Int32 line, System.String className, NxMemoryType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_mallocDEBUG_1")]
        private extern static System.IntPtr NxUserAllocatorDefault_mallocDEBUG_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size, System.String fileName, System.Int32 line);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_realloc")]
        private extern static System.IntPtr NxUserAllocatorDefault_realloc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memory, System.IntPtr size);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_free")]
        private extern static void NxUserAllocatorDefault_free_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memory);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserAllocatorDefault_check")]
        private extern static void NxUserAllocatorDefault_check_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserAllocatorDefault")]
        private extern static IntPtr new_NxUserAllocatorDefault_INVOKE (bool do_override);

		
		public NxUserAllocatorDefault() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserAllocatorDefault)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserAllocatorDefault_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserAllocatorDefault_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserAllocatorDefault GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserAllocatorDefault)(obj.Target));
				}
			}
			return new NxUserAllocatorDefault(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			malloc_0_delegatefield = new malloc_0_delegate(this.malloc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(malloc_0_delegatefield));
			malloc_1_delegatefield = new malloc_1_delegate(this.malloc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(malloc_1_delegatefield));
			mallocDEBUG_2_delegatefield = new mallocDEBUG_2_delegate(this.mallocDEBUG_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(mallocDEBUG_2_delegatefield));
			mallocDEBUG_3_delegatefield = new mallocDEBUG_3_delegate(this.mallocDEBUG_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(mallocDEBUG_3_delegatefield));
			realloc_4_delegatefield = new realloc_4_delegate(this.realloc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(realloc_4_delegatefield));
			free_5_delegatefield = new free_5_delegate(this.free_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(free_5_delegatefield));
			return list;
		}
	}
}
