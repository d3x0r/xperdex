//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSceneQueryReport : DoxyBindObject
	{
		
		internal NxSceneQueryReport(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Callback function used to return boolean query results. </summary>
		/// <param name="userData">User data pointer passed to the query function. </param>
		/// <param name="result">True if there is an intersection/overlap </param>
		public virtual NxQueryReportResult onBooleanQuery(System.IntPtr userData, bool result)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQueryReport_onBooleanQuery_INVOKE(ClassPointer, doSetFunctionPointers, userData, result);
		}
		
		private NxQueryReportResult onBooleanQuery_virtual(System.IntPtr userData, bool result)
		{
			return onBooleanQuery(userData, result);
		}
		
		delegate NxQueryReportResult onBooleanQuery_0_delegate(System.IntPtr userData, bool result);
		
		
		
		
		
		
		private onBooleanQuery_0_delegate onBooleanQuery_0_delegatefield;
		
		/// <summary>Callback function used to return raycast query results. </summary>
		/// <param name="userData">User data pointer passed to the query function. </param>
		/// <param name="nbHits">Number of hit shapes </param>
		/// <param name="hits">Array of hit descriptors (size nbHits) </param>
		public virtual NxQueryReportResult onRaycastQuery(System.IntPtr userData, uint nbHits, NxRaycastHit hits)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQueryReport_onRaycastQuery_INVOKE(ClassPointer, doSetFunctionPointers, userData, nbHits, (hits!=null ? hits.ClassPointer : NullRef));
		}
		
		private NxQueryReportResult onRaycastQuery_virtual(System.IntPtr userData, uint nbHits, IntPtr hits)
		{
			return onRaycastQuery(userData, nbHits, NxRaycastHit.GetClass(hits));
		}
		
		delegate NxQueryReportResult onRaycastQuery_1_delegate(System.IntPtr userData, uint nbHits, IntPtr hits);
		
		
		
		
		
		
		private onRaycastQuery_1_delegate onRaycastQuery_1_delegatefield;
		
		/// <summary>Callback function used to return shape query results. </summary>
		/// <param name="userData">User data pointer passed to the query function. </param>
		/// <param name="nbHits">Number of hits returned. </param>
		/// <param name="hits">Array of shape pointers. </param>
		public virtual NxQueryReportResult onShapeQuery(System.IntPtr userData, uint nbHits, DoxyBindArray<NxShape> hits)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQueryReport_onShapeQuery_INVOKE(ClassPointer, doSetFunctionPointers, userData, nbHits, hits);
		}
		
		private NxQueryReportResult onShapeQuery_virtual(System.IntPtr userData, uint nbHits, IntPtr[] hits)
		{
			return onShapeQuery(userData, nbHits, hits);
		}
		
		delegate NxQueryReportResult onShapeQuery_2_delegate(System.IntPtr userData, uint nbHits, IntPtr[] hits);
		
		
		
		
		
		
		private onShapeQuery_2_delegate onShapeQuery_2_delegatefield;
		
		/// <summary>Callback function used to return sweep query results. </summary>
		/// <param name="userData">User data pointer passed to the query function. </param>
		/// <param name="nbHits">Number of sweep hits. </param>
		/// <param name="hits">Array of sweep hits (size nbHits) </param>
		public virtual NxQueryReportResult onSweepQuery(System.IntPtr userData, uint nbHits, NxSweepQueryHit hits)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQueryReport_onSweepQuery_INVOKE(ClassPointer, doSetFunctionPointers, userData, nbHits, (hits!=null ? hits.ClassPointer : NullRef));
		}
		
		private NxQueryReportResult onSweepQuery_virtual(System.IntPtr userData, uint nbHits, IntPtr hits)
		{
			return onSweepQuery(userData, nbHits, NxSweepQueryHit.GetClass(hits));
		}
		
		delegate NxQueryReportResult onSweepQuery_3_delegate(System.IntPtr userData, uint nbHits, IntPtr hits);
		
		
		
		
		
		
		private onSweepQuery_3_delegate onSweepQuery_3_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryReport_onBooleanQuery")]
        private extern static NxQueryReportResult NxSceneQueryReport_onBooleanQuery_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr userData, System.Boolean result);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryReport_onRaycastQuery")]
        private extern static NxQueryReportResult NxSceneQueryReport_onRaycastQuery_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr userData, System.UInt32 nbHits, HandleRef hits);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryReport_onShapeQuery")]
        private extern static NxQueryReportResult NxSceneQueryReport_onShapeQuery_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr userData, System.UInt32 nbHits, IntPtr[] hits);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryReport_onSweepQuery")]
        private extern static NxQueryReportResult NxSceneQueryReport_onSweepQuery_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr userData, System.UInt32 nbHits, HandleRef hits);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSceneQueryReport")]
        private extern static IntPtr new_NxSceneQueryReport_INVOKE (bool do_override);

		
		protected NxSceneQueryReport() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxSceneQueryReport)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSceneQueryReport_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSceneQueryReport_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSceneQueryReport GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSceneQueryReport)(obj.Target));
				}
			}
			return new NxSceneQueryReport(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onBooleanQuery_0_delegatefield = new onBooleanQuery_0_delegate(this.onBooleanQuery_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onBooleanQuery_0_delegatefield));
			onRaycastQuery_1_delegatefield = new onRaycastQuery_1_delegate(this.onRaycastQuery_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onRaycastQuery_1_delegatefield));
			onShapeQuery_2_delegatefield = new onShapeQuery_2_delegate(this.onShapeQuery_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onShapeQuery_2_delegatefield));
			onSweepQuery_3_delegatefield = new onSweepQuery_3_delegate(this.onSweepQuery_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onSweepQuery_3_delegatefield));
			return list;
		}
	}
}
