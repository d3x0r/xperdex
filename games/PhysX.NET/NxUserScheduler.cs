//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserScheduler : DoxyBindObject
	{
		
		internal NxUserScheduler(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The SDK calls this method to add a task to the applications work queue. </summary>
		/// <param name="task">for the application to execute</param>
		public virtual void addTask(NxTask task)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserScheduler_addTask_INVOKE(ClassPointer, doSetFunctionPointers, (task!=null ? task.ClassPointer : NullRef));
		}
		
		private void addTask_virtual(IntPtr task)
		{
			addTask(NxTask.GetClass(task));
		}
		
		delegate void addTask_0_delegate(IntPtr task);
		
		
		
		
		
		
		private addTask_0_delegate addTask_0_delegatefield;
		
		/// <summary>The SDK calls this method to add a background task to the applications work queue. </summary>
		/// <param name="task">for the application to execute</param>
		public virtual void addBackgroundTask(NxTask task)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserScheduler_addBackgroundTask_INVOKE(ClassPointer, doSetFunctionPointers, (task!=null ? task.ClassPointer : NullRef));
		}
		
		private void addBackgroundTask_virtual(IntPtr task)
		{
			addBackgroundTask(NxTask.GetClass(task));
		}
		
		delegate void addBackgroundTask_1_delegate(IntPtr task);
		
		
		
		
		
		
		private addBackgroundTask_1_delegate addBackgroundTask_1_delegatefield;
		
		/// <summary>The SDK thread calls this function to suspend. </summary>
		public virtual void waitTasksComplete()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserScheduler_waitTasksComplete_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void waitTasksComplete_virtual()
		{
			waitTasksComplete();
		}
		
		delegate void waitTasksComplete_2_delegate();
		
		
		
		
		
		
		private waitTasksComplete_2_delegate waitTasksComplete_2_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserScheduler_addTask")]
        private extern static void NxUserScheduler_addTask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef task);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserScheduler_addBackgroundTask")]
        private extern static void NxUserScheduler_addBackgroundTask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef task);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserScheduler_waitTasksComplete")]
        private extern static void NxUserScheduler_waitTasksComplete_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserScheduler")]
        private extern static IntPtr new_NxUserScheduler_INVOKE (bool do_override);

		
		protected NxUserScheduler() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserScheduler)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserScheduler_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserScheduler_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserScheduler GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserScheduler)(obj.Target));
				}
			}
			return new NxUserScheduler(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			addTask_0_delegatefield = new addTask_0_delegate(this.addTask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addTask_0_delegatefield));
			addBackgroundTask_1_delegatefield = new addBackgroundTask_1_delegate(this.addBackgroundTask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addBackgroundTask_1_delegatefield));
			waitTasksComplete_2_delegatefield = new waitTasksComplete_2_delegate(this.waitTasksComplete_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(waitTasksComplete_2_delegatefield));
			return list;
		}
	}
}
