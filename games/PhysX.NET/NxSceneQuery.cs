//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSceneQuery : DoxyBindObject
	{
		
		internal NxSceneQuery(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Gets report object. </summary>
		public virtual NxSceneQueryReport getQueryReport()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQueryReport.GetClass(NxSceneQuery_getQueryReport_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getQueryReport_virtual()
		{
			return getQueryReport().ClassPointer.Handle;
		}
		
		delegate IntPtr getQueryReport_0_delegate();
		
		
		
		
		
		
		private getQueryReport_0_delegate getQueryReport_0_delegatefield;
		
		/// <summary>Gets the execution mode. </summary>
		public virtual NxSceneQueryExecuteMode getExecuteMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_getExecuteMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxSceneQueryExecuteMode getExecuteMode_virtual()
		{
			return getExecuteMode();
		}
		
		delegate NxSceneQueryExecuteMode getExecuteMode_1_delegate();
		
		
		
		
		
		
		private getExecuteMode_1_delegate getExecuteMode_1_delegatefield;
		
		/// <summary>Executes batched queries. </summary>
		public virtual void execute()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSceneQuery_execute_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void execute_virtual()
		{
			execute();
		}
		
		delegate void execute_2_delegate();
		
		
		
		
		
		
		private execute_2_delegate execute_2_delegatefield;
		
		/// <summary>Used to determine if an execute call has completed. </summary>
		/// <param name="block">Specifies if this function should wait until queries are complete. </param>
		public virtual bool finish(bool block)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_finish_INVOKE(ClassPointer, doSetFunctionPointers, block);
		}
		
		private bool finish_virtual(bool block)
		{
			return finish(block);
		}
		
		delegate bool finish_3_delegate(bool block);
		
		
		
		
		
		
		private finish_3_delegate finish_3_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, NxGroupsMask groupsMask, DoxyBindArray<NxShape> cache, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), cache, userData);
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask, IntPtr[] cache, System.IntPtr userData)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType, groups, maxDist, NxGroupsMask.GetClass(groupsMask), cache, userData);
		}
		
		delegate bool raycastAnyShape_4_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask, IntPtr[] cache, System.IntPtr userData);
		
		
		
		
		
		
		private raycastAnyShape_4_delegate raycastAnyShape_4_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, NxGroupsMask groupsMask, DoxyBindArray<NxShape> cache)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), cache);
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask, IntPtr[] cache)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType, groups, maxDist, NxGroupsMask.GetClass(groupsMask), cache);
		}
		
		delegate bool raycastAnyShape_5_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask, IntPtr[] cache);
		
		
		
		
		
		
		private raycastAnyShape_5_delegate raycastAnyShape_5_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType, groups, maxDist, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate bool raycastAnyShape_6_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, IntPtr groupsMask);
		
		
		
		
		
		
		private raycastAnyShape_6_delegate raycastAnyShape_6_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist);
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType, groups, maxDist);
		}
		
		delegate bool raycastAnyShape_7_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist);
		
		
		
		
		
		
		private raycastAnyShape_7_delegate raycastAnyShape_7_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType, uint groups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups);
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType, groups);
		}
		
		delegate bool raycastAnyShape_8_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups);
		
		
		
		
		
		
		private raycastAnyShape_8_delegate raycastAnyShape_8_delegatefield;
		
		/// <summary>Check if a ray intersects any shape. </summary>
		public virtual bool raycastAnyShape(NxRay worldRay, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAnyShape_5_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType);
		}
		
		private bool raycastAnyShape_virtual(IntPtr worldRay, NxShapesType shapesType)
		{
			return raycastAnyShape(NxRay.GetClass(worldRay), shapesType);
		}
		
		delegate bool raycastAnyShape_9_delegate(IntPtr worldRay, NxShapesType shapesType);
		
		
		
		
		
		
		private raycastAnyShape_9_delegate raycastAnyShape_9_delegatefield;
		
		/// <summary>Check if a sphere overlaps shapes. </summary>
		public virtual bool checkOverlapSphere(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapSphere_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate bool checkOverlapSphere_10_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private checkOverlapSphere_10_delegate checkOverlapSphere_10_delegatefield;
		
		/// <summary>Check if a sphere overlaps shapes. </summary>
		public virtual bool checkOverlapSphere(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapSphere_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate bool checkOverlapSphere_11_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private checkOverlapSphere_11_delegate checkOverlapSphere_11_delegatefield;
		
		/// <summary>Check if a sphere overlaps shapes. </summary>
		public virtual bool checkOverlapSphere(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapSphere_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere), shapesType, activeGroups);
		}
		
		delegate bool checkOverlapSphere_12_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private checkOverlapSphere_12_delegate checkOverlapSphere_12_delegatefield;
		
		/// <summary>Check if a sphere overlaps shapes. </summary>
		public virtual bool checkOverlapSphere(NxSphere worldSphere, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapSphere_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType);
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere, NxShapesType shapesType)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere), shapesType);
		}
		
		delegate bool checkOverlapSphere_13_delegate(IntPtr worldSphere, NxShapesType shapesType);
		
		
		
		
		
		
		private checkOverlapSphere_13_delegate checkOverlapSphere_13_delegatefield;
		
		/// <summary>Check if a sphere overlaps shapes. </summary>
		public virtual bool checkOverlapSphere(NxSphere worldSphere)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapSphere_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef));
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere));
		}
		
		delegate bool checkOverlapSphere_14_delegate(IntPtr worldSphere);
		
		
		
		
		
		
		private checkOverlapSphere_14_delegate checkOverlapSphere_14_delegatefield;
		
		/// <summary>Check if a AABB overlaps shapes. </summary>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapAABB_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate bool checkOverlapAABB_15_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private checkOverlapAABB_15_delegate checkOverlapAABB_15_delegatefield;
		
		/// <summary>Check if a AABB overlaps shapes. </summary>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapAABB_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate bool checkOverlapAABB_16_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private checkOverlapAABB_16_delegate checkOverlapAABB_16_delegatefield;
		
		/// <summary>Check if a AABB overlaps shapes. </summary>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapAABB_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds), shapesType, activeGroups);
		}
		
		delegate bool checkOverlapAABB_17_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private checkOverlapAABB_17_delegate checkOverlapAABB_17_delegatefield;
		
		/// <summary>Check if a AABB overlaps shapes. </summary>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapAABB_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType);
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds, NxShapesType shapesType)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds), shapesType);
		}
		
		delegate bool checkOverlapAABB_18_delegate(IntPtr worldBounds, NxShapesType shapesType);
		
		
		
		
		
		
		private checkOverlapAABB_18_delegate checkOverlapAABB_18_delegatefield;
		
		/// <summary>Check if a AABB overlaps shapes. </summary>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapAABB_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef));
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds));
		}
		
		delegate bool checkOverlapAABB_19_delegate(IntPtr worldBounds);
		
		
		
		
		
		
		private checkOverlapAABB_19_delegate checkOverlapAABB_19_delegatefield;
		
		/// <summary>Check if an OBB overlaps shapes. </summary>
		public virtual bool checkOverlapOBB(NxBox worldBox, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapOBB_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate bool checkOverlapOBB_20_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private checkOverlapOBB_20_delegate checkOverlapOBB_20_delegatefield;
		
		/// <summary>Check if an OBB overlaps shapes. </summary>
		public virtual bool checkOverlapOBB(NxBox worldBox, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapOBB_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate bool checkOverlapOBB_21_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private checkOverlapOBB_21_delegate checkOverlapOBB_21_delegatefield;
		
		/// <summary>Check if an OBB overlaps shapes. </summary>
		public virtual bool checkOverlapOBB(NxBox worldBox, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapOBB_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox), shapesType, activeGroups);
		}
		
		delegate bool checkOverlapOBB_22_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private checkOverlapOBB_22_delegate checkOverlapOBB_22_delegatefield;
		
		/// <summary>Check if an OBB overlaps shapes. </summary>
		public virtual bool checkOverlapOBB(NxBox worldBox, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapOBB_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType);
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox, NxShapesType shapesType)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox), shapesType);
		}
		
		delegate bool checkOverlapOBB_23_delegate(IntPtr worldBox, NxShapesType shapesType);
		
		
		
		
		
		
		private checkOverlapOBB_23_delegate checkOverlapOBB_23_delegatefield;
		
		/// <summary>Check if an OBB overlaps shapes. </summary>
		public virtual bool checkOverlapOBB(NxBox worldBox)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapOBB_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef));
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox));
		}
		
		delegate bool checkOverlapOBB_24_delegate(IntPtr worldBox);
		
		
		
		
		
		
		private checkOverlapOBB_24_delegate checkOverlapOBB_24_delegatefield;
		
		/// <summary>Check if a capsule overlaps shapes. </summary>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate bool checkOverlapCapsule_25_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private checkOverlapCapsule_25_delegate checkOverlapCapsule_25_delegatefield;
		
		/// <summary>Check if a capsule overlaps shapes. </summary>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapCapsule_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate bool checkOverlapCapsule_26_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private checkOverlapCapsule_26_delegate checkOverlapCapsule_26_delegatefield;
		
		/// <summary>Check if a capsule overlaps shapes. </summary>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapCapsule_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups);
		}
		
		delegate bool checkOverlapCapsule_27_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private checkOverlapCapsule_27_delegate checkOverlapCapsule_27_delegatefield;
		
		/// <summary>Check if a capsule overlaps shapes. </summary>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapCapsule_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType);
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule, NxShapesType shapesType)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule), shapesType);
		}
		
		delegate bool checkOverlapCapsule_28_delegate(IntPtr worldCapsule, NxShapesType shapesType);
		
		
		
		
		
		
		private checkOverlapCapsule_28_delegate checkOverlapCapsule_28_delegatefield;
		
		/// <summary>Check if a capsule overlaps shapes. </summary>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_checkOverlapCapsule_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef));
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule));
		}
		
		delegate bool checkOverlapCapsule_29_delegate(IntPtr worldCapsule);
		
		
		
		
		
		
		private checkOverlapCapsule_29_delegate checkOverlapCapsule_29_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups, float maxDist, uint hintFlags, NxGroupsMask groupsMask, DoxyBindArray<NxShape> cache, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups, maxDist, hintFlags, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), cache, userData));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, IntPtr[] cache, System.IntPtr userData)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups, maxDist, hintFlags, NxGroupsMask.GetClass(groupsMask), cache, userData).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_30_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, IntPtr[] cache, System.IntPtr userData);
		
		
		
		
		
		
		private raycastClosestShape_30_delegate raycastClosestShape_30_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups, float maxDist, uint hintFlags, NxGroupsMask groupsMask, DoxyBindArray<NxShape> cache)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups, maxDist, hintFlags, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), cache));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, IntPtr[] cache)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups, maxDist, hintFlags, NxGroupsMask.GetClass(groupsMask), cache).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_31_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, IntPtr[] cache);
		
		
		
		
		
		
		private raycastClosestShape_31_delegate raycastClosestShape_31_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups, float maxDist, uint hintFlags, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups, maxDist, hintFlags, (groupsMask!=null ? groupsMask.ClassPointer : NullRef)));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups, maxDist, hintFlags, NxGroupsMask.GetClass(groupsMask)).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_32_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask);
		
		
		
		
		
		
		private raycastClosestShape_32_delegate raycastClosestShape_32_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups, float maxDist, uint hintFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups, maxDist, hintFlags));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups, maxDist, hintFlags).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_33_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist, uint hintFlags);
		
		
		
		
		
		
		private raycastClosestShape_33_delegate raycastClosestShape_33_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups, float maxDist)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups, maxDist));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups, maxDist).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_34_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups, float maxDist);
		
		
		
		
		
		
		private raycastClosestShape_34_delegate raycastClosestShape_34_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit, uint groups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_5_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef), groups));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit), groups).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_35_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit, uint groups);
		
		
		
		
		
		
		private raycastClosestShape_35_delegate raycastClosestShape_35_delegatefield;
		
		/// <summary>Find the closest ray/shape intersection. </summary>
		public virtual NxShape raycastClosestShape(NxRay worldRay, NxShapesType shapesType, NxRaycastHit hit)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxSceneQuery_raycastClosestShape_6_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, (hit!=null ? hit.ClassPointer : NullRef)));
		}
		
		private IntPtr raycastClosestShape_virtual(IntPtr worldRay, NxShapesType shapesType, IntPtr hit)
		{
			return raycastClosestShape(NxRay.GetClass(worldRay), shapesType, NxRaycastHit.GetClass(hit)).ClassPointer.Handle;
		}
		
		delegate IntPtr raycastClosestShape_36_delegate(IntPtr worldRay, NxShapesType shapesType, IntPtr hit);
		
		
		
		
		
		
		private raycastClosestShape_36_delegate raycastClosestShape_36_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, hintFlags, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, System.IntPtr userData)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType, groups, maxDist, hintFlags, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint raycastAllShapes_37_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private raycastAllShapes_37_delegate raycastAllShapes_37_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, hintFlags, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType, groups, maxDist, hintFlags, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint raycastAllShapes_38_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags, IntPtr groupsMask);
		
		
		
		
		
		
		private raycastAllShapes_38_delegate raycastAllShapes_38_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist, hintFlags);
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType, groups, maxDist, hintFlags);
		}
		
		delegate uint raycastAllShapes_39_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist, uint hintFlags);
		
		
		
		
		
		
		private raycastAllShapes_39_delegate raycastAllShapes_39_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType, uint groups, float maxDist)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups, maxDist);
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType, groups, maxDist);
		}
		
		delegate uint raycastAllShapes_40_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups, float maxDist);
		
		
		
		
		
		
		private raycastAllShapes_40_delegate raycastAllShapes_40_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType, uint groups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_4_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType, groups);
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType, uint groups)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType, groups);
		}
		
		delegate uint raycastAllShapes_41_delegate(IntPtr worldRay, NxShapesType shapesType, uint groups);
		
		
		
		
		
		
		private raycastAllShapes_41_delegate raycastAllShapes_41_delegatefield;
		
		/// <summary>Find all the shapes which a ray intersects. </summary>
		public virtual uint raycastAllShapes(NxRay worldRay, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_raycastAllShapes_5_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), shapesType);
		}
		
		private uint raycastAllShapes_virtual(IntPtr worldRay, NxShapesType shapesType)
		{
			return raycastAllShapes(NxRay.GetClass(worldRay), shapesType);
		}
		
		delegate uint raycastAllShapes_42_delegate(IntPtr worldRay, NxShapesType shapesType);
		
		
		
		
		
		
		private raycastAllShapes_42_delegate raycastAllShapes_42_delegatefield;
		
		/// <summary>Find all shapes which overlap a sphere. </summary>
		public virtual uint overlapSphereShapes(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapSphereShapes_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint overlapSphereShapes_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return overlapSphereShapes(NxSphere.GetClass(worldSphere), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint overlapSphereShapes_43_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private overlapSphereShapes_43_delegate overlapSphereShapes_43_delegatefield;
		
		/// <summary>Find all shapes which overlap a sphere. </summary>
		public virtual uint overlapSphereShapes(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapSphereShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint overlapSphereShapes_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return overlapSphereShapes(NxSphere.GetClass(worldSphere), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint overlapSphereShapes_44_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private overlapSphereShapes_44_delegate overlapSphereShapes_44_delegatefield;
		
		/// <summary>Find all shapes which overlap a sphere. </summary>
		public virtual uint overlapSphereShapes(NxSphere worldSphere, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapSphereShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private uint overlapSphereShapes_virtual(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups)
		{
			return overlapSphereShapes(NxSphere.GetClass(worldSphere), shapesType, activeGroups);
		}
		
		delegate uint overlapSphereShapes_45_delegate(IntPtr worldSphere, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private overlapSphereShapes_45_delegate overlapSphereShapes_45_delegatefield;
		
		/// <summary>Find all shapes which overlap a sphere. </summary>
		public virtual uint overlapSphereShapes(NxSphere worldSphere, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapSphereShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef), shapesType);
		}
		
		private uint overlapSphereShapes_virtual(IntPtr worldSphere, NxShapesType shapesType)
		{
			return overlapSphereShapes(NxSphere.GetClass(worldSphere), shapesType);
		}
		
		delegate uint overlapSphereShapes_46_delegate(IntPtr worldSphere, NxShapesType shapesType);
		
		
		
		
		
		
		private overlapSphereShapes_46_delegate overlapSphereShapes_46_delegatefield;
		
		/// <summary>Find all shapes which overlap an AABB. </summary>
		public virtual uint overlapAABBShapes(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapAABBShapes_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint overlapAABBShapes_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return overlapAABBShapes(NxBounds3.GetClass(worldBounds), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint overlapAABBShapes_47_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private overlapAABBShapes_47_delegate overlapAABBShapes_47_delegatefield;
		
		/// <summary>Find all shapes which overlap an AABB. </summary>
		public virtual uint overlapAABBShapes(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapAABBShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint overlapAABBShapes_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return overlapAABBShapes(NxBounds3.GetClass(worldBounds), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint overlapAABBShapes_48_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private overlapAABBShapes_48_delegate overlapAABBShapes_48_delegatefield;
		
		/// <summary>Find all shapes which overlap an AABB. </summary>
		public virtual uint overlapAABBShapes(NxBounds3 worldBounds, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapAABBShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private uint overlapAABBShapes_virtual(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups)
		{
			return overlapAABBShapes(NxBounds3.GetClass(worldBounds), shapesType, activeGroups);
		}
		
		delegate uint overlapAABBShapes_49_delegate(IntPtr worldBounds, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private overlapAABBShapes_49_delegate overlapAABBShapes_49_delegatefield;
		
		/// <summary>Find all shapes which overlap an AABB. </summary>
		public virtual uint overlapAABBShapes(NxBounds3 worldBounds, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapAABBShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef), shapesType);
		}
		
		private uint overlapAABBShapes_virtual(IntPtr worldBounds, NxShapesType shapesType)
		{
			return overlapAABBShapes(NxBounds3.GetClass(worldBounds), shapesType);
		}
		
		delegate uint overlapAABBShapes_50_delegate(IntPtr worldBounds, NxShapesType shapesType);
		
		
		
		
		
		
		private overlapAABBShapes_50_delegate overlapAABBShapes_50_delegatefield;
		
		/// <summary>Find all shapes which overlap an OBB. </summary>
		public virtual uint overlapOBBShapes(NxBox worldBox, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapOBBShapes_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint overlapOBBShapes_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return overlapOBBShapes(NxBox.GetClass(worldBox), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint overlapOBBShapes_51_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private overlapOBBShapes_51_delegate overlapOBBShapes_51_delegatefield;
		
		/// <summary>Find all shapes which overlap an OBB. </summary>
		public virtual uint overlapOBBShapes(NxBox worldBox, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapOBBShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint overlapOBBShapes_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return overlapOBBShapes(NxBox.GetClass(worldBox), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint overlapOBBShapes_52_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private overlapOBBShapes_52_delegate overlapOBBShapes_52_delegatefield;
		
		/// <summary>Find all shapes which overlap an OBB. </summary>
		public virtual uint overlapOBBShapes(NxBox worldBox, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapOBBShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private uint overlapOBBShapes_virtual(IntPtr worldBox, NxShapesType shapesType, uint activeGroups)
		{
			return overlapOBBShapes(NxBox.GetClass(worldBox), shapesType, activeGroups);
		}
		
		delegate uint overlapOBBShapes_53_delegate(IntPtr worldBox, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private overlapOBBShapes_53_delegate overlapOBBShapes_53_delegatefield;
		
		/// <summary>Find all shapes which overlap an OBB. </summary>
		public virtual uint overlapOBBShapes(NxBox worldBox, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapOBBShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), shapesType);
		}
		
		private uint overlapOBBShapes_virtual(IntPtr worldBox, NxShapesType shapesType)
		{
			return overlapOBBShapes(NxBox.GetClass(worldBox), shapesType);
		}
		
		delegate uint overlapOBBShapes_54_delegate(IntPtr worldBox, NxShapesType shapesType);
		
		
		
		
		
		
		private overlapOBBShapes_54_delegate overlapOBBShapes_54_delegatefield;
		
		/// <summary>Find all shapes which overlap a capsule. </summary>
		public virtual uint overlapCapsuleShapes(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapCapsuleShapes_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint overlapCapsuleShapes_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return overlapCapsuleShapes(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint overlapCapsuleShapes_55_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private overlapCapsuleShapes_55_delegate overlapCapsuleShapes_55_delegatefield;
		
		/// <summary>Find all shapes which overlap a capsule. </summary>
		public virtual uint overlapCapsuleShapes(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapCapsuleShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint overlapCapsuleShapes_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return overlapCapsuleShapes(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint overlapCapsuleShapes_56_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private overlapCapsuleShapes_56_delegate overlapCapsuleShapes_56_delegatefield;
		
		/// <summary>Find all shapes which overlap a capsule. </summary>
		public virtual uint overlapCapsuleShapes(NxCapsule worldCapsule, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapCapsuleShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private uint overlapCapsuleShapes_virtual(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups)
		{
			return overlapCapsuleShapes(NxCapsule.GetClass(worldCapsule), shapesType, activeGroups);
		}
		
		delegate uint overlapCapsuleShapes_57_delegate(IntPtr worldCapsule, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private overlapCapsuleShapes_57_delegate overlapCapsuleShapes_57_delegatefield;
		
		/// <summary>Find all shapes which overlap a capsule. </summary>
		public virtual uint overlapCapsuleShapes(NxCapsule worldCapsule, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_overlapCapsuleShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), shapesType);
		}
		
		private uint overlapCapsuleShapes_virtual(IntPtr worldCapsule, NxShapesType shapesType)
		{
			return overlapCapsuleShapes(NxCapsule.GetClass(worldCapsule), shapesType);
		}
		
		delegate uint overlapCapsuleShapes_58_delegate(IntPtr worldCapsule, NxShapesType shapesType);
		
		
		
		
		
		
		private overlapCapsuleShapes_58_delegate overlapCapsuleShapes_58_delegatefield;
		
		/// <summary>Find the set of shapes which are in the negative half space of a number of planes. </summary>
		public virtual uint cullShapes(uint nbPlanes, NxPlane worldPlanes, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_cullShapes_INVOKE(ClassPointer, doSetFunctionPointers, nbPlanes, (worldPlanes!=null ? worldPlanes.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint cullShapes_virtual(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return cullShapes(nbPlanes, NxPlane.GetClass(worldPlanes), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint cullShapes_59_delegate(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private cullShapes_59_delegate cullShapes_59_delegatefield;
		
		/// <summary>Find the set of shapes which are in the negative half space of a number of planes. </summary>
		public virtual uint cullShapes(uint nbPlanes, NxPlane worldPlanes, NxShapesType shapesType, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_cullShapes_1_INVOKE(ClassPointer, doSetFunctionPointers, nbPlanes, (worldPlanes!=null ? worldPlanes.ClassPointer : NullRef), shapesType, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint cullShapes_virtual(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask)
		{
			return cullShapes(nbPlanes, NxPlane.GetClass(worldPlanes), shapesType, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint cullShapes_60_delegate(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private cullShapes_60_delegate cullShapes_60_delegatefield;
		
		/// <summary>Find the set of shapes which are in the negative half space of a number of planes. </summary>
		public virtual uint cullShapes(uint nbPlanes, NxPlane worldPlanes, NxShapesType shapesType, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_cullShapes_2_INVOKE(ClassPointer, doSetFunctionPointers, nbPlanes, (worldPlanes!=null ? worldPlanes.ClassPointer : NullRef), shapesType, activeGroups);
		}
		
		private uint cullShapes_virtual(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups)
		{
			return cullShapes(nbPlanes, NxPlane.GetClass(worldPlanes), shapesType, activeGroups);
		}
		
		delegate uint cullShapes_61_delegate(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType, uint activeGroups);
		
		
		
		
		
		
		private cullShapes_61_delegate cullShapes_61_delegatefield;
		
		/// <summary>Find the set of shapes which are in the negative half space of a number of planes. </summary>
		public virtual uint cullShapes(uint nbPlanes, NxPlane worldPlanes, NxShapesType shapesType)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_cullShapes_3_INVOKE(ClassPointer, doSetFunctionPointers, nbPlanes, (worldPlanes!=null ? worldPlanes.ClassPointer : NullRef), shapesType);
		}
		
		private uint cullShapes_virtual(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType)
		{
			return cullShapes(nbPlanes, NxPlane.GetClass(worldPlanes), shapesType);
		}
		
		delegate uint cullShapes_62_delegate(uint nbPlanes, IntPtr worldPlanes, NxShapesType shapesType);
		
		
		
		
		
		
		private cullShapes_62_delegate cullShapes_62_delegatefield;
		
		/// <summary>Perform a linear OBB sweep. </summary>
		public virtual uint linearOBBSweep(NxBox worldBox, ref NxVec3 motion, uint flags, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearOBBSweep_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), ref motion, flags, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint linearOBBSweep_virtual(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return linearOBBSweep(NxBox.GetClass(worldBox), ref motion, flags, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint linearOBBSweep_63_delegate(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private linearOBBSweep_63_delegate linearOBBSweep_63_delegatefield;
		
		/// <summary>Perform a linear OBB sweep. </summary>
		public virtual uint linearOBBSweep(NxBox worldBox, ref NxVec3 motion, uint flags, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearOBBSweep_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), ref motion, flags, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint linearOBBSweep_virtual(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask)
		{
			return linearOBBSweep(NxBox.GetClass(worldBox), ref motion, flags, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint linearOBBSweep_64_delegate(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private linearOBBSweep_64_delegate linearOBBSweep_64_delegatefield;
		
		/// <summary>Perform a linear OBB sweep. </summary>
		public virtual uint linearOBBSweep(NxBox worldBox, ref NxVec3 motion, uint flags, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearOBBSweep_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), ref motion, flags, activeGroups);
		}
		
		private uint linearOBBSweep_virtual(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups)
		{
			return linearOBBSweep(NxBox.GetClass(worldBox), ref motion, flags, activeGroups);
		}
		
		delegate uint linearOBBSweep_65_delegate(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags, uint activeGroups);
		
		
		
		
		
		
		private linearOBBSweep_65_delegate linearOBBSweep_65_delegatefield;
		
		/// <summary>Perform a linear OBB sweep. </summary>
		public virtual uint linearOBBSweep(NxBox worldBox, ref NxVec3 motion, uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearOBBSweep_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef), ref motion, flags);
		}
		
		private uint linearOBBSweep_virtual(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags)
		{
			return linearOBBSweep(NxBox.GetClass(worldBox), ref motion, flags);
		}
		
		delegate uint linearOBBSweep_66_delegate(IntPtr worldBox, [In()] ref NxVec3 motion, uint flags);
		
		
		
		
		
		
		private linearOBBSweep_66_delegate linearOBBSweep_66_delegatefield;
		
		/// <summary>Perform a linear capsule sweep. </summary>
		public virtual uint linearCapsuleSweep(NxCapsule worldCapsule, ref NxVec3 motion, uint flags, uint activeGroups, NxGroupsMask groupsMask, System.IntPtr userData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearCapsuleSweep_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), ref motion, flags, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef), userData);
		}
		
		private uint linearCapsuleSweep_virtual(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask, System.IntPtr userData)
		{
			return linearCapsuleSweep(NxCapsule.GetClass(worldCapsule), ref motion, flags, activeGroups, NxGroupsMask.GetClass(groupsMask), userData);
		}
		
		delegate uint linearCapsuleSweep_67_delegate(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask, System.IntPtr userData);
		
		
		
		
		
		
		private linearCapsuleSweep_67_delegate linearCapsuleSweep_67_delegatefield;
		
		/// <summary>Perform a linear capsule sweep. </summary>
		public virtual uint linearCapsuleSweep(NxCapsule worldCapsule, ref NxVec3 motion, uint flags, uint activeGroups, NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearCapsuleSweep_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), ref motion, flags, activeGroups, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private uint linearCapsuleSweep_virtual(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask)
		{
			return linearCapsuleSweep(NxCapsule.GetClass(worldCapsule), ref motion, flags, activeGroups, NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate uint linearCapsuleSweep_68_delegate(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups, IntPtr groupsMask);
		
		
		
		
		
		
		private linearCapsuleSweep_68_delegate linearCapsuleSweep_68_delegatefield;
		
		/// <summary>Perform a linear capsule sweep. </summary>
		public virtual uint linearCapsuleSweep(NxCapsule worldCapsule, ref NxVec3 motion, uint flags, uint activeGroups)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearCapsuleSweep_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), ref motion, flags, activeGroups);
		}
		
		private uint linearCapsuleSweep_virtual(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups)
		{
			return linearCapsuleSweep(NxCapsule.GetClass(worldCapsule), ref motion, flags, activeGroups);
		}
		
		delegate uint linearCapsuleSweep_69_delegate(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags, uint activeGroups);
		
		
		
		
		
		
		private linearCapsuleSweep_69_delegate linearCapsuleSweep_69_delegatefield;
		
		/// <summary>Perform a linear capsule sweep. </summary>
		public virtual uint linearCapsuleSweep(NxCapsule worldCapsule, ref NxVec3 motion, uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSceneQuery_linearCapsuleSweep_3_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef), ref motion, flags);
		}
		
		private uint linearCapsuleSweep_virtual(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags)
		{
			return linearCapsuleSweep(NxCapsule.GetClass(worldCapsule), ref motion, flags);
		}
		
		delegate uint linearCapsuleSweep_70_delegate(IntPtr worldCapsule, [In()] ref NxVec3 motion, uint flags);
		
		
		
		
		
		
		private linearCapsuleSweep_70_delegate linearCapsuleSweep_70_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_getQueryReport")]
        private extern static IntPtr NxSceneQuery_getQueryReport_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_getExecuteMode")]
        private extern static NxSceneQueryExecuteMode NxSceneQuery_getExecuteMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_execute")]
        private extern static void NxSceneQuery_execute_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_finish")]
        private extern static System.Boolean NxSceneQuery_finish_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean block);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, HandleRef groupsMask, IntPtr[] cache, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape_1")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, HandleRef groupsMask, IntPtr[] cache);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape_2")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape_3")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape_4")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAnyShape_5")]
        private extern static System.Boolean NxSceneQuery_raycastAnyShape_5_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapSphere")]
        private extern static System.Boolean NxSceneQuery_checkOverlapSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapSphere_1")]
        private extern static System.Boolean NxSceneQuery_checkOverlapSphere_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapSphere_2")]
        private extern static System.Boolean NxSceneQuery_checkOverlapSphere_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapSphere_3")]
        private extern static System.Boolean NxSceneQuery_checkOverlapSphere_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapSphere_4")]
        private extern static System.Boolean NxSceneQuery_checkOverlapSphere_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapAABB")]
        private extern static System.Boolean NxSceneQuery_checkOverlapAABB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapAABB_1")]
        private extern static System.Boolean NxSceneQuery_checkOverlapAABB_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapAABB_2")]
        private extern static System.Boolean NxSceneQuery_checkOverlapAABB_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapAABB_3")]
        private extern static System.Boolean NxSceneQuery_checkOverlapAABB_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapAABB_4")]
        private extern static System.Boolean NxSceneQuery_checkOverlapAABB_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapOBB")]
        private extern static System.Boolean NxSceneQuery_checkOverlapOBB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapOBB_1")]
        private extern static System.Boolean NxSceneQuery_checkOverlapOBB_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapOBB_2")]
        private extern static System.Boolean NxSceneQuery_checkOverlapOBB_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapOBB_3")]
        private extern static System.Boolean NxSceneQuery_checkOverlapOBB_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapOBB_4")]
        private extern static System.Boolean NxSceneQuery_checkOverlapOBB_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapCapsule")]
        private extern static System.Boolean NxSceneQuery_checkOverlapCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapCapsule_1")]
        private extern static System.Boolean NxSceneQuery_checkOverlapCapsule_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapCapsule_2")]
        private extern static System.Boolean NxSceneQuery_checkOverlapCapsule_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapCapsule_3")]
        private extern static System.Boolean NxSceneQuery_checkOverlapCapsule_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_checkOverlapCapsule_4")]
        private extern static System.Boolean NxSceneQuery_checkOverlapCapsule_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags, HandleRef groupsMask, IntPtr[] cache, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_1")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags, HandleRef groupsMask, IntPtr[] cache);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_2")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_3")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_4")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups, System.Single maxDist);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_5")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_5_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit, System.UInt32 groups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastClosestShape_6")]
        private extern static IntPtr NxSceneQuery_raycastClosestShape_6_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, HandleRef hit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes_1")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes_2")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist, System.UInt32 hintFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes_3")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups, System.Single maxDist);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes_4")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType, System.UInt32 groups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_raycastAllShapes_5")]
        private extern static System.UInt32 NxSceneQuery_raycastAllShapes_5_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapSphereShapes")]
        private extern static System.UInt32 NxSceneQuery_overlapSphereShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapSphereShapes_1")]
        private extern static System.UInt32 NxSceneQuery_overlapSphereShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapSphereShapes_2")]
        private extern static System.UInt32 NxSceneQuery_overlapSphereShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapSphereShapes_3")]
        private extern static System.UInt32 NxSceneQuery_overlapSphereShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapAABBShapes")]
        private extern static System.UInt32 NxSceneQuery_overlapAABBShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapAABBShapes_1")]
        private extern static System.UInt32 NxSceneQuery_overlapAABBShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapAABBShapes_2")]
        private extern static System.UInt32 NxSceneQuery_overlapAABBShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapAABBShapes_3")]
        private extern static System.UInt32 NxSceneQuery_overlapAABBShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapOBBShapes")]
        private extern static System.UInt32 NxSceneQuery_overlapOBBShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapOBBShapes_1")]
        private extern static System.UInt32 NxSceneQuery_overlapOBBShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapOBBShapes_2")]
        private extern static System.UInt32 NxSceneQuery_overlapOBBShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapOBBShapes_3")]
        private extern static System.UInt32 NxSceneQuery_overlapOBBShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapCapsuleShapes")]
        private extern static System.UInt32 NxSceneQuery_overlapCapsuleShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapCapsuleShapes_1")]
        private extern static System.UInt32 NxSceneQuery_overlapCapsuleShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapCapsuleShapes_2")]
        private extern static System.UInt32 NxSceneQuery_overlapCapsuleShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_overlapCapsuleShapes_3")]
        private extern static System.UInt32 NxSceneQuery_overlapCapsuleShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_cullShapes")]
        private extern static System.UInt32 NxSceneQuery_cullShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbPlanes, HandleRef worldPlanes, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_cullShapes_1")]
        private extern static System.UInt32 NxSceneQuery_cullShapes_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbPlanes, HandleRef worldPlanes, NxShapesType shapesType, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_cullShapes_2")]
        private extern static System.UInt32 NxSceneQuery_cullShapes_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbPlanes, HandleRef worldPlanes, NxShapesType shapesType, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_cullShapes_3")]
        private extern static System.UInt32 NxSceneQuery_cullShapes_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbPlanes, HandleRef worldPlanes, NxShapesType shapesType);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearOBBSweep")]
        private extern static System.UInt32 NxSceneQuery_linearOBBSweep_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearOBBSweep_1")]
        private extern static System.UInt32 NxSceneQuery_linearOBBSweep_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearOBBSweep_2")]
        private extern static System.UInt32 NxSceneQuery_linearOBBSweep_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearOBBSweep_3")]
        private extern static System.UInt32 NxSceneQuery_linearOBBSweep_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox, [In()] ref NxVec3 motion, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearCapsuleSweep")]
        private extern static System.UInt32 NxSceneQuery_linearCapsuleSweep_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups, HandleRef groupsMask, System.IntPtr userData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearCapsuleSweep_1")]
        private extern static System.UInt32 NxSceneQuery_linearCapsuleSweep_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearCapsuleSweep_2")]
        private extern static System.UInt32 NxSceneQuery_linearCapsuleSweep_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, [In()] ref NxVec3 motion, System.UInt32 flags, System.UInt32 activeGroups);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQuery_linearCapsuleSweep_3")]
        private extern static System.UInt32 NxSceneQuery_linearCapsuleSweep_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule, [In()] ref NxVec3 motion, System.UInt32 flags);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSceneQuery")]
        private extern static IntPtr new_NxSceneQuery_INVOKE (bool do_override);

		
		protected NxSceneQuery() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxSceneQuery)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSceneQuery_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSceneQuery_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSceneQuery GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSceneQuery)(obj.Target));
				}
			}
			return new NxSceneQuery(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getQueryReport_0_delegatefield = new getQueryReport_0_delegate(this.getQueryReport_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getQueryReport_0_delegatefield));
			getExecuteMode_1_delegatefield = new getExecuteMode_1_delegate(this.getExecuteMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getExecuteMode_1_delegatefield));
			execute_2_delegatefield = new execute_2_delegate(this.execute_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(execute_2_delegatefield));
			finish_3_delegatefield = new finish_3_delegate(this.finish_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(finish_3_delegatefield));
			raycastAnyShape_4_delegatefield = new raycastAnyShape_4_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_4_delegatefield));
			raycastAnyShape_5_delegatefield = new raycastAnyShape_5_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_5_delegatefield));
			raycastAnyShape_6_delegatefield = new raycastAnyShape_6_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_6_delegatefield));
			raycastAnyShape_7_delegatefield = new raycastAnyShape_7_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_7_delegatefield));
			raycastAnyShape_8_delegatefield = new raycastAnyShape_8_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_8_delegatefield));
			raycastAnyShape_9_delegatefield = new raycastAnyShape_9_delegate(this.raycastAnyShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAnyShape_9_delegatefield));
			checkOverlapSphere_10_delegatefield = new checkOverlapSphere_10_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_10_delegatefield));
			checkOverlapSphere_11_delegatefield = new checkOverlapSphere_11_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_11_delegatefield));
			checkOverlapSphere_12_delegatefield = new checkOverlapSphere_12_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_12_delegatefield));
			checkOverlapSphere_13_delegatefield = new checkOverlapSphere_13_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_13_delegatefield));
			checkOverlapSphere_14_delegatefield = new checkOverlapSphere_14_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_14_delegatefield));
			checkOverlapAABB_15_delegatefield = new checkOverlapAABB_15_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_15_delegatefield));
			checkOverlapAABB_16_delegatefield = new checkOverlapAABB_16_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_16_delegatefield));
			checkOverlapAABB_17_delegatefield = new checkOverlapAABB_17_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_17_delegatefield));
			checkOverlapAABB_18_delegatefield = new checkOverlapAABB_18_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_18_delegatefield));
			checkOverlapAABB_19_delegatefield = new checkOverlapAABB_19_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_19_delegatefield));
			checkOverlapOBB_20_delegatefield = new checkOverlapOBB_20_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_20_delegatefield));
			checkOverlapOBB_21_delegatefield = new checkOverlapOBB_21_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_21_delegatefield));
			checkOverlapOBB_22_delegatefield = new checkOverlapOBB_22_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_22_delegatefield));
			checkOverlapOBB_23_delegatefield = new checkOverlapOBB_23_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_23_delegatefield));
			checkOverlapOBB_24_delegatefield = new checkOverlapOBB_24_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_24_delegatefield));
			checkOverlapCapsule_25_delegatefield = new checkOverlapCapsule_25_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_25_delegatefield));
			checkOverlapCapsule_26_delegatefield = new checkOverlapCapsule_26_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_26_delegatefield));
			checkOverlapCapsule_27_delegatefield = new checkOverlapCapsule_27_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_27_delegatefield));
			checkOverlapCapsule_28_delegatefield = new checkOverlapCapsule_28_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_28_delegatefield));
			checkOverlapCapsule_29_delegatefield = new checkOverlapCapsule_29_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_29_delegatefield));
			raycastClosestShape_30_delegatefield = new raycastClosestShape_30_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_30_delegatefield));
			raycastClosestShape_31_delegatefield = new raycastClosestShape_31_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_31_delegatefield));
			raycastClosestShape_32_delegatefield = new raycastClosestShape_32_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_32_delegatefield));
			raycastClosestShape_33_delegatefield = new raycastClosestShape_33_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_33_delegatefield));
			raycastClosestShape_34_delegatefield = new raycastClosestShape_34_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_34_delegatefield));
			raycastClosestShape_35_delegatefield = new raycastClosestShape_35_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_35_delegatefield));
			raycastClosestShape_36_delegatefield = new raycastClosestShape_36_delegate(this.raycastClosestShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastClosestShape_36_delegatefield));
			raycastAllShapes_37_delegatefield = new raycastAllShapes_37_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_37_delegatefield));
			raycastAllShapes_38_delegatefield = new raycastAllShapes_38_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_38_delegatefield));
			raycastAllShapes_39_delegatefield = new raycastAllShapes_39_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_39_delegatefield));
			raycastAllShapes_40_delegatefield = new raycastAllShapes_40_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_40_delegatefield));
			raycastAllShapes_41_delegatefield = new raycastAllShapes_41_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_41_delegatefield));
			raycastAllShapes_42_delegatefield = new raycastAllShapes_42_delegate(this.raycastAllShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycastAllShapes_42_delegatefield));
			overlapSphereShapes_43_delegatefield = new overlapSphereShapes_43_delegate(this.overlapSphereShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapSphereShapes_43_delegatefield));
			overlapSphereShapes_44_delegatefield = new overlapSphereShapes_44_delegate(this.overlapSphereShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapSphereShapes_44_delegatefield));
			overlapSphereShapes_45_delegatefield = new overlapSphereShapes_45_delegate(this.overlapSphereShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapSphereShapes_45_delegatefield));
			overlapSphereShapes_46_delegatefield = new overlapSphereShapes_46_delegate(this.overlapSphereShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapSphereShapes_46_delegatefield));
			overlapAABBShapes_47_delegatefield = new overlapAABBShapes_47_delegate(this.overlapAABBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBShapes_47_delegatefield));
			overlapAABBShapes_48_delegatefield = new overlapAABBShapes_48_delegate(this.overlapAABBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBShapes_48_delegatefield));
			overlapAABBShapes_49_delegatefield = new overlapAABBShapes_49_delegate(this.overlapAABBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBShapes_49_delegatefield));
			overlapAABBShapes_50_delegatefield = new overlapAABBShapes_50_delegate(this.overlapAABBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBShapes_50_delegatefield));
			overlapOBBShapes_51_delegatefield = new overlapOBBShapes_51_delegate(this.overlapOBBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapOBBShapes_51_delegatefield));
			overlapOBBShapes_52_delegatefield = new overlapOBBShapes_52_delegate(this.overlapOBBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapOBBShapes_52_delegatefield));
			overlapOBBShapes_53_delegatefield = new overlapOBBShapes_53_delegate(this.overlapOBBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapOBBShapes_53_delegatefield));
			overlapOBBShapes_54_delegatefield = new overlapOBBShapes_54_delegate(this.overlapOBBShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapOBBShapes_54_delegatefield));
			overlapCapsuleShapes_55_delegatefield = new overlapCapsuleShapes_55_delegate(this.overlapCapsuleShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapCapsuleShapes_55_delegatefield));
			overlapCapsuleShapes_56_delegatefield = new overlapCapsuleShapes_56_delegate(this.overlapCapsuleShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapCapsuleShapes_56_delegatefield));
			overlapCapsuleShapes_57_delegatefield = new overlapCapsuleShapes_57_delegate(this.overlapCapsuleShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapCapsuleShapes_57_delegatefield));
			overlapCapsuleShapes_58_delegatefield = new overlapCapsuleShapes_58_delegate(this.overlapCapsuleShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapCapsuleShapes_58_delegatefield));
			cullShapes_59_delegatefield = new cullShapes_59_delegate(this.cullShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(cullShapes_59_delegatefield));
			cullShapes_60_delegatefield = new cullShapes_60_delegate(this.cullShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(cullShapes_60_delegatefield));
			cullShapes_61_delegatefield = new cullShapes_61_delegate(this.cullShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(cullShapes_61_delegatefield));
			cullShapes_62_delegatefield = new cullShapes_62_delegate(this.cullShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(cullShapes_62_delegatefield));
			linearOBBSweep_63_delegatefield = new linearOBBSweep_63_delegate(this.linearOBBSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearOBBSweep_63_delegatefield));
			linearOBBSweep_64_delegatefield = new linearOBBSweep_64_delegate(this.linearOBBSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearOBBSweep_64_delegatefield));
			linearOBBSweep_65_delegatefield = new linearOBBSweep_65_delegate(this.linearOBBSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearOBBSweep_65_delegatefield));
			linearOBBSweep_66_delegatefield = new linearOBBSweep_66_delegate(this.linearOBBSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearOBBSweep_66_delegatefield));
			linearCapsuleSweep_67_delegatefield = new linearCapsuleSweep_67_delegate(this.linearCapsuleSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearCapsuleSweep_67_delegatefield));
			linearCapsuleSweep_68_delegatefield = new linearCapsuleSweep_68_delegate(this.linearCapsuleSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearCapsuleSweep_68_delegatefield));
			linearCapsuleSweep_69_delegatefield = new linearCapsuleSweep_69_delegate(this.linearCapsuleSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearCapsuleSweep_69_delegatefield));
			linearCapsuleSweep_70_delegatefield = new linearCapsuleSweep_70_delegate(this.linearCapsuleSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearCapsuleSweep_70_delegatefield));
			return list;
		}
	}
}
