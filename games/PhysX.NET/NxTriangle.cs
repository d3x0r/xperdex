//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxTriangle : DoxyBindObject
	{
		
		internal NxTriangle(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Array of Vertices. </summary>
		public NxVec3[] verts
		{
			get
			{
				NxVec3[] value = new NxVec3[3];
				get_NxTriangle_verts_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxTriangle_verts_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor. </summary>
		public NxTriangle() : 
				base(new_NxTriangle_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor. </summary>
		/// <param name="p0">Point 0 </param>
		/// <param name="p1">Point 1 </param>
		/// <param name="p2">Point 2 </param>
		public NxTriangle(ref NxVec3 p0, ref NxVec3 p1, ref NxVec3 p2) : 
				base(new_NxTriangle_1_INVOKE(false, p0, p1, p2))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Copy constructor. </summary>
		/// <param name="triangle">Tri to copy </param>
		public NxTriangle(NxTriangle triangle) : 
				base(new_NxTriangle_2_INVOKE(false, (triangle!=null ? triangle.ClassPointer : NullRef)))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Compute the center of the NxTriangle. </summary>
		/// <param name="center">Retrieve center (average) point of triangle. </param>
		public void center(ref NxVec3 center)
		{
			NxTriangle_center_INVOKE(ClassPointer, doSetFunctionPointers, ref center);
		}
		
		/// <summary>Compute the normal of the NxTriangle. </summary>
		/// <param name="_normal">Triangle normal. </param>
		public void normal(ref NxVec3 _normal)
		{
			NxTriangle_normal_INVOKE(ClassPointer, doSetFunctionPointers, ref _normal);
		}
		
		/// <summary>Makes a fat triangle. </summary>
		/// <param name="fatCoeff">Amount to inflate triangle by. </param>
		/// <param name="constantBorder">True - Add same width independent of triangle size. False - Add bigger borders to biggers triangles. </param>
		public void inflate(float fatCoeff, bool constantBorder)
		{
			NxTriangle_inflate_INVOKE(ClassPointer, doSetFunctionPointers, fatCoeff, constantBorder);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxTriangle_verts")]
        private extern static void set_NxTriangle_verts_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=3)] NxVec3[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxTriangle_verts")]
        private extern static void get_NxTriangle_verts_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=3)] NxVec3[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxTriangle")]
        private extern static IntPtr new_NxTriangle_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxTriangle_1")]
        private extern static IntPtr new_NxTriangle_1_INVOKE (System.Boolean do_override, NxVec3 p0, NxVec3 p1, NxVec3 p2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxTriangle_2")]
        private extern static IntPtr new_NxTriangle_2_INVOKE (System.Boolean do_override, HandleRef triangle);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangle_center")]
        private extern static void NxTriangle_center_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 center);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangle_normal")]
        private extern static void NxTriangle_normal_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 _normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangle_inflate")]
        private extern static void NxTriangle_inflate_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single fatCoeff, System.Boolean constantBorder);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxTriangle GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxTriangle)(obj.Target));
				}
			}
			return new NxTriangle(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
