//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxForceFieldKernel : DoxyBindObject
	{
		
		internal NxForceFieldKernel(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxForceFieldKernel_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldKernel_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>For internal use only. </summary>
		public virtual void parse()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldKernel_parse_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void parse_virtual()
		{
			parse();
		}
		
		delegate void parse_0_delegate();
		
		
		
		
		
		
		private parse_0_delegate parse_0_delegatefield;
		
		/// <summary>For internal use only. </summary>
		public virtual bool evaluate(ref NxVec3 force, ref NxVec3 torque, ref NxVec3 position, ref NxVec3 velocity)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldKernel_evaluate_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref torque, ref position, ref velocity);
		}
		
		private bool evaluate_virtual([In()] [Out()] ref NxVec3 force, [In()] [Out()] ref NxVec3 torque, [In()] ref NxVec3 position, [In()] ref NxVec3 velocity)
		{
			return evaluate(ref force, ref torque, ref position, ref velocity);
		}
		
		delegate bool evaluate_1_delegate([In()] [Out()] ref NxVec3 force, [In()] [Out()] ref NxVec3 torque, [In()] ref NxVec3 position, [In()] ref NxVec3 velocity);
		
		
		
		
		
		
		private evaluate_1_delegate evaluate_1_delegatefield;
		
		/// <summary>For internal use only. </summary>
		public virtual uint getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldKernel_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getType_virtual()
		{
			return getType();
		}
		
		delegate uint getType_2_delegate();
		
		
		
		
		
		
		private getType_2_delegate getType_2_delegatefield;
		
		/// <summary>For internal use only. </summary>
		public virtual NxForceFieldKernel clone()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldKernel.GetClass(NxForceFieldKernel_clone_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr clone_virtual()
		{
			return clone().ClassPointer.Handle;
		}
		
		delegate IntPtr clone_3_delegate();
		
		
		
		
		
		
		private clone_3_delegate clone_3_delegatefield;
		
		/// <summary>For internal use only. </summary>
		public virtual void update(NxForceFieldKernel @in)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldKernel_update_INVOKE(ClassPointer, doSetFunctionPointers, (@in!=null ? @in.ClassPointer : NullRef));
		}
		
		private void update_virtual(IntPtr @in)
		{
			update(NxForceFieldKernel.GetClass(@in));
		}
		
		delegate void update_4_delegate(IntPtr @in);
		
		
		
		
		
		
		private update_4_delegate update_4_delegatefield;
		
		/// <summary>For internal use only. </summary>
		public virtual void setEpsilon(float eps)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldKernel_setEpsilon_INVOKE(ClassPointer, doSetFunctionPointers, eps);
		}
		
		private void setEpsilon_virtual(float eps)
		{
			setEpsilon(eps);
		}
		
		delegate void setEpsilon_5_delegate(float eps);
		
		
		
		
		
		
		private setEpsilon_5_delegate setEpsilon_5_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldKernel_userData")]
        private extern static void set_NxForceFieldKernel_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldKernel_userData")]
        private extern static System.IntPtr get_NxForceFieldKernel_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_parse")]
        private extern static void NxForceFieldKernel_parse_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_evaluate")]
        private extern static System.Boolean NxForceFieldKernel_evaluate_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 force, [In()] [Out()] ref NxVec3 torque, [In()] ref NxVec3 position, [In()] ref NxVec3 velocity);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_getType")]
        private extern static System.UInt32 NxForceFieldKernel_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_clone")]
        private extern static IntPtr NxForceFieldKernel_clone_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_update")]
        private extern static void NxForceFieldKernel_update_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef @in);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldKernel_setEpsilon")]
        private extern static void NxForceFieldKernel_setEpsilon_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single eps);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxForceFieldKernel")]
        private extern static IntPtr new_NxForceFieldKernel_INVOKE (bool do_override);

		
		protected NxForceFieldKernel() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxForceFieldKernel)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxForceFieldKernel_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxForceFieldKernel_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxForceFieldKernel GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxForceFieldKernel)(obj.Target));
				}
			}
			return new NxForceFieldKernel(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			parse_0_delegatefield = new parse_0_delegate(this.parse_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(parse_0_delegatefield));
			evaluate_1_delegatefield = new evaluate_1_delegate(this.evaluate_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(evaluate_1_delegatefield));
			getType_2_delegatefield = new getType_2_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_2_delegatefield));
			clone_3_delegatefield = new clone_3_delegate(this.clone_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(clone_3_delegatefield));
			update_4_delegatefield = new update_4_delegate(this.update_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(update_4_delegatefield));
			setEpsilon_5_delegatefield = new setEpsilon_5_delegate(this.setEpsilon_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setEpsilon_5_delegatefield));
			return list;
		}
	}
}
