//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSegment : DoxyBindObject
	{
		
		internal NxSegment(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Start of segment. </summary>
		public NxVec3 p0
		{
			get
			{
				NxVec3 value = get_NxSegment_p0_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSegment_p0_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>End of segment. </summary>
		public NxVec3 p1
		{
			get
			{
				NxVec3 value = get_NxSegment_p1_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSegment_p1_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor. </summary>
		public NxSegment() : 
				base(new_NxSegment_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor. </summary>
		public NxSegment(ref NxVec3 _p0, ref NxVec3 _p1) : 
				base(new_NxSegment_1_INVOKE(false, _p0, _p1))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Copy constructor. </summary>
		public NxSegment(NxSegment seg) : 
				base(new_NxSegment_2_INVOKE(false, (seg!=null ? seg.ClassPointer : NullRef)))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public NxVec3[] getOrigin()
		{
			return NxSegment_getOrigin_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public NxVec3 computeDirection()
		{
			return NxSegment_computeDirection_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void computeDirection(ref NxVec3 dir)
		{
			NxSegment_computeDirection_1_INVOKE(ClassPointer, doSetFunctionPointers, ref dir);
		}
		
		/// <summary></summary>
		public float computeLength()
		{
			return NxSegment_computeLength_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public float computeSquareLength()
		{
			return NxSegment_computeSquareLength_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void setOriginDirection(ref NxVec3 origin, ref NxVec3 direction)
		{
			NxSegment_setOriginDirection_INVOKE(ClassPointer, doSetFunctionPointers, ref origin, ref direction);
		}
		
		/// <summary>Computes a point on the segment. </summary>
		/// <param name="pt">point on segment </param>
		/// <param name="t">point's parameter [t=0 => pt = mP0, t=1 => pt = mP1] </param>
		public void computePoint(ref NxVec3 pt, float t)
		{
			NxSegment_computePoint_INVOKE(ClassPointer, doSetFunctionPointers, ref pt, t);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSegment_p0")]
        private extern static void set_NxSegment_p0_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSegment_p0")]
        private extern static NxVec3 get_NxSegment_p0_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSegment_p1")]
        private extern static void set_NxSegment_p1_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSegment_p1")]
        private extern static NxVec3 get_NxSegment_p1_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSegment")]
        private extern static IntPtr new_NxSegment_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSegment_1")]
        private extern static IntPtr new_NxSegment_1_INVOKE (System.Boolean do_override, NxVec3 _p0, NxVec3 _p1);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSegment_2")]
        private extern static IntPtr new_NxSegment_2_INVOKE (System.Boolean do_override, HandleRef seg);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_getOrigin")]
        private extern static NxVec3[] NxSegment_getOrigin_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_computeDirection")]
        private extern static NxVec3 NxSegment_computeDirection_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_computeDirection_1")]
        private extern static void NxSegment_computeDirection_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 dir);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_computeLength")]
        private extern static System.Single NxSegment_computeLength_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_computeSquareLength")]
        private extern static System.Single NxSegment_computeSquareLength_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_setOriginDirection")]
        private extern static void NxSegment_setOriginDirection_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 origin, [In()] ref NxVec3 direction);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSegment_computePoint")]
        private extern static void NxSegment_computePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 pt, System.Single t);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSegment GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSegment)(obj.Target));
				}
			}
			return new NxSegment(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
