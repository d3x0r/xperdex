//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxExtendedMat34 : DoxyBindObject
	{
		
		internal NxExtendedMat34(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public NxMat33 M
		{
			get
			{
				NxMat33 value = get_NxExtendedMat34_M_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedMat34_M_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxExtendedVec3 t
		{
			get
			{
				NxExtendedVec3 value = get_NxExtendedMat34_t_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedMat34_t_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxExtendedMat34() : 
				base(new_NxExtendedMat34_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public NxExtendedMat34(ref NxMat33 M_, ref NxExtendedVec3 t_) : 
				base(new_NxExtendedMat34_1_INVOKE(false, M_, t_))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public NxExtendedMat34(bool init) : 
				base(new_NxExtendedMat34_2_INVOKE(false, init))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public bool isFinite()
		{
			return NxExtendedMat34_isFinite_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void multiply(ref NxVec3 src, ref NxExtendedVec3 dst)
		{
			NxExtendedMat34_multiply_INVOKE(ClassPointer, doSetFunctionPointers, ref src, ref dst);
		}
		
		/// <summary></summary>
		public void multiply(ref NxExtendedVec3 src, ref NxExtendedVec3 dst)
		{
			NxExtendedMat34_multiply_1_INVOKE(ClassPointer, doSetFunctionPointers, ref src, ref dst);
		}
		
		/// <summary></summary>
		public void multiply(NxExtendedMat34 left, NxExtendedMat34 right)
		{
			NxExtendedMat34_multiply_2_INVOKE(ClassPointer, doSetFunctionPointers, (left!=null ? left.ClassPointer : NullRef), (right!=null ? right.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public void multiply(NxExtendedMat34 left, ref NxMat34 right)
		{
			NxExtendedMat34_multiply_3_INVOKE(ClassPointer, doSetFunctionPointers, (left!=null ? left.ClassPointer : NullRef), ref right);
		}
		
		/// <summary></summary>
		public void multiplyByInverseRT(ref NxExtendedVec3 src, ref NxVec3 dst)
		{
			NxExtendedMat34_multiplyByInverseRT_INVOKE(ClassPointer, doSetFunctionPointers, ref src, ref dst);
		}
		
		/// <summary></summary>
		public void multiplyByInverseRT(ref NxExtendedVec3 src, ref NxExtendedVec3 dst)
		{
			NxExtendedMat34_multiplyByInverseRT_1_INVOKE(ClassPointer, doSetFunctionPointers, ref src, ref dst);
		}
		
		/// <summary></summary>
		public void multiplyInverseRTRight(NxExtendedMat34 left, ref NxMat34 right)
		{
			NxExtendedMat34_multiplyInverseRTRight_INVOKE(ClassPointer, doSetFunctionPointers, (left!=null ? left.ClassPointer : NullRef), ref right);
		}
		
		/// <summary></summary>
		public void multiplyInverseRTLeft(NxExtendedMat34 left, NxExtendedMat34 right)
		{
			NxExtendedMat34_multiplyInverseRTLeft_INVOKE(ClassPointer, doSetFunctionPointers, (left!=null ? left.ClassPointer : NullRef), (right!=null ? right.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public void id()
		{
			NxExtendedMat34_id_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedMat34_M")]
        private extern static void set_NxExtendedMat34_M_INVOKE (HandleRef classPointer, NxMat33 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedMat34_M")]
        private extern static NxMat33 get_NxExtendedMat34_M_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedMat34_t")]
        private extern static void set_NxExtendedMat34_t_INVOKE (HandleRef classPointer, NxExtendedVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedMat34_t")]
        private extern static NxExtendedVec3 get_NxExtendedMat34_t_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxExtendedMat34")]
        private extern static IntPtr new_NxExtendedMat34_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxExtendedMat34_1")]
        private extern static IntPtr new_NxExtendedMat34_1_INVOKE (System.Boolean do_override, NxMat33 M_, NxExtendedVec3 t_);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxExtendedMat34_2")]
        private extern static IntPtr new_NxExtendedMat34_2_INVOKE (System.Boolean do_override, System.Boolean init);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_isFinite")]
        private extern static System.Boolean NxExtendedMat34_isFinite_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiply")]
        private extern static void NxExtendedMat34_multiply_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 src, [In()] [Out()] ref NxExtendedVec3 dst);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiply_1")]
        private extern static void NxExtendedMat34_multiply_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxExtendedVec3 src, [In()] [Out()] ref NxExtendedVec3 dst);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiply_2")]
        private extern static void NxExtendedMat34_multiply_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef left, HandleRef right);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiply_3")]
        private extern static void NxExtendedMat34_multiply_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef left, [In()] ref NxMat34 right);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiplyByInverseRT")]
        private extern static void NxExtendedMat34_multiplyByInverseRT_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxExtendedVec3 src, [In()] [Out()] ref NxVec3 dst);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiplyByInverseRT_1")]
        private extern static void NxExtendedMat34_multiplyByInverseRT_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxExtendedVec3 src, [In()] [Out()] ref NxExtendedVec3 dst);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiplyInverseRTRight")]
        private extern static void NxExtendedMat34_multiplyInverseRTRight_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef left, [In()] ref NxMat34 right);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_multiplyInverseRTLeft")]
        private extern static void NxExtendedMat34_multiplyInverseRTLeft_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef left, HandleRef right);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedMat34_id")]
        private extern static void NxExtendedMat34_id_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxExtendedMat34 GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxExtendedMat34)(obj.Target));
				}
			}
			return new NxExtendedMat34(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
