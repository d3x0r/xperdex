//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUtilLib : DoxyBindObject
	{
		
		internal NxUtilLib(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Test if an oriented box contains a point. </summary>
		/// <param name="box">Oriented Box to test point against. </param>
		/// <param name="p">Point to test.</param>
		public virtual bool NxBoxContainsPoint(NxBox box, ref NxVec3 p)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxBoxContainsPoint_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), ref p);
		}
		
		private bool NxBoxContainsPoint_virtual(IntPtr box, [In()] ref NxVec3 p)
		{
			return NxBoxContainsPoint(NxBox.GetClass(box), ref p);
		}
		
		delegate bool NxBoxContainsPoint_0_delegate(IntPtr box, [In()] ref NxVec3 p);
		
		
		
		
		
		
		private NxBoxContainsPoint_0_delegate NxBoxContainsPoint_0_delegatefield;
		
		/// <summary>Create an oriented box from an axis aligned box and a transformation. </summary>
		/// <param name="box">Used to store the oriented box. </param>
		/// <param name="aabb">Axis aligned box. </param>
		/// <param name="mat">Transformation to apply to the axis aligned box.</param>
		public virtual void NxCreateBox(NxBox box, NxBounds3 aabb, ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxCreateBox_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), (aabb!=null ? aabb.ClassPointer : NullRef), ref mat);
		}
		
		private void NxCreateBox_virtual(IntPtr box, IntPtr aabb, [In()] ref NxMat34 mat)
		{
			NxCreateBox(NxBox.GetClass(box), NxBounds3.GetClass(aabb), ref mat);
		}
		
		delegate void NxCreateBox_1_delegate(IntPtr box, IntPtr aabb, [In()] ref NxMat34 mat);
		
		
		
		
		
		
		private NxCreateBox_1_delegate NxCreateBox_1_delegatefield;
		
		/// <summary>Computes plane equation for each face of an oriented box. </summary>
		/// <param name="box">The oriented box. </param>
		/// <param name="planes">Array to receive the computed planes (should be large enough to hold 6 planes)</param>
		public virtual bool NxComputeBoxPlanes(NxBox box, NxPlane planes)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeBoxPlanes_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), (planes!=null ? planes.ClassPointer : NullRef));
		}
		
		private bool NxComputeBoxPlanes_virtual(IntPtr box, IntPtr planes)
		{
			return NxComputeBoxPlanes(NxBox.GetClass(box), NxPlane.GetClass(planes));
		}
		
		delegate bool NxComputeBoxPlanes_2_delegate(IntPtr box, IntPtr planes);
		
		
		
		
		
		
		private NxComputeBoxPlanes_2_delegate NxComputeBoxPlanes_2_delegatefield;
		
		/// <summary>Compute the corner points of an oriented box. </summary>
		/// <param name="box">The oriented box. </param>
		/// <param name="pts">Array to receive the box point (should be large enough to hold 8 points)</param>
		public virtual bool NxComputeBoxPoints(NxBox box, NxVec3[] pts)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeBoxPoints_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), pts);
		}
		
		private bool NxComputeBoxPoints_virtual(IntPtr box, NxVec3[] pts)
		{
			return NxComputeBoxPoints(NxBox.GetClass(box), pts);
		}
		
		delegate bool NxComputeBoxPoints_3_delegate(IntPtr box, NxVec3[] pts);
		
		
		
		
		
		
		private NxComputeBoxPoints_3_delegate NxComputeBoxPoints_3_delegatefield;
		
		/// <summary>Compute the vertex normals of an oriented box. These are smooth normals, i.e. averaged from the faces of the box. </summary>
		/// <param name="box">The oriented box. </param>
		/// <param name="pts">The normals for each vertex(should be large enough to hold 8 normals).</param>
		public virtual bool NxComputeBoxVertexNormals(NxBox box, NxVec3[] pts)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeBoxVertexNormals_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), pts);
		}
		
		private bool NxComputeBoxVertexNormals_virtual(IntPtr box, NxVec3[] pts)
		{
			return NxComputeBoxVertexNormals(NxBox.GetClass(box), pts);
		}
		
		delegate bool NxComputeBoxVertexNormals_4_delegate(IntPtr box, NxVec3[] pts);
		
		
		
		
		
		
		private NxComputeBoxVertexNormals_4_delegate NxComputeBoxVertexNormals_4_delegatefield;
		
		/// <summary>Return a list of edge indices. </summary>
		public virtual uint[] NxGetBoxEdges()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxGetBoxEdges_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint[] NxGetBoxEdges_virtual()
		{
			return NxGetBoxEdges();
		}
		
		delegate uint[] NxGetBoxEdges_5_delegate();
		
		
		
		
		
		
		private NxGetBoxEdges_5_delegate NxGetBoxEdges_5_delegatefield;
		
		/// <summary>Return a list of box edge axes. </summary>
		public virtual int[] NxGetBoxEdgesAxes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxGetBoxEdgesAxes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private int[] NxGetBoxEdgesAxes_virtual()
		{
			return NxGetBoxEdgesAxes();
		}
		
		delegate int[] NxGetBoxEdgesAxes_6_delegate();
		
		
		
		
		
		
		private NxGetBoxEdgesAxes_6_delegate NxGetBoxEdgesAxes_6_delegatefield;
		
		/// <summary>Return a set of triangle indices suitable for use with NxComputeBoxPoints. </summary>
		public virtual uint[] NxGetBoxTriangles()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxGetBoxTriangles_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint[] NxGetBoxTriangles_virtual()
		{
			return NxGetBoxTriangles();
		}
		
		delegate uint[] NxGetBoxTriangles_7_delegate();
		
		
		
		
		
		
		private NxGetBoxTriangles_7_delegate NxGetBoxTriangles_7_delegatefield;
		
		/// <summary>Returns a list of local space edge normals. </summary>
		public virtual NxVec3[] NxGetBoxLocalEdgeNormals()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxGetBoxLocalEdgeNormals_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3[] NxGetBoxLocalEdgeNormals_virtual()
		{
			return NxGetBoxLocalEdgeNormals();
		}
		
		delegate NxVec3[] NxGetBoxLocalEdgeNormals_8_delegate();
		
		
		
		
		
		
		private NxGetBoxLocalEdgeNormals_8_delegate NxGetBoxLocalEdgeNormals_8_delegatefield;
		
		/// <summary>Compute and edge normals for an oriented box. </summary>
		/// <param name="box">The oriented box. </param>
		/// <param name="edge_index">The index of the edge to compute a normal for. </param>
		/// <param name="world_normal">The computed normal.</param>
		public virtual void NxComputeBoxWorldEdgeNormal(NxBox box, uint edge_index, ref NxVec3 world_normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeBoxWorldEdgeNormal_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), edge_index, ref world_normal);
		}
		
		private void NxComputeBoxWorldEdgeNormal_virtual(IntPtr box, uint edge_index, [In()] [Out()] ref NxVec3 world_normal)
		{
			NxComputeBoxWorldEdgeNormal(NxBox.GetClass(box), edge_index, ref world_normal);
		}
		
		delegate void NxComputeBoxWorldEdgeNormal_9_delegate(IntPtr box, uint edge_index, [In()] [Out()] ref NxVec3 world_normal);
		
		
		
		
		
		
		private NxComputeBoxWorldEdgeNormal_9_delegate NxComputeBoxWorldEdgeNormal_9_delegatefield;
		
		/// <summary>Compute a capsule which encloses a box. </summary>
		/// <param name="box">Box to generate capsule for. </param>
		/// <param name="capsule">Stores the capsule which is generated.</param>
		public virtual void NxComputeCapsuleAroundBox(NxBox box, NxCapsule capsule)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeCapsuleAroundBox_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), (capsule!=null ? capsule.ClassPointer : NullRef));
		}
		
		private void NxComputeCapsuleAroundBox_virtual(IntPtr box, IntPtr capsule)
		{
			NxComputeCapsuleAroundBox(NxBox.GetClass(box), NxCapsule.GetClass(capsule));
		}
		
		delegate void NxComputeCapsuleAroundBox_10_delegate(IntPtr box, IntPtr capsule);
		
		
		
		
		
		
		private NxComputeCapsuleAroundBox_10_delegate NxComputeCapsuleAroundBox_10_delegatefield;
		
		/// <summary>Test if box A is inside another box B. </summary>
		/// <param name="a">Box A </param>
		/// <param name="b">Box B</param>
		public virtual bool NxIsBoxAInsideBoxB(NxBox a, NxBox b)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxIsBoxAInsideBoxB_INVOKE(ClassPointer, doSetFunctionPointers, (a!=null ? a.ClassPointer : NullRef), (b!=null ? b.ClassPointer : NullRef));
		}
		
		private bool NxIsBoxAInsideBoxB_virtual(IntPtr a, IntPtr b)
		{
			return NxIsBoxAInsideBoxB(NxBox.GetClass(a), NxBox.GetClass(b));
		}
		
		delegate bool NxIsBoxAInsideBoxB_11_delegate(IntPtr a, IntPtr b);
		
		
		
		
		
		
		private NxIsBoxAInsideBoxB_11_delegate NxIsBoxAInsideBoxB_11_delegatefield;
		
		/// <summary>Get a list of indices representing the box as quads. </summary>
		public virtual uint[] NxGetBoxQuads()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxGetBoxQuads_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint[] NxGetBoxQuads_virtual()
		{
			return NxGetBoxQuads();
		}
		
		delegate uint[] NxGetBoxQuads_12_delegate();
		
		
		
		
		
		
		private NxGetBoxQuads_12_delegate NxGetBoxQuads_12_delegatefield;
		
		/// <summary>Returns a list of quad indices sharing the vertex index. </summary>
		/// <param name="vertexIndex">Vertex Index. </param>
		public virtual uint[] NxBoxVertexToQuad(uint vertexIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxBoxVertexToQuad_INVOKE(ClassPointer, doSetFunctionPointers, vertexIndex);
		}
		
		private uint[] NxBoxVertexToQuad_virtual(uint vertexIndex)
		{
			return NxBoxVertexToQuad(vertexIndex);
		}
		
		delegate uint[] NxBoxVertexToQuad_13_delegate(uint vertexIndex);
		
		
		
		
		
		
		private NxBoxVertexToQuad_13_delegate NxBoxVertexToQuad_13_delegatefield;
		
		/// <summary>Compute a box which encloses a capsule. </summary>
		/// <param name="capsule">Capsule to generate an enclosing box for. </param>
		/// <param name="box">Generated box.</param>
		public virtual void NxComputeBoxAroundCapsule(NxCapsule capsule, NxBox box)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeBoxAroundCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (capsule!=null ? capsule.ClassPointer : NullRef), (box!=null ? box.ClassPointer : NullRef));
		}
		
		private void NxComputeBoxAroundCapsule_virtual(IntPtr capsule, IntPtr box)
		{
			NxComputeBoxAroundCapsule(NxCapsule.GetClass(capsule), NxBox.GetClass(box));
		}
		
		delegate void NxComputeBoxAroundCapsule_14_delegate(IntPtr capsule, IntPtr box);
		
		
		
		
		
		
		private NxComputeBoxAroundCapsule_14_delegate NxComputeBoxAroundCapsule_14_delegatefield;
		
		/// <summary>Set FPU precision. </summary>
		public virtual void NxSetFPUPrecision24()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPUPrecision24_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPUPrecision24_virtual()
		{
			NxSetFPUPrecision24();
		}
		
		delegate void NxSetFPUPrecision24_15_delegate();
		
		
		
		
		
		
		private NxSetFPUPrecision24_15_delegate NxSetFPUPrecision24_15_delegatefield;
		
		/// <summary>Set FPU precision. </summary>
		public virtual void NxSetFPUPrecision53()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPUPrecision53_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPUPrecision53_virtual()
		{
			NxSetFPUPrecision53();
		}
		
		delegate void NxSetFPUPrecision53_16_delegate();
		
		
		
		
		
		
		private NxSetFPUPrecision53_16_delegate NxSetFPUPrecision53_16_delegatefield;
		
		/// <summary>Set FPU precision. </summary>
		public virtual void NxSetFPUPrecision64()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPUPrecision64_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPUPrecision64_virtual()
		{
			NxSetFPUPrecision64();
		}
		
		delegate void NxSetFPUPrecision64_17_delegate();
		
		
		
		
		
		
		private NxSetFPUPrecision64_17_delegate NxSetFPUPrecision64_17_delegatefield;
		
		/// <summary>Set FPU precision. </summary>
		public virtual void NxSetFPURoundingChop()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPURoundingChop_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPURoundingChop_virtual()
		{
			NxSetFPURoundingChop();
		}
		
		delegate void NxSetFPURoundingChop_18_delegate();
		
		
		
		
		
		
		private NxSetFPURoundingChop_18_delegate NxSetFPURoundingChop_18_delegatefield;
		
		/// <summary>Set FPU rounding mode. </summary>
		public virtual void NxSetFPURoundingUp()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPURoundingUp_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPURoundingUp_virtual()
		{
			NxSetFPURoundingUp();
		}
		
		delegate void NxSetFPURoundingUp_19_delegate();
		
		
		
		
		
		
		private NxSetFPURoundingUp_19_delegate NxSetFPURoundingUp_19_delegatefield;
		
		/// <summary>Set FPU rounding mode. </summary>
		public virtual void NxSetFPURoundingDown()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPURoundingDown_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPURoundingDown_virtual()
		{
			NxSetFPURoundingDown();
		}
		
		delegate void NxSetFPURoundingDown_20_delegate();
		
		
		
		
		
		
		private NxSetFPURoundingDown_20_delegate NxSetFPURoundingDown_20_delegatefield;
		
		/// <summary>Set FPU rounding mode. </summary>
		public virtual void NxSetFPURoundingNear()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPURoundingNear_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxSetFPURoundingNear_virtual()
		{
			NxSetFPURoundingNear();
		}
		
		delegate void NxSetFPURoundingNear_21_delegate();
		
		
		
		
		
		
		private NxSetFPURoundingNear_21_delegate NxSetFPURoundingNear_21_delegatefield;
		
		/// <summary>Enable/Disable FPU exception. </summary>
		/// <param name="b">True to enable exception.</param>
		public virtual void NxSetFPUExceptions(bool b)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSetFPUExceptions_INVOKE(ClassPointer, doSetFunctionPointers, b);
		}
		
		private void NxSetFPUExceptions_virtual(bool b)
		{
			NxSetFPUExceptions(b);
		}
		
		delegate void NxSetFPUExceptions_22_delegate(bool b);
		
		
		
		
		
		
		private NxSetFPUExceptions_22_delegate NxSetFPUExceptions_22_delegatefield;
		
		/// <summary>Convert a floating point number to an integer. </summary>
		/// <param name="f">Floating point number.</param>
		public virtual int NxIntChop(ref float f)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxIntChop_INVOKE(ClassPointer, doSetFunctionPointers, ref f);
		}
		
		private int NxIntChop_virtual([In()] ref float f)
		{
			return NxIntChop(ref f);
		}
		
		delegate int NxIntChop_23_delegate([In()] ref float f);
		
		
		
		
		
		
		private NxIntChop_23_delegate NxIntChop_23_delegatefield;
		
		/// <summary>Convert a floating point number to an integer. </summary>
		/// <param name="f">Floating point number.</param>
		public virtual int NxIntFloor(ref float f)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxIntFloor_INVOKE(ClassPointer, doSetFunctionPointers, ref f);
		}
		
		private int NxIntFloor_virtual([In()] ref float f)
		{
			return NxIntFloor(ref f);
		}
		
		delegate int NxIntFloor_24_delegate([In()] ref float f);
		
		
		
		
		
		
		private NxIntFloor_24_delegate NxIntFloor_24_delegatefield;
		
		/// <summary>Convert a floating point number to an integer. </summary>
		/// <param name="f">Floating point number.</param>
		public virtual int NxIntCeil(ref float f)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxIntCeil_INVOKE(ClassPointer, doSetFunctionPointers, ref f);
		}
		
		private int NxIntCeil_virtual([In()] ref float f)
		{
			return NxIntCeil(ref f);
		}
		
		delegate int NxIntCeil_25_delegate([In()] ref float f);
		
		
		
		
		
		
		private NxIntCeil_25_delegate NxIntCeil_25_delegatefield;
		
		/// <summary>Compute the distance squared from a point to a ray. </summary>
		/// <param name="ray">The ray. </param>
		/// <param name="point">The point. </param>
		/// <param name="t">Used to retrieve the closest parameter value on the ray.</param>
		public virtual float NxComputeDistanceSquared(NxRay ray, ref NxVec3 point, float[] t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeDistanceSquared_INVOKE(ClassPointer, doSetFunctionPointers, (ray!=null ? ray.ClassPointer : NullRef), ref point, t);
		}
		
		private float NxComputeDistanceSquared_virtual(IntPtr ray, [In()] ref NxVec3 point, float[] t)
		{
			return NxComputeDistanceSquared(NxRay.GetClass(ray), ref point, t);
		}
		
		delegate float NxComputeDistanceSquared_26_delegate(IntPtr ray, [In()] ref NxVec3 point, float[] t);
		
		
		
		
		
		
		private NxComputeDistanceSquared_26_delegate NxComputeDistanceSquared_26_delegatefield;
		
		/// <summary>Compute the distance squared from a point to a line segment. </summary>
		/// <param name="seg">The line segment. </param>
		/// <param name="point">The point. </param>
		/// <param name="t">Used to retrieve the closest parameter value on the line segment.</param>
		public virtual float NxComputeSquareDistance(NxSegment seg, ref NxVec3 point, float[] t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeSquareDistance_INVOKE(ClassPointer, doSetFunctionPointers, (seg!=null ? seg.ClassPointer : NullRef), ref point, t);
		}
		
		private float NxComputeSquareDistance_virtual(IntPtr seg, [In()] ref NxVec3 point, float[] t)
		{
			return NxComputeSquareDistance(NxSegment.GetClass(seg), ref point, t);
		}
		
		delegate float NxComputeSquareDistance_27_delegate(IntPtr seg, [In()] ref NxVec3 point, float[] t);
		
		
		
		
		
		
		private NxComputeSquareDistance_27_delegate NxComputeSquareDistance_27_delegatefield;
		
		/// <summary>Compute a bounding sphere for a point cloud. </summary>
		/// <param name="sphere">The computed sphere. </param>
		/// <param name="nb_verts">Number of points. </param>
		/// <param name="verts">Array of points.</param>
		public virtual NxBSphereMethod NxComputeSphere(NxSphere sphere, uint nb_verts, NxVec3[] verts)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeSphere_INVOKE(ClassPointer, doSetFunctionPointers, (sphere!=null ? sphere.ClassPointer : NullRef), nb_verts, verts);
		}
		
		private NxBSphereMethod NxComputeSphere_virtual(IntPtr sphere, uint nb_verts, NxVec3[] verts)
		{
			return NxComputeSphere(NxSphere.GetClass(sphere), nb_verts, verts);
		}
		
		delegate NxBSphereMethod NxComputeSphere_28_delegate(IntPtr sphere, uint nb_verts, NxVec3[] verts);
		
		
		
		
		
		
		private NxComputeSphere_28_delegate NxComputeSphere_28_delegatefield;
		
		/// <summary>Compute a bounding sphere for a point cloud. </summary>
		/// <param name="sphere">The computed sphere. </param>
		/// <param name="nb_verts">Number of points. </param>
		/// <param name="verts">Array of points.</param>
		public virtual bool NxFastComputeSphere(NxSphere sphere, uint nb_verts, NxVec3[] verts)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxFastComputeSphere_INVOKE(ClassPointer, doSetFunctionPointers, (sphere!=null ? sphere.ClassPointer : NullRef), nb_verts, verts);
		}
		
		private bool NxFastComputeSphere_virtual(IntPtr sphere, uint nb_verts, NxVec3[] verts)
		{
			return NxFastComputeSphere(NxSphere.GetClass(sphere), nb_verts, verts);
		}
		
		delegate bool NxFastComputeSphere_29_delegate(IntPtr sphere, uint nb_verts, NxVec3[] verts);
		
		
		
		
		
		
		private NxFastComputeSphere_29_delegate NxFastComputeSphere_29_delegatefield;
		
		/// <summary>Compute an overall bounding sphere for a pair of spheres. </summary>
		/// <param name="merged">The computed sphere. </param>
		/// <param name="sphere0">First sphere. </param>
		/// <param name="sphere1">Second sphere.</param>
		public virtual void NxMergeSpheres(NxSphere merged, NxSphere sphere0, NxSphere sphere1)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxMergeSpheres_INVOKE(ClassPointer, doSetFunctionPointers, (merged!=null ? merged.ClassPointer : NullRef), (sphere0!=null ? sphere0.ClassPointer : NullRef), (sphere1!=null ? sphere1.ClassPointer : NullRef));
		}
		
		private void NxMergeSpheres_virtual(IntPtr merged, IntPtr sphere0, IntPtr sphere1)
		{
			NxMergeSpheres(NxSphere.GetClass(merged), NxSphere.GetClass(sphere0), NxSphere.GetClass(sphere1));
		}
		
		delegate void NxMergeSpheres_30_delegate(IntPtr merged, IntPtr sphere0, IntPtr sphere1);
		
		
		
		
		
		
		private NxMergeSpheres_30_delegate NxMergeSpheres_30_delegatefield;
		
		/// <summary>Get the tangent vectors associated with a normal. </summary>
		/// <param name="n">Normal vector </param>
		/// <param name="t1">First tangent </param>
		/// <param name="t2">Second tangent</param>
		public virtual void NxNormalToTangents(ref NxVec3 n, ref NxVec3 t1, ref NxVec3 t2)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxNormalToTangents_INVOKE(ClassPointer, doSetFunctionPointers, ref n, ref t1, ref t2);
		}
		
		private void NxNormalToTangents_virtual([In()] ref NxVec3 n, [In()] [Out()] ref NxVec3 t1, [In()] [Out()] ref NxVec3 t2)
		{
			NxNormalToTangents(ref n, ref t1, ref t2);
		}
		
		delegate void NxNormalToTangents_31_delegate([In()] ref NxVec3 n, [In()] [Out()] ref NxVec3 t1, [In()] [Out()] ref NxVec3 t2);
		
		
		
		
		
		
		private NxNormalToTangents_31_delegate NxNormalToTangents_31_delegatefield;
		
		/// <summary>Rotates a 3x3 symmetric inertia tensor I into a space R where it can be represented with the diagonal matrix D. </summary>
		/// <param name="denseInertia">The dense inertia tensor. </param>
		/// <param name="diagonalInertia">The diagonalized inertia tensor. </param>
		/// <param name="rotation">Rotation for the frame of the diagonalized inertia tensor.</param>
		public virtual bool NxDiagonalizeInertiaTensor(ref NxMat33 denseInertia, ref NxVec3 diagonalInertia, ref NxMat33 rotation)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxDiagonalizeInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers, ref denseInertia, ref diagonalInertia, ref rotation);
		}
		
		private bool NxDiagonalizeInertiaTensor_virtual([In()] ref NxMat33 denseInertia, [In()] [Out()] ref NxVec3 diagonalInertia, [In()] [Out()] ref NxMat33 rotation)
		{
			return NxDiagonalizeInertiaTensor(ref denseInertia, ref diagonalInertia, ref rotation);
		}
		
		delegate bool NxDiagonalizeInertiaTensor_32_delegate([In()] ref NxMat33 denseInertia, [In()] [Out()] ref NxVec3 diagonalInertia, [In()] [Out()] ref NxMat33 rotation);
		
		
		
		
		
		
		private NxDiagonalizeInertiaTensor_32_delegate NxDiagonalizeInertiaTensor_32_delegatefield;
		
		/// <summary>Computes a rotation matrix. </summary>
		/// <param name="x">Vector. </param>
		/// <param name="b">Vector. </param>
		/// <param name="M">Computed rotation matrix.</param>
		public virtual void NxFindRotationMatrix(ref NxVec3 x, ref NxVec3 b, ref NxMat33 M)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxFindRotationMatrix_INVOKE(ClassPointer, doSetFunctionPointers, ref x, ref b, ref M);
		}
		
		private void NxFindRotationMatrix_virtual([In()] ref NxVec3 x, [In()] ref NxVec3 b, [In()] [Out()] ref NxMat33 M)
		{
			NxFindRotationMatrix(ref x, ref b, ref M);
		}
		
		delegate void NxFindRotationMatrix_33_delegate([In()] ref NxVec3 x, [In()] ref NxVec3 b, [In()] [Out()] ref NxMat33 M);
		
		
		
		
		
		
		private NxFindRotationMatrix_33_delegate NxFindRotationMatrix_33_delegatefield;
		
		/// <summary>Computes bounds of an array of vertices. </summary>
		/// <param name="min">Computed minimum of the bounds. </param>
		/// <param name="max">Maximum </param>
		/// <param name="nbVerts">Number of input vertices. </param>
		/// <param name="verts">Array of vertices.</param>
		public virtual void NxComputeBounds(ref NxVec3 min, ref NxVec3 max, uint nbVerts, NxVec3[] verts)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeBounds_INVOKE(ClassPointer, doSetFunctionPointers, ref min, ref max, nbVerts, verts);
		}
		
		private void NxComputeBounds_virtual([In()] [Out()] ref NxVec3 min, [In()] [Out()] ref NxVec3 max, uint nbVerts, NxVec3[] verts)
		{
			NxComputeBounds(ref min, ref max, nbVerts, verts);
		}
		
		delegate void NxComputeBounds_34_delegate([In()] [Out()] ref NxVec3 min, [In()] [Out()] ref NxVec3 max, uint nbVerts, NxVec3[] verts);
		
		
		
		
		
		
		private NxComputeBounds_34_delegate NxComputeBounds_34_delegatefield;
		
		/// <summary>Computes CRC of input buffer. </summary>
		/// <param name="buffer">Input buffer. </param>
		/// <param name="nbBytes">Number of bytes in in the input buffer. </param>
		public virtual uint NxCrc32(System.IntPtr buffer, uint nbBytes)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxCrc32_INVOKE(ClassPointer, doSetFunctionPointers, buffer, nbBytes);
		}
		
		private uint NxCrc32_virtual(System.IntPtr buffer, uint nbBytes)
		{
			return NxCrc32(buffer, nbBytes);
		}
		
		delegate uint NxCrc32_35_delegate(System.IntPtr buffer, uint nbBytes);
		
		
		
		
		
		
		private NxCrc32_35_delegate NxCrc32_35_delegatefield;
		
		/// <summary>Computes mass of a homogeneous sphere according to sphere density. </summary>
		/// <param name="radius">Radius of the sphere. Range: (0,inf) </param>
		/// <param name="density">Density of the sphere. Range: (0,inf)</param>
		public virtual float NxComputeSphereMass(float radius, float density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeSphereMass_INVOKE(ClassPointer, doSetFunctionPointers, radius, density);
		}
		
		private float NxComputeSphereMass_virtual(float radius, float density)
		{
			return NxComputeSphereMass(radius, density);
		}
		
		delegate float NxComputeSphereMass_36_delegate(float radius, float density);
		
		
		
		
		
		
		private NxComputeSphereMass_36_delegate NxComputeSphereMass_36_delegatefield;
		
		/// <summary>Computes density of a homogeneous sphere according to sphere mass. </summary>
		/// <param name="radius">Radius of the sphere. Range: (0,inf) </param>
		/// <param name="mass">Mass of the sphere. Range: (0,inf)</param>
		public virtual float NxComputeSphereDensity(float radius, float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeSphereDensity_INVOKE(ClassPointer, doSetFunctionPointers, radius, mass);
		}
		
		private float NxComputeSphereDensity_virtual(float radius, float mass)
		{
			return NxComputeSphereDensity(radius, mass);
		}
		
		delegate float NxComputeSphereDensity_37_delegate(float radius, float mass);
		
		
		
		
		
		
		private NxComputeSphereDensity_37_delegate NxComputeSphereDensity_37_delegatefield;
		
		/// <summary>Computes mass of a homogeneous box according to box density. </summary>
		/// <param name="extents">The extents/radii, that is the full side length along each axis, of the box. Range: direction vector </param>
		/// <param name="density">The density of the box. Range: (0,inf)</param>
		public virtual float NxComputeBoxMass(ref NxVec3 extents, float density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeBoxMass_INVOKE(ClassPointer, doSetFunctionPointers, ref extents, density);
		}
		
		private float NxComputeBoxMass_virtual([In()] ref NxVec3 extents, float density)
		{
			return NxComputeBoxMass(ref extents, density);
		}
		
		delegate float NxComputeBoxMass_38_delegate([In()] ref NxVec3 extents, float density);
		
		
		
		
		
		
		private NxComputeBoxMass_38_delegate NxComputeBoxMass_38_delegatefield;
		
		/// <summary>Computes density of a homogeneous box according to box mass. </summary>
		/// <param name="extents">The extents/radii, that is the full side length along each axis, of the box. Range: direction vector </param>
		/// <param name="mass">The mass of the box. Range: (0,inf)</param>
		public virtual float NxComputeBoxDensity(ref NxVec3 extents, float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeBoxDensity_INVOKE(ClassPointer, doSetFunctionPointers, ref extents, mass);
		}
		
		private float NxComputeBoxDensity_virtual([In()] ref NxVec3 extents, float mass)
		{
			return NxComputeBoxDensity(ref extents, mass);
		}
		
		delegate float NxComputeBoxDensity_39_delegate([In()] ref NxVec3 extents, float mass);
		
		
		
		
		
		
		private NxComputeBoxDensity_39_delegate NxComputeBoxDensity_39_delegatefield;
		
		/// <summary>Computes mass of a homogeneous ellipsoid according to ellipsoid density. </summary>
		/// <param name="extents">The extents/radii of the ellipsoid. Range: direction vector </param>
		/// <param name="density">The density of the ellipsoid. Range: (0,inf)</param>
		public virtual float NxComputeEllipsoidMass(ref NxVec3 extents, float density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeEllipsoidMass_INVOKE(ClassPointer, doSetFunctionPointers, ref extents, density);
		}
		
		private float NxComputeEllipsoidMass_virtual([In()] ref NxVec3 extents, float density)
		{
			return NxComputeEllipsoidMass(ref extents, density);
		}
		
		delegate float NxComputeEllipsoidMass_40_delegate([In()] ref NxVec3 extents, float density);
		
		
		
		
		
		
		private NxComputeEllipsoidMass_40_delegate NxComputeEllipsoidMass_40_delegatefield;
		
		/// <summary>Computes density of a homogeneous ellipsoid according to ellipsoid mass. </summary>
		/// <param name="extents">The extents/radii of the ellipsoid. Range: direction vector </param>
		/// <param name="mass">The mass of the ellipsoid. Range: (0,inf)</param>
		public virtual float NxComputeEllipsoidDensity(ref NxVec3 extents, float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeEllipsoidDensity_INVOKE(ClassPointer, doSetFunctionPointers, ref extents, mass);
		}
		
		private float NxComputeEllipsoidDensity_virtual([In()] ref NxVec3 extents, float mass)
		{
			return NxComputeEllipsoidDensity(ref extents, mass);
		}
		
		delegate float NxComputeEllipsoidDensity_41_delegate([In()] ref NxVec3 extents, float mass);
		
		
		
		
		
		
		private NxComputeEllipsoidDensity_41_delegate NxComputeEllipsoidDensity_41_delegatefield;
		
		/// <summary>Computes mass of a homogeneous cylinder according to cylinder density. </summary>
		/// <param name="radius">The radius of the cylinder. Range: (0,inf) </param>
		/// <param name="length">The length. Range: (0,inf) </param>
		/// <param name="density">The density. Range: (0,inf)</param>
		public virtual float NxComputeCylinderMass(float radius, float length, float density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeCylinderMass_INVOKE(ClassPointer, doSetFunctionPointers, radius, length, density);
		}
		
		private float NxComputeCylinderMass_virtual(float radius, float length, float density)
		{
			return NxComputeCylinderMass(radius, length, density);
		}
		
		delegate float NxComputeCylinderMass_42_delegate(float radius, float length, float density);
		
		
		
		
		
		
		private NxComputeCylinderMass_42_delegate NxComputeCylinderMass_42_delegatefield;
		
		/// <summary>Computes density of a homogeneous cylinder according to cylinder mass. </summary>
		/// <param name="radius">The radius of the cylinder. Range: (0,inf) </param>
		/// <param name="length">The length. Range: (0,inf) </param>
		/// <param name="mass">The mass. Range: (0,inf)</param>
		public virtual float NxComputeCylinderDensity(float radius, float length, float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeCylinderDensity_INVOKE(ClassPointer, doSetFunctionPointers, radius, length, mass);
		}
		
		private float NxComputeCylinderDensity_virtual(float radius, float length, float mass)
		{
			return NxComputeCylinderDensity(radius, length, mass);
		}
		
		delegate float NxComputeCylinderDensity_43_delegate(float radius, float length, float mass);
		
		
		
		
		
		
		private NxComputeCylinderDensity_43_delegate NxComputeCylinderDensity_43_delegatefield;
		
		/// <summary>Computes mass of a homogeneous cone according to cone density. </summary>
		/// <param name="radius">The radius of the cone. Range: (0,inf) </param>
		/// <param name="length">The length. Range: (0,inf) </param>
		/// <param name="density">The density. Range: (0,inf)</param>
		public virtual float NxComputeConeMass(float radius, float length, float density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeConeMass_INVOKE(ClassPointer, doSetFunctionPointers, radius, length, density);
		}
		
		private float NxComputeConeMass_virtual(float radius, float length, float density)
		{
			return NxComputeConeMass(radius, length, density);
		}
		
		delegate float NxComputeConeMass_44_delegate(float radius, float length, float density);
		
		
		
		
		
		
		private NxComputeConeMass_44_delegate NxComputeConeMass_44_delegatefield;
		
		/// <summary>Computes density of a homogeneous cone according to cone mass. </summary>
		/// <param name="radius">The radius of the cone. Range: (0,inf) </param>
		/// <param name="length">The length. Range: (0,inf) </param>
		/// <param name="mass">The mass. Range: (0,inf)</param>
		public virtual float NxComputeConeDensity(float radius, float length, float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxComputeConeDensity_INVOKE(ClassPointer, doSetFunctionPointers, radius, length, mass);
		}
		
		private float NxComputeConeDensity_virtual(float radius, float length, float mass)
		{
			return NxComputeConeDensity(radius, length, mass);
		}
		
		delegate float NxComputeConeDensity_45_delegate(float radius, float length, float mass);
		
		
		
		
		
		
		private NxComputeConeDensity_45_delegate NxComputeConeDensity_45_delegatefield;
		
		/// <summary>Computes diagonalized inertia tensor for a box. </summary>
		/// <param name="diagInertia">The diagonalized inertia tensor. </param>
		/// <param name="mass">The mass of the box. Range: (0,inf) </param>
		/// <param name="xlength">The width of the box. Range: (-inf,inf) </param>
		/// <param name="ylength">The height. Range: (-inf,inf) </param>
		/// <param name="zlength">The depth. Range: (-inf,inf)</param>
		public virtual void NxComputeBoxInertiaTensor(ref NxVec3 diagInertia, float mass, float xlength, float ylength, float zlength)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeBoxInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers, ref diagInertia, mass, xlength, ylength, zlength);
		}
		
		private void NxComputeBoxInertiaTensor_virtual([In()] [Out()] ref NxVec3 diagInertia, float mass, float xlength, float ylength, float zlength)
		{
			NxComputeBoxInertiaTensor(ref diagInertia, mass, xlength, ylength, zlength);
		}
		
		delegate void NxComputeBoxInertiaTensor_46_delegate([In()] [Out()] ref NxVec3 diagInertia, float mass, float xlength, float ylength, float zlength);
		
		
		
		
		
		
		private NxComputeBoxInertiaTensor_46_delegate NxComputeBoxInertiaTensor_46_delegatefield;
		
		/// <summary>Computes diagonalized inertia tensor for a sphere. </summary>
		/// <param name="diagInertia">The diagonalized inertia tensor. </param>
		/// <param name="mass">The mass. Range: (0,inf) </param>
		/// <param name="radius">The radius. Range: (-inf,inf) </param>
		/// <param name="hollow">True to treat the sphere as a hollow shell.</param>
		public virtual void NxComputeSphereInertiaTensor(ref NxVec3 diagInertia, float mass, float radius, bool hollow)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxComputeSphereInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers, ref diagInertia, mass, radius, hollow);
		}
		
		private void NxComputeSphereInertiaTensor_virtual([In()] [Out()] ref NxVec3 diagInertia, float mass, float radius, bool hollow)
		{
			NxComputeSphereInertiaTensor(ref diagInertia, mass, radius, hollow);
		}
		
		delegate void NxComputeSphereInertiaTensor_47_delegate([In()] [Out()] ref NxVec3 diagInertia, float mass, float radius, bool hollow);
		
		
		
		
		
		
		private NxComputeSphereInertiaTensor_47_delegate NxComputeSphereInertiaTensor_47_delegatefield;
		
		/// <summary>Set the local anchor stored in a NxJointDesc from a global anchor point. </summary>
		/// <param name="dis">Joint desc to update. </param>
		/// <param name="wsAnchor">Anchor point in the global frame. Range: position vector</param>
		public virtual void NxJointDesc_SetGlobalAnchor(NxJointDesc dis, ref NxVec3 wsAnchor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxJointDesc_SetGlobalAnchor_INVOKE(ClassPointer, doSetFunctionPointers, (dis!=null ? dis.ClassPointer : NullRef), ref wsAnchor);
		}
		
		private void NxJointDesc_SetGlobalAnchor_virtual(IntPtr dis, [In()] ref NxVec3 wsAnchor)
		{
			NxJointDesc_SetGlobalAnchor(NxJointDesc.GetClass(dis), ref wsAnchor);
		}
		
		delegate void NxJointDesc_SetGlobalAnchor_48_delegate(IntPtr dis, [In()] ref NxVec3 wsAnchor);
		
		
		
		
		
		
		private NxJointDesc_SetGlobalAnchor_48_delegate NxJointDesc_SetGlobalAnchor_48_delegatefield;
		
		/// <summary>Set the local axis stored in a NxJointDesc from a global axis. </summary>
		/// <param name="dis">Joint desc to update. </param>
		/// <param name="wsAxis">Axis in the global frame. Range: direction vector</param>
		public virtual void NxJointDesc_SetGlobalAxis(NxJointDesc dis, ref NxVec3 wsAxis)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxJointDesc_SetGlobalAxis_INVOKE(ClassPointer, doSetFunctionPointers, (dis!=null ? dis.ClassPointer : NullRef), ref wsAxis);
		}
		
		private void NxJointDesc_SetGlobalAxis_virtual(IntPtr dis, [In()] ref NxVec3 wsAxis)
		{
			NxJointDesc_SetGlobalAxis(NxJointDesc.GetClass(dis), ref wsAxis);
		}
		
		delegate void NxJointDesc_SetGlobalAxis_49_delegate(IntPtr dis, [In()] ref NxVec3 wsAxis);
		
		
		
		
		
		
		private NxJointDesc_SetGlobalAxis_49_delegate NxJointDesc_SetGlobalAxis_49_delegatefield;
		
		/// <summary>Boolean intersection test between two OBBs. </summary>
		/// <param name="extents0">Extents/radii of first box before transformation. Range: direction vector </param>
		/// <param name="center0">Center of first box. Range: position vector </param>
		/// <param name="rotation0">Rotation to apply to first box (before translation). Range: rotation matrix </param>
		/// <param name="extents1">Extents/radii of second box before transformation Range: direction vector </param>
		/// <param name="center1">Center of second box. Range: position vector </param>
		/// <param name="rotation1">Rotation to apply to second box(before translation). Range: rotation matrix </param>
		/// <param name="fullTest">If false test only the first 6 axis.</param>
		public virtual bool NxBoxBoxIntersect(ref NxVec3 extents0, ref NxVec3 center0, ref NxMat33 rotation0, ref NxVec3 extents1, ref NxVec3 center1, ref NxMat33 rotation1, bool fullTest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxBoxBoxIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1, fullTest);
		}
		
		private bool NxBoxBoxIntersect_virtual([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, bool fullTest)
		{
			return NxBoxBoxIntersect(ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1, fullTest);
		}
		
		delegate bool NxBoxBoxIntersect_50_delegate([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, bool fullTest);
		
		
		
		
		
		
		private NxBoxBoxIntersect_50_delegate NxBoxBoxIntersect_50_delegatefield;
		
		/// <summary></summary>
		public virtual bool NxTriBoxIntersect(ref NxVec3 vertex0, ref NxVec3 vertex1, ref NxVec3 vertex2, ref NxVec3 center, ref NxVec3 extents)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxTriBoxIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref vertex0, ref vertex1, ref vertex2, ref center, ref extents);
		}
		
		private bool NxTriBoxIntersect_virtual([In()] ref NxVec3 vertex0, [In()] ref NxVec3 vertex1, [In()] ref NxVec3 vertex2, [In()] ref NxVec3 center, [In()] ref NxVec3 extents)
		{
			return NxTriBoxIntersect(ref vertex0, ref vertex1, ref vertex2, ref center, ref extents);
		}
		
		delegate bool NxTriBoxIntersect_51_delegate([In()] ref NxVec3 vertex0, [In()] ref NxVec3 vertex1, [In()] ref NxVec3 vertex2, [In()] ref NxVec3 center, [In()] ref NxVec3 extents);
		
		
		
		
		
		
		private NxTriBoxIntersect_51_delegate NxTriBoxIntersect_51_delegatefield;
		
		/// <summary>Computes the separating axis between two OBBs. </summary>
		/// <param name="extents0">Extents/radii of first box before transformation. Range: direction vector </param>
		/// <param name="center0">Center of box first box. Range: position vector </param>
		/// <param name="rotation0">Rotation to apply to first box (before translation). Range: rotation matrix </param>
		/// <param name="extents1">Extents/radii of second box before transformation. Range: direction vector </param>
		/// <param name="center1">Center of second box. Range: position vector </param>
		/// <param name="rotation1">Rotation to apply to second box (before translation). Range: rotation matrix </param>
		/// <param name="fullTest">If false test only the first 6 axis.</param>
		public virtual NxSepAxis NxSeparatingAxis(ref NxVec3 extents0, ref NxVec3 center0, ref NxMat33 rotation0, ref NxVec3 extents1, ref NxVec3 center1, ref NxMat33 rotation1, bool fullTest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSeparatingAxis_INVOKE(ClassPointer, doSetFunctionPointers, ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1, fullTest);
		}
		
		private NxSepAxis NxSeparatingAxis_virtual([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, bool fullTest)
		{
			return NxSeparatingAxis(ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1, fullTest);
		}
		
		delegate NxSepAxis NxSeparatingAxis_52_delegate([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, bool fullTest);
		
		
		
		
		
		
		private NxSeparatingAxis_52_delegate NxSeparatingAxis_52_delegatefield;
		
		/// <summary>Computes the separating axis between two OBBs. </summary>
		/// <param name="extents0">Extents/radii of first box before transformation. Range: direction vector </param>
		/// <param name="center0">Center of box first box. Range: position vector </param>
		/// <param name="rotation0">Rotation to apply to first box (before translation). Range: rotation matrix </param>
		/// <param name="extents1">Extents/radii of second box before transformation. Range: direction vector </param>
		/// <param name="center1">Center of second box. Range: position vector </param>
		/// <param name="rotation1">Rotation to apply to second box (before translation). Range: rotation matrix </param>
		/// <param name="fullTest">If false test only the first 6 axis.</param>
		public virtual NxSepAxis NxSeparatingAxis(ref NxVec3 extents0, ref NxVec3 center0, ref NxMat33 rotation0, ref NxVec3 extents1, ref NxVec3 center1, ref NxMat33 rotation1)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSeparatingAxis_1_INVOKE(ClassPointer, doSetFunctionPointers, ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1);
		}
		
		private NxSepAxis NxSeparatingAxis_virtual([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1)
		{
			return NxSeparatingAxis(ref extents0, ref center0, ref rotation0, ref extents1, ref center1, ref rotation1);
		}
		
		delegate NxSepAxis NxSeparatingAxis_53_delegate([In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1);
		
		
		
		
		
		
		private NxSeparatingAxis_53_delegate NxSeparatingAxis_53_delegatefield;
		
		/// <summary>Segment-plane intersection test. </summary>
		/// <param name="v1">First vertex of segment. Range: position vector </param>
		/// <param name="v2">Second vertex of segment. Range: position vector </param>
		/// <param name="plane">Plane to test against. Range: See NxPlane</param>
		/// <param name="dist">Distance from v1 to impact point (so pointOnPlane=Normalize(v2-v1)*dist). </param>
		/// <param name="pointOnPlane">Imapact point on plane.</param>
		public virtual void NxSegmentPlaneIntersect(ref NxVec3 v1, ref NxVec3 v2, NxPlane plane, ref float dist, ref NxVec3 pointOnPlane)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUtilLib_NxSegmentPlaneIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref v1, ref v2, (plane!=null ? plane.ClassPointer : NullRef), ref dist, ref pointOnPlane);
		}
		
		private void NxSegmentPlaneIntersect_virtual([In()] ref NxVec3 v1, [In()] ref NxVec3 v2, IntPtr plane, [In()] [Out()] ref float dist, [In()] [Out()] ref NxVec3 pointOnPlane)
		{
			NxSegmentPlaneIntersect(ref v1, ref v2, NxPlane.GetClass(plane), ref dist, ref pointOnPlane);
		}
		
		delegate void NxSegmentPlaneIntersect_54_delegate([In()] ref NxVec3 v1, [In()] ref NxVec3 v2, IntPtr plane, [In()] [Out()] ref float dist, [In()] [Out()] ref NxVec3 pointOnPlane);
		
		
		
		
		
		
		private NxSegmentPlaneIntersect_54_delegate NxSegmentPlaneIntersect_54_delegatefield;
		
		/// <summary>Ray-plane intersection test. </summary>
		/// <param name="ray">Ray to test against plane. Range: See NxRay</param>
		/// <param name="plane">Plane to test. Range: See NxPlane</param>
		/// <param name="dist">Distance along ray to impact point (so pointOnPlane=Normalize(v2-v1)*dist). </param>
		/// <param name="pointOnPlane">Impact point on the plane.</param>
		public virtual bool NxRayPlaneIntersect(NxRay ray, NxPlane plane, ref float dist, ref NxVec3 pointOnPlane)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayPlaneIntersect_INVOKE(ClassPointer, doSetFunctionPointers, (ray!=null ? ray.ClassPointer : NullRef), (plane!=null ? plane.ClassPointer : NullRef), ref dist, ref pointOnPlane);
		}
		
		private bool NxRayPlaneIntersect_virtual(IntPtr ray, IntPtr plane, [In()] [Out()] ref float dist, [In()] [Out()] ref NxVec3 pointOnPlane)
		{
			return NxRayPlaneIntersect(NxRay.GetClass(ray), NxPlane.GetClass(plane), ref dist, ref pointOnPlane);
		}
		
		delegate bool NxRayPlaneIntersect_55_delegate(IntPtr ray, IntPtr plane, [In()] [Out()] ref float dist, [In()] [Out()] ref NxVec3 pointOnPlane);
		
		
		
		
		
		
		private NxRayPlaneIntersect_55_delegate NxRayPlaneIntersect_55_delegatefield;
		
		/// <summary>Ray-sphere intersection test. </summary>
		/// <param name="origin">Origin of the ray. Range: position vector </param>
		/// <param name="dir">Direction of the ray. Range: direction vector </param>
		/// <param name="length">Length of the ray. Range: (0,inf) </param>
		/// <param name="center">Center of the sphere. Range: position vector </param>
		/// <param name="radius">Sphere radius. Range: (0,inf) </param>
		/// <param name="hit_time">Distance of intersection between ray and sphere. </param>
		/// <param name="hit_pos">Point of intersection between ray and sphere.</param>
		public virtual bool NxRaySphereIntersect(ref NxVec3 origin, ref NxVec3 dir, float length, ref NxVec3 center, float radius, ref float hit_time, ref NxVec3 hit_pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRaySphereIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref origin, ref dir, length, ref center, radius, ref hit_time, ref hit_pos);
		}
		
		private bool NxRaySphereIntersect_virtual([In()] ref NxVec3 origin, [In()] ref NxVec3 dir, float length, [In()] ref NxVec3 center, float radius, [In()] [Out()] ref float hit_time, [In()] [Out()] ref NxVec3 hit_pos)
		{
			return NxRaySphereIntersect(ref origin, ref dir, length, ref center, radius, ref hit_time, ref hit_pos);
		}
		
		delegate bool NxRaySphereIntersect_56_delegate([In()] ref NxVec3 origin, [In()] ref NxVec3 dir, float length, [In()] ref NxVec3 center, float radius, [In()] [Out()] ref float hit_time, [In()] [Out()] ref NxVec3 hit_pos);
		
		
		
		
		
		
		private NxRaySphereIntersect_56_delegate NxRaySphereIntersect_56_delegatefield;
		
		/// <summary>Segment-AABB intersection test. </summary>
		/// <param name="p1">First point of line segment. Range: position vector </param>
		/// <param name="p2">Second point of line segment. Range: position vector </param>
		/// <param name="bbox_min">Minimum extent of AABB. Range: position vector </param>
		/// <param name="bbox_max">Max extent of AABB. Range: position vector </param>
		/// <param name="intercept">Intersection point between segment and box.</param>
		public virtual bool NxSegmentBoxIntersect(ref NxVec3 p1, ref NxVec3 p2, ref NxVec3 bbox_min, ref NxVec3 bbox_max, ref NxVec3 intercept)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSegmentBoxIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref p1, ref p2, ref bbox_min, ref bbox_max, ref intercept);
		}
		
		private bool NxSegmentBoxIntersect_virtual([In()] ref NxVec3 p1, [In()] ref NxVec3 p2, [In()] ref NxVec3 bbox_min, [In()] ref NxVec3 bbox_max, [In()] [Out()] ref NxVec3 intercept)
		{
			return NxSegmentBoxIntersect(ref p1, ref p2, ref bbox_min, ref bbox_max, ref intercept);
		}
		
		delegate bool NxSegmentBoxIntersect_57_delegate([In()] ref NxVec3 p1, [In()] ref NxVec3 p2, [In()] ref NxVec3 bbox_min, [In()] ref NxVec3 bbox_max, [In()] [Out()] ref NxVec3 intercept);
		
		
		
		
		
		
		private NxSegmentBoxIntersect_57_delegate NxSegmentBoxIntersect_57_delegatefield;
		
		/// <summary>Ray-AABB intersection test. </summary>
		/// <param name="min">Minimum extent of AABB. Range: position vector </param>
		/// <param name="max">Maximum extent of AABB. Range: position vector </param>
		/// <param name="origin">Origin of ray. Range: position vector </param>
		/// <param name="dir">Direction of ray. Range: direction vector </param>
		/// <param name="coord">Intersection point.</param>
		public virtual bool NxRayAABBIntersect(ref NxVec3 min, ref NxVec3 max, ref NxVec3 origin, ref NxVec3 dir, ref NxVec3 coord)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayAABBIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref min, ref max, ref origin, ref dir, ref coord);
		}
		
		private bool NxRayAABBIntersect_virtual([In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord)
		{
			return NxRayAABBIntersect(ref min, ref max, ref origin, ref dir, ref coord);
		}
		
		delegate bool NxRayAABBIntersect_58_delegate([In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord);
		
		
		
		
		
		
		private NxRayAABBIntersect_58_delegate NxRayAABBIntersect_58_delegatefield;
		
		/// <summary>Extended Ray-AABB intersection test. </summary>
		/// <param name="min">Minimum extent of AABB. Range: position vector </param>
		/// <param name="max">Maximum extent of AABB. Range: position vector </param>
		/// <param name="origin">Origin of ray. Range: position vector </param>
		/// <param name="dir">Direction of ray. Range: direction vector </param>
		/// <param name="coord">Intersection point. </param>
		/// <param name="t">Ray parameter corresponding to contact point.</param>
		public virtual uint NxRayAABBIntersect2(ref NxVec3 min, ref NxVec3 max, ref NxVec3 origin, ref NxVec3 dir, ref NxVec3 coord, ref float t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayAABBIntersect2_INVOKE(ClassPointer, doSetFunctionPointers, ref min, ref max, ref origin, ref dir, ref coord, ref t);
		}
		
		private uint NxRayAABBIntersect2_virtual([In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord, [In()] [Out()] ref float t)
		{
			return NxRayAABBIntersect2(ref min, ref max, ref origin, ref dir, ref coord, ref t);
		}
		
		delegate uint NxRayAABBIntersect2_59_delegate([In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord, [In()] [Out()] ref float t);
		
		
		
		
		
		
		private NxRayAABBIntersect2_59_delegate NxRayAABBIntersect2_59_delegatefield;
		
		/// <summary>Boolean segment-OBB intersection test. </summary>
		/// <param name="p0">First point of line segment. Range: position vector </param>
		/// <param name="p1">Second point of line segment. Range: position vector </param>
		/// <param name="center">Center point of OBB. Range: position vector </param>
		/// <param name="extents">Extent/Radii of the OBB. Range: direction vector </param>
		/// <param name="rot">Rotation of the OBB(applied before translation). Range: rotation matrix</param>
		public virtual bool NxSegmentOBBIntersect(ref NxVec3 p0, ref NxVec3 p1, ref NxVec3 center, ref NxVec3 extents, ref NxMat33 rot)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSegmentOBBIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref p0, ref p1, ref center, ref extents, ref rot);
		}
		
		private bool NxSegmentOBBIntersect_virtual([In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot)
		{
			return NxSegmentOBBIntersect(ref p0, ref p1, ref center, ref extents, ref rot);
		}
		
		delegate bool NxSegmentOBBIntersect_60_delegate([In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot);
		
		
		
		
		
		
		private NxSegmentOBBIntersect_60_delegate NxSegmentOBBIntersect_60_delegatefield;
		
		/// <summary>Boolean segment-AABB intersection test. </summary>
		/// <param name="p0">First point of line segment. Range: position vector </param>
		/// <param name="p1">Second point of line segment. Range: position vector </param>
		/// <param name="min">Minimum extent of AABB. Range: position vector </param>
		/// <param name="max">Maximum extent of AABB. Range: position vector</param>
		public virtual bool NxSegmentAABBIntersect(ref NxVec3 p0, ref NxVec3 p1, ref NxVec3 min, ref NxVec3 max)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSegmentAABBIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref p0, ref p1, ref min, ref max);
		}
		
		private bool NxSegmentAABBIntersect_virtual([In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 min, [In()] ref NxVec3 max)
		{
			return NxSegmentAABBIntersect(ref p0, ref p1, ref min, ref max);
		}
		
		delegate bool NxSegmentAABBIntersect_61_delegate([In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 min, [In()] ref NxVec3 max);
		
		
		
		
		
		
		private NxSegmentAABBIntersect_61_delegate NxSegmentAABBIntersect_61_delegatefield;
		
		/// <summary>Boolean ray-OBB intersection test. </summary>
		/// <param name="ray">Ray to test against OBB. Range: See NxRay</param>
		/// <param name="center">Center point of OBB. Range: position vector </param>
		/// <param name="extents">Extent/Radii of the OBB. Range: direction vector </param>
		/// <param name="rot">Rotation of the OBB(applied before translation). Range: rotation matrix</param>
		public virtual bool NxRayOBBIntersect(NxRay ray, ref NxVec3 center, ref NxVec3 extents, ref NxMat33 rot)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayOBBIntersect_INVOKE(ClassPointer, doSetFunctionPointers, (ray!=null ? ray.ClassPointer : NullRef), ref center, ref extents, ref rot);
		}
		
		private bool NxRayOBBIntersect_virtual(IntPtr ray, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot)
		{
			return NxRayOBBIntersect(NxRay.GetClass(ray), ref center, ref extents, ref rot);
		}
		
		delegate bool NxRayOBBIntersect_62_delegate(IntPtr ray, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot);
		
		
		
		
		
		
		private NxRayOBBIntersect_62_delegate NxRayOBBIntersect_62_delegatefield;
		
		/// <summary>Ray-capsule intersection test. </summary>
		/// <param name="origin">Origin of ray. Range: position vector </param>
		/// <param name="dir">Direction of ray. Range: direction vector </param>
		/// <param name="capsule">Capsule to test. Range: see NxCapsule</param>
		/// <param name="t">Parameter of intersection on the ray.</param>
		public virtual uint NxRayCapsuleIntersect(ref NxVec3 origin, ref NxVec3 dir, NxCapsule capsule, float[] t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayCapsuleIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref origin, ref dir, (capsule!=null ? capsule.ClassPointer : NullRef), t);
		}
		
		private uint NxRayCapsuleIntersect_virtual([In()] ref NxVec3 origin, [In()] ref NxVec3 dir, IntPtr capsule, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] float[] t)
		{
			return NxRayCapsuleIntersect(ref origin, ref dir, NxCapsule.GetClass(capsule), t);
		}
		
		delegate uint NxRayCapsuleIntersect_63_delegate([In()] ref NxVec3 origin, [In()] ref NxVec3 dir, IntPtr capsule, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] float[] t);
		
		
		
		
		
		
		private NxRayCapsuleIntersect_63_delegate NxRayCapsuleIntersect_63_delegatefield;
		
		/// <summary>Sphere-sphere sweep test. </summary>
		/// <param name="sphere0">First sphere to test. Range: See NxSphere</param>
		/// <param name="velocity0">Velocity of the first sphere(i.e. the vector to sweep the sphere along). Range: velocity/direction vector </param>
		/// <param name="sphere1">Second sphere to test Range: See NxSphere</param>
		/// <param name="velocity1">Velocity of the second sphere(i.e. the vector to sweep the sphere along). Range: velocity/direction vector</param>
		public virtual bool NxSweptSpheresIntersect(NxSphere sphere0, ref NxVec3 velocity0, NxSphere sphere1, ref NxVec3 velocity1)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweptSpheresIntersect_INVOKE(ClassPointer, doSetFunctionPointers, (sphere0!=null ? sphere0.ClassPointer : NullRef), ref velocity0, (sphere1!=null ? sphere1.ClassPointer : NullRef), ref velocity1);
		}
		
		private bool NxSweptSpheresIntersect_virtual(IntPtr sphere0, [In()] ref NxVec3 velocity0, IntPtr sphere1, [In()] ref NxVec3 velocity1)
		{
			return NxSweptSpheresIntersect(NxSphere.GetClass(sphere0), ref velocity0, NxSphere.GetClass(sphere1), ref velocity1);
		}
		
		delegate bool NxSweptSpheresIntersect_64_delegate(IntPtr sphere0, [In()] ref NxVec3 velocity0, IntPtr sphere1, [In()] ref NxVec3 velocity1);
		
		
		
		
		
		
		private NxSweptSpheresIntersect_64_delegate NxSweptSpheresIntersect_64_delegatefield;
		
		/// <summary>Ray-triangle intersection test. </summary>
		/// <param name="orig">Origin of the ray. Range: position vector </param>
		/// <param name="dir">Direction of the ray. Range: direction vector </param>
		/// <param name="vert0">First vertex of triangle. Range: position vector </param>
		/// <param name="vert1">Second vertex of triangle. Range: position vector </param>
		/// <param name="vert2">Third vertex of triangle. Range: position vector </param>
		/// <param name="t">Distance along the ray from the origin to the impact point. </param>
		/// <param name="u">Barycentric coordinate. </param>
		/// <param name="v">Barycentric coordinate. </param>
		/// <param name="cull">Cull backfaces.</param>
		public virtual bool NxRayTriIntersect(ref NxVec3 orig, ref NxVec3 dir, ref NxVec3 vert0, ref NxVec3 vert1, ref NxVec3 vert2, ref float t, ref float u, ref float v, bool cull)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxRayTriIntersect_INVOKE(ClassPointer, doSetFunctionPointers, ref orig, ref dir, ref vert0, ref vert1, ref vert2, ref t, ref u, ref v, cull);
		}
		
		private bool NxRayTriIntersect_virtual([In()] ref NxVec3 orig, [In()] ref NxVec3 dir, [In()] ref NxVec3 vert0, [In()] ref NxVec3 vert1, [In()] ref NxVec3 vert2, [In()] [Out()] ref float t, [In()] [Out()] ref float u, [In()] [Out()] ref float v, bool cull)
		{
			return NxRayTriIntersect(ref orig, ref dir, ref vert0, ref vert1, ref vert2, ref t, ref u, ref v, cull);
		}
		
		delegate bool NxRayTriIntersect_65_delegate([In()] ref NxVec3 orig, [In()] ref NxVec3 dir, [In()] ref NxVec3 vert0, [In()] ref NxVec3 vert1, [In()] ref NxVec3 vert2, [In()] [Out()] ref float t, [In()] [Out()] ref float u, [In()] [Out()] ref float v, bool cull);
		
		
		
		
		
		
		private NxRayTriIntersect_65_delegate NxRayTriIntersect_65_delegatefield;
		
		/// <summary>Builds smooth vertex normals over a mesh. </summary>
		/// <param name="nbTris">Number of triangles </param>
		/// <param name="nbVerts">Number of vertices </param>
		/// <param name="verts">Array of vertices </param>
		/// <param name="dFaces">Array of dword triangle indices, or null </param>
		/// <param name="wFaces">Array of word triangle indices, or null </param>
		/// <param name="normals">Array of computed normals (assumes nbVerts vectors) </param>
		/// <param name="flip">Flips the normals or not</param>
		public virtual bool NxBuildSmoothNormals(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals, bool flip)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxBuildSmoothNormals_INVOKE(ClassPointer, doSetFunctionPointers, nbTris, nbVerts, verts, dFaces, wFaces, normals, flip);
		}
		
		private bool NxBuildSmoothNormals_virtual(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals, bool flip)
		{
			return NxBuildSmoothNormals(nbTris, nbVerts, verts, dFaces, wFaces, normals, flip);
		}
		
		delegate bool NxBuildSmoothNormals_66_delegate(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals, bool flip);
		
		
		
		
		
		
		private NxBuildSmoothNormals_66_delegate NxBuildSmoothNormals_66_delegatefield;
		
		/// <summary>Builds smooth vertex normals over a mesh. </summary>
		/// <param name="nbTris">Number of triangles </param>
		/// <param name="nbVerts">Number of vertices </param>
		/// <param name="verts">Array of vertices </param>
		/// <param name="dFaces">Array of dword triangle indices, or null </param>
		/// <param name="wFaces">Array of word triangle indices, or null </param>
		/// <param name="normals">Array of computed normals (assumes nbVerts vectors) </param>
		/// <param name="flip">Flips the normals or not</param>
		public virtual bool NxBuildSmoothNormals(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxBuildSmoothNormals_1_INVOKE(ClassPointer, doSetFunctionPointers, nbTris, nbVerts, verts, dFaces, wFaces, normals);
		}
		
		private bool NxBuildSmoothNormals_virtual(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals)
		{
			return NxBuildSmoothNormals(nbTris, nbVerts, verts, dFaces, wFaces, normals);
		}
		
		delegate bool NxBuildSmoothNormals_67_delegate(uint nbTris, uint nbVerts, NxVec3[] verts, uint[] dFaces, ushort[] wFaces, NxVec3[] normals);
		
		
		
		
		
		
		private NxBuildSmoothNormals_67_delegate NxBuildSmoothNormals_67_delegatefield;
		
		/// <summary>Box-vs-capsule sweep test. </summary>
		/// <param name="box">Box (source of the sweep) </param>
		/// <param name="lss">Capsule </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="min_dist">Impact distance </param>
		/// <param name="normal">Normal at impact point</param>
		public virtual bool NxSweepBoxCapsule(NxBox box, NxCapsule lss, ref NxVec3 dir, float length, ref float min_dist, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepBoxCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), (lss!=null ? lss.ClassPointer : NullRef), ref dir, length, ref min_dist, ref normal);
		}
		
		private bool NxSweepBoxCapsule_virtual(IntPtr box, IntPtr lss, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 normal)
		{
			return NxSweepBoxCapsule(NxBox.GetClass(box), NxCapsule.GetClass(lss), ref dir, length, ref min_dist, ref normal);
		}
		
		delegate bool NxSweepBoxCapsule_68_delegate(IntPtr box, IntPtr lss, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 normal);
		
		
		
		
		
		
		private NxSweepBoxCapsule_68_delegate NxSweepBoxCapsule_68_delegatefield;
		
		/// <summary>Box-vs-sphere sweep test. </summary>
		/// <param name="box">Box (source of the sweep) </param>
		/// <param name="sphere">Sphere </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="min_dist">Impact distance </param>
		/// <param name="normal">Normal at impact point</param>
		public virtual bool NxSweepBoxSphere(NxBox box, NxSphere sphere, ref NxVec3 dir, float length, ref float min_dist, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepBoxSphere_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef), (sphere!=null ? sphere.ClassPointer : NullRef), ref dir, length, ref min_dist, ref normal);
		}
		
		private bool NxSweepBoxSphere_virtual(IntPtr box, IntPtr sphere, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 normal)
		{
			return NxSweepBoxSphere(NxBox.GetClass(box), NxSphere.GetClass(sphere), ref dir, length, ref min_dist, ref normal);
		}
		
		delegate bool NxSweepBoxSphere_69_delegate(IntPtr box, IntPtr sphere, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 normal);
		
		
		
		
		
		
		private NxSweepBoxSphere_69_delegate NxSweepBoxSphere_69_delegatefield;
		
		/// <summary>Capsule-vs-capsule sweep test. </summary>
		/// <param name="lss0">Capsule (source of the sweep) </param>
		/// <param name="lss1">Capsule </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="min_dist">Impact distance </param>
		/// <param name="ip">Impact point </param>
		/// <param name="normal">Normal at impact point</param>
		public virtual bool NxSweepCapsuleCapsule(NxCapsule lss0, NxCapsule lss1, ref NxVec3 dir, float length, ref float min_dist, ref NxVec3 ip, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepCapsuleCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (lss0!=null ? lss0.ClassPointer : NullRef), (lss1!=null ? lss1.ClassPointer : NullRef), ref dir, length, ref min_dist, ref ip, ref normal);
		}
		
		private bool NxSweepCapsuleCapsule_virtual(IntPtr lss0, IntPtr lss1, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal)
		{
			return NxSweepCapsuleCapsule(NxCapsule.GetClass(lss0), NxCapsule.GetClass(lss1), ref dir, length, ref min_dist, ref ip, ref normal);
		}
		
		delegate bool NxSweepCapsuleCapsule_70_delegate(IntPtr lss0, IntPtr lss1, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal);
		
		
		
		
		
		
		private NxSweepCapsuleCapsule_70_delegate NxSweepCapsuleCapsule_70_delegatefield;
		
		/// <summary>Sphere-vs-capsule sweep test. </summary>
		/// <param name="sphere">Sphere (source of the sweep) </param>
		/// <param name="lss">Capsule </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="min_dist">Impact distance </param>
		/// <param name="ip">Impact point </param>
		/// <param name="normal">Normal at impact point</param>
		public virtual bool NxSweepSphereCapsule(NxSphere sphere, NxCapsule lss, ref NxVec3 dir, float length, ref float min_dist, ref NxVec3 ip, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepSphereCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (sphere!=null ? sphere.ClassPointer : NullRef), (lss!=null ? lss.ClassPointer : NullRef), ref dir, length, ref min_dist, ref ip, ref normal);
		}
		
		private bool NxSweepSphereCapsule_virtual(IntPtr sphere, IntPtr lss, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal)
		{
			return NxSweepSphereCapsule(NxSphere.GetClass(sphere), NxCapsule.GetClass(lss), ref dir, length, ref min_dist, ref ip, ref normal);
		}
		
		delegate bool NxSweepSphereCapsule_71_delegate(IntPtr sphere, IntPtr lss, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref float min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal);
		
		
		
		
		
		
		private NxSweepSphereCapsule_71_delegate NxSweepSphereCapsule_71_delegatefield;
		
		/// <summary>Box-vs-box sweep test. </summary>
		/// <param name="box0">Box (source of the sweep) </param>
		/// <param name="box1">Box </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="ip">Impact point </param>
		/// <param name="normal">Normal at impact point </param>
		/// <param name="min_dist">Impact distance</param>
		public virtual bool NxSweepBoxBox(NxBox box0, NxBox box1, ref NxVec3 dir, float length, ref NxVec3 ip, ref NxVec3 normal, ref float min_dist)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepBoxBox_INVOKE(ClassPointer, doSetFunctionPointers, (box0!=null ? box0.ClassPointer : NullRef), (box1!=null ? box1.ClassPointer : NullRef), ref dir, length, ref ip, ref normal, ref min_dist);
		}
		
		private bool NxSweepBoxBox_virtual(IntPtr box0, IntPtr box1, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float min_dist)
		{
			return NxSweepBoxBox(NxBox.GetClass(box0), NxBox.GetClass(box1), ref dir, length, ref ip, ref normal, ref min_dist);
		}
		
		delegate bool NxSweepBoxBox_72_delegate(IntPtr box0, IntPtr box1, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float min_dist);
		
		
		
		
		
		
		private NxSweepBoxBox_72_delegate NxSweepBoxBox_72_delegatefield;
		
		/// <summary>Box-vs-triangles sweep test. </summary>
		/// <param name="nb_tris">Number of triangles </param>
		/// <param name="triangles">Array of triangles </param>
		/// <param name="edge_triangles">Array of edge-triangles, whose "vertices" are the edge normals </param>
		/// <param name="edge_flags">Array of edge flags (NxTriangleCollisionFlag) </param>
		/// <param name="box">Box (source of the sweep) </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="hit">Impact point </param>
		/// <param name="normal">Normal at impact point </param>
		/// <param name="d">Impact distance </param>
		/// <param name="index">Triangle index (closest hit triangle) </param>
		/// <param name="in/out]">cachedIndex Cached triangle index for subsequent calls. Cached triangle is tested first.</param>
		public virtual bool NxSweepBoxTriangles(uint nb_tris, NxTriangle triangles, NxTriangle edge_triangles, uint[] edge_flags, NxBounds3 box, ref NxVec3 dir, float length, ref NxVec3 hit, ref NxVec3 normal, ref float d, ref uint index, uint[] cachedIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepBoxTriangles_INVOKE(ClassPointer, doSetFunctionPointers, nb_tris, (triangles!=null ? triangles.ClassPointer : NullRef), (edge_triangles!=null ? edge_triangles.ClassPointer : NullRef), edge_flags, (box!=null ? box.ClassPointer : NullRef), ref dir, length, ref hit, ref normal, ref d, ref index, cachedIndex);
		}
		
		private bool NxSweepBoxTriangles_virtual(uint nb_tris, IntPtr triangles, IntPtr edge_triangles, uint[] edge_flags, IntPtr box, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index, uint[] cachedIndex)
		{
			return NxSweepBoxTriangles(nb_tris, NxTriangle.GetClass(triangles), NxTriangle.GetClass(edge_triangles), edge_flags, NxBounds3.GetClass(box), ref dir, length, ref hit, ref normal, ref d, ref index, cachedIndex);
		}
		
		delegate bool NxSweepBoxTriangles_73_delegate(uint nb_tris, IntPtr triangles, IntPtr edge_triangles, uint[] edge_flags, IntPtr box, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index, uint[] cachedIndex);
		
		
		
		
		
		
		private NxSweepBoxTriangles_73_delegate NxSweepBoxTriangles_73_delegatefield;
		
		/// <summary>Box-vs-triangles sweep test. </summary>
		/// <param name="nb_tris">Number of triangles </param>
		/// <param name="triangles">Array of triangles </param>
		/// <param name="edge_triangles">Array of edge-triangles, whose "vertices" are the edge normals </param>
		/// <param name="edge_flags">Array of edge flags (NxTriangleCollisionFlag) </param>
		/// <param name="box">Box (source of the sweep) </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="hit">Impact point </param>
		/// <param name="normal">Normal at impact point </param>
		/// <param name="d">Impact distance </param>
		/// <param name="index">Triangle index (closest hit triangle) </param>
		/// <param name="in/out]">cachedIndex Cached triangle index for subsequent calls. Cached triangle is tested first.</param>
		public virtual bool NxSweepBoxTriangles(uint nb_tris, NxTriangle triangles, NxTriangle edge_triangles, uint[] edge_flags, NxBounds3 box, ref NxVec3 dir, float length, ref NxVec3 hit, ref NxVec3 normal, ref float d, ref uint index)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepBoxTriangles_1_INVOKE(ClassPointer, doSetFunctionPointers, nb_tris, (triangles!=null ? triangles.ClassPointer : NullRef), (edge_triangles!=null ? edge_triangles.ClassPointer : NullRef), edge_flags, (box!=null ? box.ClassPointer : NullRef), ref dir, length, ref hit, ref normal, ref d, ref index);
		}
		
		private bool NxSweepBoxTriangles_virtual(uint nb_tris, IntPtr triangles, IntPtr edge_triangles, uint[] edge_flags, IntPtr box, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index)
		{
			return NxSweepBoxTriangles(nb_tris, NxTriangle.GetClass(triangles), NxTriangle.GetClass(edge_triangles), edge_flags, NxBounds3.GetClass(box), ref dir, length, ref hit, ref normal, ref d, ref index);
		}
		
		delegate bool NxSweepBoxTriangles_74_delegate(uint nb_tris, IntPtr triangles, IntPtr edge_triangles, uint[] edge_flags, IntPtr box, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index);
		
		
		
		
		
		
		private NxSweepBoxTriangles_74_delegate NxSweepBoxTriangles_74_delegatefield;
		
		/// <summary>Capsule-vs-triangles sweep test. </summary>
		/// <param name="nb_tris">Number of triangles </param>
		/// <param name="triangles">Array of triangles </param>
		/// <param name="edge_flags">Array of edge flags (NxTriangleCollisionFlag) </param>
		/// <param name="center">Center of capsule </param>
		/// <param name="radius">Capsule radius </param>
		/// <param name="height">Capsule height </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="hit">Impact point </param>
		/// <param name="normal">Normal at impact point </param>
		/// <param name="d">Impact distance </param>
		/// <param name="index">Triangle index (closest hit triangle) </param>
		/// <param name="in/out]">cachedIndex Cached triangle index for subsequent calls. Cached triangle is tested first.</param>
		public virtual bool NxSweepCapsuleTriangles(uint up_direction, uint nb_tris, NxTriangle triangles, uint[] edge_flags, ref NxVec3 center, float radius, float height, ref NxVec3 dir, float length, ref NxVec3 hit, ref NxVec3 normal, ref float d, ref uint index, uint[] cachedIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepCapsuleTriangles_INVOKE(ClassPointer, doSetFunctionPointers, up_direction, nb_tris, (triangles!=null ? triangles.ClassPointer : NullRef), edge_flags, ref center, radius, height, ref dir, length, ref hit, ref normal, ref d, ref index, cachedIndex);
		}
		
		private bool NxSweepCapsuleTriangles_virtual(uint up_direction, uint nb_tris, IntPtr triangles, uint[] edge_flags, [In()] ref NxVec3 center, float radius, float height, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index, uint[] cachedIndex)
		{
			return NxSweepCapsuleTriangles(up_direction, nb_tris, NxTriangle.GetClass(triangles), edge_flags, ref center, radius, height, ref dir, length, ref hit, ref normal, ref d, ref index, cachedIndex);
		}
		
		delegate bool NxSweepCapsuleTriangles_75_delegate(uint up_direction, uint nb_tris, IntPtr triangles, uint[] edge_flags, [In()] ref NxVec3 center, float radius, float height, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index, uint[] cachedIndex);
		
		
		
		
		
		
		private NxSweepCapsuleTriangles_75_delegate NxSweepCapsuleTriangles_75_delegatefield;
		
		/// <summary>Capsule-vs-triangles sweep test. </summary>
		/// <param name="nb_tris">Number of triangles </param>
		/// <param name="triangles">Array of triangles </param>
		/// <param name="edge_flags">Array of edge flags (NxTriangleCollisionFlag) </param>
		/// <param name="center">Center of capsule </param>
		/// <param name="radius">Capsule radius </param>
		/// <param name="height">Capsule height </param>
		/// <param name="dir">Unit-length sweep direction </param>
		/// <param name="length">Length of sweep (i.e. total motion vectoir is dir*length) </param>
		/// <param name="hit">Impact point </param>
		/// <param name="normal">Normal at impact point </param>
		/// <param name="d">Impact distance </param>
		/// <param name="index">Triangle index (closest hit triangle) </param>
		/// <param name="in/out]">cachedIndex Cached triangle index for subsequent calls. Cached triangle is tested first.</param>
		public virtual bool NxSweepCapsuleTriangles(uint up_direction, uint nb_tris, NxTriangle triangles, uint[] edge_flags, ref NxVec3 center, float radius, float height, ref NxVec3 dir, float length, ref NxVec3 hit, ref NxVec3 normal, ref float d, ref uint index)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSweepCapsuleTriangles_1_INVOKE(ClassPointer, doSetFunctionPointers, up_direction, nb_tris, (triangles!=null ? triangles.ClassPointer : NullRef), edge_flags, ref center, radius, height, ref dir, length, ref hit, ref normal, ref d, ref index);
		}
		
		private bool NxSweepCapsuleTriangles_virtual(uint up_direction, uint nb_tris, IntPtr triangles, uint[] edge_flags, [In()] ref NxVec3 center, float radius, float height, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index)
		{
			return NxSweepCapsuleTriangles(up_direction, nb_tris, NxTriangle.GetClass(triangles), edge_flags, ref center, radius, height, ref dir, length, ref hit, ref normal, ref d, ref index);
		}
		
		delegate bool NxSweepCapsuleTriangles_76_delegate(uint up_direction, uint nb_tris, IntPtr triangles, uint[] edge_flags, [In()] ref NxVec3 center, float radius, float height, [In()] ref NxVec3 dir, float length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref float d, [In()] [Out()] ref uint index);
		
		
		
		
		
		
		private NxSweepCapsuleTriangles_76_delegate NxSweepCapsuleTriangles_76_delegatefield;
		
		/// <summary>Point-vs-OBB distance computation. </summary>
		/// <param name="point">The point </param>
		/// <param name="center">OBB center </param>
		/// <param name="extents">OBB extents </param>
		/// <param name="rot">OBB rotation </param>
		/// <param name="params">Closest point on the box, in box space</param>
		public virtual float NxPointOBBSqrDist(ref NxVec3 point, ref NxVec3 center, ref NxVec3 extents, ref NxMat33 rot, NxVec3[] @params)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxPointOBBSqrDist_INVOKE(ClassPointer, doSetFunctionPointers, ref point, ref center, ref extents, ref rot, @params);
		}
		
		private float NxPointOBBSqrDist_virtual([In()] ref NxVec3 point, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot, NxVec3[] @params)
		{
			return NxPointOBBSqrDist(ref point, ref center, ref extents, ref rot, @params);
		}
		
		delegate float NxPointOBBSqrDist_77_delegate([In()] ref NxVec3 point, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot, NxVec3[] @params);
		
		
		
		
		
		
		private NxPointOBBSqrDist_77_delegate NxPointOBBSqrDist_77_delegatefield;
		
		/// <summary>Segment-vs-OBB distance computation. </summary>
		/// <param name="segment">The segment </param>
		/// <param name="c0">OBB center </param>
		/// <param name="e0">OBB extents </param>
		/// <param name="r0">OBB rotation </param>
		/// <param name="t">Parameter in [0,1] describing the closest point on the segment. </param>
		/// <param name="params">Closest point on the box, in box space</param>
		public virtual float NxSegmentOBBSqrDist(NxSegment segment, ref NxVec3 c0, ref NxVec3 e0, ref NxMat33 r0, float[] t, NxVec3[] p)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUtilLib_NxSegmentOBBSqrDist_INVOKE(ClassPointer, doSetFunctionPointers, (segment!=null ? segment.ClassPointer : NullRef), ref c0, ref e0, ref r0, t, p);
		}
		
		private float NxSegmentOBBSqrDist_virtual(IntPtr segment, [In()] ref NxVec3 c0, [In()] ref NxVec3 e0, [In()] ref NxMat33 r0, float[] t, NxVec3[] p)
		{
			return NxSegmentOBBSqrDist(NxSegment.GetClass(segment), ref c0, ref e0, ref r0, t, p);
		}
		
		delegate float NxSegmentOBBSqrDist_78_delegate(IntPtr segment, [In()] ref NxVec3 c0, [In()] ref NxVec3 e0, [In()] ref NxMat33 r0, float[] t, NxVec3[] p);
		
		
		
		
		
		
		private NxSegmentOBBSqrDist_78_delegate NxSegmentOBBSqrDist_78_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxBoxContainsPoint")]
        private extern static System.Boolean NxUtilLib_NxBoxContainsPoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, [In()] ref NxVec3 p);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxCreateBox")]
        private extern static void NxUtilLib_NxCreateBox_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, HandleRef aabb, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxPlanes")]
        private extern static System.Boolean NxUtilLib_NxComputeBoxPlanes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, HandleRef planes);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxPoints")]
        private extern static System.Boolean NxUtilLib_NxComputeBoxPoints_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, NxVec3[] pts);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxVertexNormals")]
        private extern static System.Boolean NxUtilLib_NxComputeBoxVertexNormals_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, NxVec3[] pts);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxGetBoxEdges")]
        private extern static System.UInt32[] NxUtilLib_NxGetBoxEdges_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxGetBoxEdgesAxes")]
        private extern static System.Int32[] NxUtilLib_NxGetBoxEdgesAxes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxGetBoxTriangles")]
        private extern static System.UInt32[] NxUtilLib_NxGetBoxTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxGetBoxLocalEdgeNormals")]
        private extern static NxVec3[] NxUtilLib_NxGetBoxLocalEdgeNormals_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxWorldEdgeNormal")]
        private extern static void NxUtilLib_NxComputeBoxWorldEdgeNormal_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, System.UInt32 edge_index, [In()] [Out()] ref NxVec3 world_normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeCapsuleAroundBox")]
        private extern static void NxUtilLib_NxComputeCapsuleAroundBox_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, HandleRef capsule);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxIsBoxAInsideBoxB")]
        private extern static System.Boolean NxUtilLib_NxIsBoxAInsideBoxB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef a, HandleRef b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxGetBoxQuads")]
        private extern static System.UInt32[] NxUtilLib_NxGetBoxQuads_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxBoxVertexToQuad")]
        private extern static System.UInt32[] NxUtilLib_NxBoxVertexToQuad_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxAroundCapsule")]
        private extern static void NxUtilLib_NxComputeBoxAroundCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef capsule, HandleRef box);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPUPrecision24")]
        private extern static void NxUtilLib_NxSetFPUPrecision24_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPUPrecision53")]
        private extern static void NxUtilLib_NxSetFPUPrecision53_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPUPrecision64")]
        private extern static void NxUtilLib_NxSetFPUPrecision64_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPURoundingChop")]
        private extern static void NxUtilLib_NxSetFPURoundingChop_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPURoundingUp")]
        private extern static void NxUtilLib_NxSetFPURoundingUp_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPURoundingDown")]
        private extern static void NxUtilLib_NxSetFPURoundingDown_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPURoundingNear")]
        private extern static void NxUtilLib_NxSetFPURoundingNear_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSetFPUExceptions")]
        private extern static void NxUtilLib_NxSetFPUExceptions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxIntChop")]
        private extern static System.Int32 NxUtilLib_NxIntChop_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.Single f);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxIntFloor")]
        private extern static System.Int32 NxUtilLib_NxIntFloor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.Single f);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxIntCeil")]
        private extern static System.Int32 NxUtilLib_NxIntCeil_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.Single f);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeDistanceSquared")]
        private extern static System.Single NxUtilLib_NxComputeDistanceSquared_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef ray, [In()] ref NxVec3 point, System.Single[] t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeSquareDistance")]
        private extern static System.Single NxUtilLib_NxComputeSquareDistance_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef seg, [In()] ref NxVec3 point, System.Single[] t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeSphere")]
        private extern static NxBSphereMethod NxUtilLib_NxComputeSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef sphere, System.UInt32 nb_verts, NxVec3[] verts);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxFastComputeSphere")]
        private extern static System.Boolean NxUtilLib_NxFastComputeSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef sphere, System.UInt32 nb_verts, NxVec3[] verts);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxMergeSpheres")]
        private extern static void NxUtilLib_NxMergeSpheres_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef merged, HandleRef sphere0, HandleRef sphere1);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxNormalToTangents")]
        private extern static void NxUtilLib_NxNormalToTangents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 n, [In()] [Out()] ref NxVec3 t1, [In()] [Out()] ref NxVec3 t2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxDiagonalizeInertiaTensor")]
        private extern static System.Boolean NxUtilLib_NxDiagonalizeInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 denseInertia, [In()] [Out()] ref NxVec3 diagonalInertia, [In()] [Out()] ref NxMat33 rotation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxFindRotationMatrix")]
        private extern static void NxUtilLib_NxFindRotationMatrix_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 x, [In()] ref NxVec3 b, [In()] [Out()] ref NxMat33 M);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBounds")]
        private extern static void NxUtilLib_NxComputeBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 min, [In()] [Out()] ref NxVec3 max, System.UInt32 nbVerts, NxVec3[] verts);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxCrc32")]
        private extern static System.UInt32 NxUtilLib_NxCrc32_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 nbBytes);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeSphereMass")]
        private extern static System.Single NxUtilLib_NxComputeSphereMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeSphereDensity")]
        private extern static System.Single NxUtilLib_NxComputeSphereDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxMass")]
        private extern static System.Single NxUtilLib_NxComputeBoxMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents, System.Single density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxDensity")]
        private extern static System.Single NxUtilLib_NxComputeBoxDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeEllipsoidMass")]
        private extern static System.Single NxUtilLib_NxComputeEllipsoidMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents, System.Single density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeEllipsoidDensity")]
        private extern static System.Single NxUtilLib_NxComputeEllipsoidDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeCylinderMass")]
        private extern static System.Single NxUtilLib_NxComputeCylinderMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single length, System.Single density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeCylinderDensity")]
        private extern static System.Single NxUtilLib_NxComputeCylinderDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single length, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeConeMass")]
        private extern static System.Single NxUtilLib_NxComputeConeMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single length, System.Single density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeConeDensity")]
        private extern static System.Single NxUtilLib_NxComputeConeDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single length, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeBoxInertiaTensor")]
        private extern static void NxUtilLib_NxComputeBoxInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 diagInertia, System.Single mass, System.Single xlength, System.Single ylength, System.Single zlength);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxComputeSphereInertiaTensor")]
        private extern static void NxUtilLib_NxComputeSphereInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 diagInertia, System.Single mass, System.Single radius, System.Boolean hollow);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxJointDesc_SetGlobalAnchor")]
        private extern static void NxUtilLib_NxJointDesc_SetGlobalAnchor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef dis, [In()] ref NxVec3 wsAnchor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxJointDesc_SetGlobalAxis")]
        private extern static void NxUtilLib_NxJointDesc_SetGlobalAxis_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef dis, [In()] ref NxVec3 wsAxis);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxBoxBoxIntersect")]
        private extern static System.Boolean NxUtilLib_NxBoxBoxIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, System.Boolean fullTest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxTriBoxIntersect")]
        private extern static System.Boolean NxUtilLib_NxTriBoxIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vertex0, [In()] ref NxVec3 vertex1, [In()] ref NxVec3 vertex2, [In()] ref NxVec3 center, [In()] ref NxVec3 extents);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSeparatingAxis")]
        private extern static NxSepAxis NxUtilLib_NxSeparatingAxis_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1, System.Boolean fullTest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSeparatingAxis_1")]
        private extern static NxSepAxis NxUtilLib_NxSeparatingAxis_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents0, [In()] ref NxVec3 center0, [In()] ref NxMat33 rotation0, [In()] ref NxVec3 extents1, [In()] ref NxVec3 center1, [In()] ref NxMat33 rotation1);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSegmentPlaneIntersect")]
        private extern static void NxUtilLib_NxSegmentPlaneIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 v1, [In()] ref NxVec3 v2, HandleRef plane, [In()] [Out()] ref System.Single dist, [In()] [Out()] ref NxVec3 pointOnPlane);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayPlaneIntersect")]
        private extern static System.Boolean NxUtilLib_NxRayPlaneIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef ray, HandleRef plane, [In()] [Out()] ref System.Single dist, [In()] [Out()] ref NxVec3 pointOnPlane);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRaySphereIntersect")]
        private extern static System.Boolean NxUtilLib_NxRaySphereIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, System.Single length, [In()] ref NxVec3 center, System.Single radius, [In()] [Out()] ref System.Single hit_time, [In()] [Out()] ref NxVec3 hit_pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSegmentBoxIntersect")]
        private extern static System.Boolean NxUtilLib_NxSegmentBoxIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 p1, [In()] ref NxVec3 p2, [In()] ref NxVec3 bbox_min, [In()] ref NxVec3 bbox_max, [In()] [Out()] ref NxVec3 intercept);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayAABBIntersect")]
        private extern static System.Boolean NxUtilLib_NxRayAABBIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayAABBIntersect2")]
        private extern static System.UInt32 NxUtilLib_NxRayAABBIntersect2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 min, [In()] ref NxVec3 max, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, [In()] [Out()] ref NxVec3 coord, [In()] [Out()] ref System.Single t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSegmentOBBIntersect")]
        private extern static System.Boolean NxUtilLib_NxSegmentOBBIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSegmentAABBIntersect")]
        private extern static System.Boolean NxUtilLib_NxSegmentAABBIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 p0, [In()] ref NxVec3 p1, [In()] ref NxVec3 min, [In()] ref NxVec3 max);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayOBBIntersect")]
        private extern static System.Boolean NxUtilLib_NxRayOBBIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef ray, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayCapsuleIntersect")]
        private extern static System.UInt32 NxUtilLib_NxRayCapsuleIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 origin, [In()] ref NxVec3 dir, HandleRef capsule, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] System.Single[] t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweptSpheresIntersect")]
        private extern static System.Boolean NxUtilLib_NxSweptSpheresIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef sphere0, [In()] ref NxVec3 velocity0, HandleRef sphere1, [In()] ref NxVec3 velocity1);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxRayTriIntersect")]
        private extern static System.Boolean NxUtilLib_NxRayTriIntersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 orig, [In()] ref NxVec3 dir, [In()] ref NxVec3 vert0, [In()] ref NxVec3 vert1, [In()] ref NxVec3 vert2, [In()] [Out()] ref System.Single t, [In()] [Out()] ref System.Single u, [In()] [Out()] ref System.Single v, System.Boolean cull);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxBuildSmoothNormals")]
        private extern static System.Boolean NxUtilLib_NxBuildSmoothNormals_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbTris, System.UInt32 nbVerts, NxVec3[] verts, System.UInt32[] dFaces, System.UInt16[] wFaces, NxVec3[] normals, System.Boolean flip);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxBuildSmoothNormals_1")]
        private extern static System.Boolean NxUtilLib_NxBuildSmoothNormals_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nbTris, System.UInt32 nbVerts, NxVec3[] verts, System.UInt32[] dFaces, System.UInt16[] wFaces, NxVec3[] normals);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepBoxCapsule")]
        private extern static System.Boolean NxUtilLib_NxSweepBoxCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, HandleRef lss, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref System.Single min_dist, [In()] [Out()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepBoxSphere")]
        private extern static System.Boolean NxUtilLib_NxSweepBoxSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box, HandleRef sphere, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref System.Single min_dist, [In()] [Out()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepCapsuleCapsule")]
        private extern static System.Boolean NxUtilLib_NxSweepCapsuleCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef lss0, HandleRef lss1, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref System.Single min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepSphereCapsule")]
        private extern static System.Boolean NxUtilLib_NxSweepSphereCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef sphere, HandleRef lss, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref System.Single min_dist, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepBoxBox")]
        private extern static System.Boolean NxUtilLib_NxSweepBoxBox_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box0, HandleRef box1, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref NxVec3 ip, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref System.Single min_dist);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepBoxTriangles")]
        private extern static System.Boolean NxUtilLib_NxSweepBoxTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nb_tris, HandleRef triangles, HandleRef edge_triangles, System.UInt32[] edge_flags, HandleRef box, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref System.Single d, [In()] [Out()] ref System.UInt32 index, System.UInt32[] cachedIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepBoxTriangles_1")]
        private extern static System.Boolean NxUtilLib_NxSweepBoxTriangles_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 nb_tris, HandleRef triangles, HandleRef edge_triangles, System.UInt32[] edge_flags, HandleRef box, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref System.Single d, [In()] [Out()] ref System.UInt32 index);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepCapsuleTriangles")]
        private extern static System.Boolean NxUtilLib_NxSweepCapsuleTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 up_direction, System.UInt32 nb_tris, HandleRef triangles, System.UInt32[] edge_flags, [In()] ref NxVec3 center, System.Single radius, System.Single height, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref System.Single d, [In()] [Out()] ref System.UInt32 index, System.UInt32[] cachedIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSweepCapsuleTriangles_1")]
        private extern static System.Boolean NxUtilLib_NxSweepCapsuleTriangles_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 up_direction, System.UInt32 nb_tris, HandleRef triangles, System.UInt32[] edge_flags, [In()] ref NxVec3 center, System.Single radius, System.Single height, [In()] ref NxVec3 dir, System.Single length, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref NxVec3 normal, [In()] [Out()] ref System.Single d, [In()] [Out()] ref System.UInt32 index);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxPointOBBSqrDist")]
        private extern static System.Single NxUtilLib_NxPointOBBSqrDist_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 point, [In()] ref NxVec3 center, [In()] ref NxVec3 extents, [In()] ref NxMat33 rot, NxVec3[] @params);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUtilLib_NxSegmentOBBSqrDist")]
        private extern static System.Single NxUtilLib_NxSegmentOBBSqrDist_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef segment, [In()] ref NxVec3 c0, [In()] ref NxVec3 e0, [In()] ref NxMat33 r0, System.Single[] t, NxVec3[] p);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUtilLib")]
        private extern static IntPtr new_NxUtilLib_INVOKE (bool do_override);

		
		protected NxUtilLib() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUtilLib)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUtilLib_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUtilLib_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUtilLib GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUtilLib)(obj.Target));
				}
			}
			return new NxUtilLib(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			NxBoxContainsPoint_0_delegatefield = new NxBoxContainsPoint_0_delegate(this.NxBoxContainsPoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxBoxContainsPoint_0_delegatefield));
			NxCreateBox_1_delegatefield = new NxCreateBox_1_delegate(this.NxCreateBox_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCreateBox_1_delegatefield));
			NxComputeBoxPlanes_2_delegatefield = new NxComputeBoxPlanes_2_delegate(this.NxComputeBoxPlanes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxPlanes_2_delegatefield));
			NxComputeBoxPoints_3_delegatefield = new NxComputeBoxPoints_3_delegate(this.NxComputeBoxPoints_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxPoints_3_delegatefield));
			NxComputeBoxVertexNormals_4_delegatefield = new NxComputeBoxVertexNormals_4_delegate(this.NxComputeBoxVertexNormals_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxVertexNormals_4_delegatefield));
			NxGetBoxEdges_5_delegatefield = new NxGetBoxEdges_5_delegate(this.NxGetBoxEdges_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetBoxEdges_5_delegatefield));
			NxGetBoxEdgesAxes_6_delegatefield = new NxGetBoxEdgesAxes_6_delegate(this.NxGetBoxEdgesAxes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetBoxEdgesAxes_6_delegatefield));
			NxGetBoxTriangles_7_delegatefield = new NxGetBoxTriangles_7_delegate(this.NxGetBoxTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetBoxTriangles_7_delegatefield));
			NxGetBoxLocalEdgeNormals_8_delegatefield = new NxGetBoxLocalEdgeNormals_8_delegate(this.NxGetBoxLocalEdgeNormals_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetBoxLocalEdgeNormals_8_delegatefield));
			NxComputeBoxWorldEdgeNormal_9_delegatefield = new NxComputeBoxWorldEdgeNormal_9_delegate(this.NxComputeBoxWorldEdgeNormal_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxWorldEdgeNormal_9_delegatefield));
			NxComputeCapsuleAroundBox_10_delegatefield = new NxComputeCapsuleAroundBox_10_delegate(this.NxComputeCapsuleAroundBox_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeCapsuleAroundBox_10_delegatefield));
			NxIsBoxAInsideBoxB_11_delegatefield = new NxIsBoxAInsideBoxB_11_delegate(this.NxIsBoxAInsideBoxB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxIsBoxAInsideBoxB_11_delegatefield));
			NxGetBoxQuads_12_delegatefield = new NxGetBoxQuads_12_delegate(this.NxGetBoxQuads_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetBoxQuads_12_delegatefield));
			NxBoxVertexToQuad_13_delegatefield = new NxBoxVertexToQuad_13_delegate(this.NxBoxVertexToQuad_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxBoxVertexToQuad_13_delegatefield));
			NxComputeBoxAroundCapsule_14_delegatefield = new NxComputeBoxAroundCapsule_14_delegate(this.NxComputeBoxAroundCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxAroundCapsule_14_delegatefield));
			NxSetFPUPrecision24_15_delegatefield = new NxSetFPUPrecision24_15_delegate(this.NxSetFPUPrecision24_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPUPrecision24_15_delegatefield));
			NxSetFPUPrecision53_16_delegatefield = new NxSetFPUPrecision53_16_delegate(this.NxSetFPUPrecision53_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPUPrecision53_16_delegatefield));
			NxSetFPUPrecision64_17_delegatefield = new NxSetFPUPrecision64_17_delegate(this.NxSetFPUPrecision64_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPUPrecision64_17_delegatefield));
			NxSetFPURoundingChop_18_delegatefield = new NxSetFPURoundingChop_18_delegate(this.NxSetFPURoundingChop_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPURoundingChop_18_delegatefield));
			NxSetFPURoundingUp_19_delegatefield = new NxSetFPURoundingUp_19_delegate(this.NxSetFPURoundingUp_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPURoundingUp_19_delegatefield));
			NxSetFPURoundingDown_20_delegatefield = new NxSetFPURoundingDown_20_delegate(this.NxSetFPURoundingDown_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPURoundingDown_20_delegatefield));
			NxSetFPURoundingNear_21_delegatefield = new NxSetFPURoundingNear_21_delegate(this.NxSetFPURoundingNear_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPURoundingNear_21_delegatefield));
			NxSetFPUExceptions_22_delegatefield = new NxSetFPUExceptions_22_delegate(this.NxSetFPUExceptions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetFPUExceptions_22_delegatefield));
			NxIntChop_23_delegatefield = new NxIntChop_23_delegate(this.NxIntChop_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxIntChop_23_delegatefield));
			NxIntFloor_24_delegatefield = new NxIntFloor_24_delegate(this.NxIntFloor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxIntFloor_24_delegatefield));
			NxIntCeil_25_delegatefield = new NxIntCeil_25_delegate(this.NxIntCeil_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxIntCeil_25_delegatefield));
			NxComputeDistanceSquared_26_delegatefield = new NxComputeDistanceSquared_26_delegate(this.NxComputeDistanceSquared_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeDistanceSquared_26_delegatefield));
			NxComputeSquareDistance_27_delegatefield = new NxComputeSquareDistance_27_delegate(this.NxComputeSquareDistance_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeSquareDistance_27_delegatefield));
			NxComputeSphere_28_delegatefield = new NxComputeSphere_28_delegate(this.NxComputeSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeSphere_28_delegatefield));
			NxFastComputeSphere_29_delegatefield = new NxFastComputeSphere_29_delegate(this.NxFastComputeSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxFastComputeSphere_29_delegatefield));
			NxMergeSpheres_30_delegatefield = new NxMergeSpheres_30_delegate(this.NxMergeSpheres_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxMergeSpheres_30_delegatefield));
			NxNormalToTangents_31_delegatefield = new NxNormalToTangents_31_delegate(this.NxNormalToTangents_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxNormalToTangents_31_delegatefield));
			NxDiagonalizeInertiaTensor_32_delegatefield = new NxDiagonalizeInertiaTensor_32_delegate(this.NxDiagonalizeInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxDiagonalizeInertiaTensor_32_delegatefield));
			NxFindRotationMatrix_33_delegatefield = new NxFindRotationMatrix_33_delegate(this.NxFindRotationMatrix_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxFindRotationMatrix_33_delegatefield));
			NxComputeBounds_34_delegatefield = new NxComputeBounds_34_delegate(this.NxComputeBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBounds_34_delegatefield));
			NxCrc32_35_delegatefield = new NxCrc32_35_delegate(this.NxCrc32_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCrc32_35_delegatefield));
			NxComputeSphereMass_36_delegatefield = new NxComputeSphereMass_36_delegate(this.NxComputeSphereMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeSphereMass_36_delegatefield));
			NxComputeSphereDensity_37_delegatefield = new NxComputeSphereDensity_37_delegate(this.NxComputeSphereDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeSphereDensity_37_delegatefield));
			NxComputeBoxMass_38_delegatefield = new NxComputeBoxMass_38_delegate(this.NxComputeBoxMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxMass_38_delegatefield));
			NxComputeBoxDensity_39_delegatefield = new NxComputeBoxDensity_39_delegate(this.NxComputeBoxDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxDensity_39_delegatefield));
			NxComputeEllipsoidMass_40_delegatefield = new NxComputeEllipsoidMass_40_delegate(this.NxComputeEllipsoidMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeEllipsoidMass_40_delegatefield));
			NxComputeEllipsoidDensity_41_delegatefield = new NxComputeEllipsoidDensity_41_delegate(this.NxComputeEllipsoidDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeEllipsoidDensity_41_delegatefield));
			NxComputeCylinderMass_42_delegatefield = new NxComputeCylinderMass_42_delegate(this.NxComputeCylinderMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeCylinderMass_42_delegatefield));
			NxComputeCylinderDensity_43_delegatefield = new NxComputeCylinderDensity_43_delegate(this.NxComputeCylinderDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeCylinderDensity_43_delegatefield));
			NxComputeConeMass_44_delegatefield = new NxComputeConeMass_44_delegate(this.NxComputeConeMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeConeMass_44_delegatefield));
			NxComputeConeDensity_45_delegatefield = new NxComputeConeDensity_45_delegate(this.NxComputeConeDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeConeDensity_45_delegatefield));
			NxComputeBoxInertiaTensor_46_delegatefield = new NxComputeBoxInertiaTensor_46_delegate(this.NxComputeBoxInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeBoxInertiaTensor_46_delegatefield));
			NxComputeSphereInertiaTensor_47_delegatefield = new NxComputeSphereInertiaTensor_47_delegate(this.NxComputeSphereInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxComputeSphereInertiaTensor_47_delegatefield));
			NxJointDesc_SetGlobalAnchor_48_delegatefield = new NxJointDesc_SetGlobalAnchor_48_delegate(this.NxJointDesc_SetGlobalAnchor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxJointDesc_SetGlobalAnchor_48_delegatefield));
			NxJointDesc_SetGlobalAxis_49_delegatefield = new NxJointDesc_SetGlobalAxis_49_delegate(this.NxJointDesc_SetGlobalAxis_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxJointDesc_SetGlobalAxis_49_delegatefield));
			NxBoxBoxIntersect_50_delegatefield = new NxBoxBoxIntersect_50_delegate(this.NxBoxBoxIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxBoxBoxIntersect_50_delegatefield));
			NxTriBoxIntersect_51_delegatefield = new NxTriBoxIntersect_51_delegate(this.NxTriBoxIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxTriBoxIntersect_51_delegatefield));
			NxSeparatingAxis_52_delegatefield = new NxSeparatingAxis_52_delegate(this.NxSeparatingAxis_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSeparatingAxis_52_delegatefield));
			NxSeparatingAxis_53_delegatefield = new NxSeparatingAxis_53_delegate(this.NxSeparatingAxis_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSeparatingAxis_53_delegatefield));
			NxSegmentPlaneIntersect_54_delegatefield = new NxSegmentPlaneIntersect_54_delegate(this.NxSegmentPlaneIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSegmentPlaneIntersect_54_delegatefield));
			NxRayPlaneIntersect_55_delegatefield = new NxRayPlaneIntersect_55_delegate(this.NxRayPlaneIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayPlaneIntersect_55_delegatefield));
			NxRaySphereIntersect_56_delegatefield = new NxRaySphereIntersect_56_delegate(this.NxRaySphereIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRaySphereIntersect_56_delegatefield));
			NxSegmentBoxIntersect_57_delegatefield = new NxSegmentBoxIntersect_57_delegate(this.NxSegmentBoxIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSegmentBoxIntersect_57_delegatefield));
			NxRayAABBIntersect_58_delegatefield = new NxRayAABBIntersect_58_delegate(this.NxRayAABBIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayAABBIntersect_58_delegatefield));
			NxRayAABBIntersect2_59_delegatefield = new NxRayAABBIntersect2_59_delegate(this.NxRayAABBIntersect2_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayAABBIntersect2_59_delegatefield));
			NxSegmentOBBIntersect_60_delegatefield = new NxSegmentOBBIntersect_60_delegate(this.NxSegmentOBBIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSegmentOBBIntersect_60_delegatefield));
			NxSegmentAABBIntersect_61_delegatefield = new NxSegmentAABBIntersect_61_delegate(this.NxSegmentAABBIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSegmentAABBIntersect_61_delegatefield));
			NxRayOBBIntersect_62_delegatefield = new NxRayOBBIntersect_62_delegate(this.NxRayOBBIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayOBBIntersect_62_delegatefield));
			NxRayCapsuleIntersect_63_delegatefield = new NxRayCapsuleIntersect_63_delegate(this.NxRayCapsuleIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayCapsuleIntersect_63_delegatefield));
			NxSweptSpheresIntersect_64_delegatefield = new NxSweptSpheresIntersect_64_delegate(this.NxSweptSpheresIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweptSpheresIntersect_64_delegatefield));
			NxRayTriIntersect_65_delegatefield = new NxRayTriIntersect_65_delegate(this.NxRayTriIntersect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxRayTriIntersect_65_delegatefield));
			NxBuildSmoothNormals_66_delegatefield = new NxBuildSmoothNormals_66_delegate(this.NxBuildSmoothNormals_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxBuildSmoothNormals_66_delegatefield));
			NxBuildSmoothNormals_67_delegatefield = new NxBuildSmoothNormals_67_delegate(this.NxBuildSmoothNormals_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxBuildSmoothNormals_67_delegatefield));
			NxSweepBoxCapsule_68_delegatefield = new NxSweepBoxCapsule_68_delegate(this.NxSweepBoxCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepBoxCapsule_68_delegatefield));
			NxSweepBoxSphere_69_delegatefield = new NxSweepBoxSphere_69_delegate(this.NxSweepBoxSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepBoxSphere_69_delegatefield));
			NxSweepCapsuleCapsule_70_delegatefield = new NxSweepCapsuleCapsule_70_delegate(this.NxSweepCapsuleCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepCapsuleCapsule_70_delegatefield));
			NxSweepSphereCapsule_71_delegatefield = new NxSweepSphereCapsule_71_delegate(this.NxSweepSphereCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepSphereCapsule_71_delegatefield));
			NxSweepBoxBox_72_delegatefield = new NxSweepBoxBox_72_delegate(this.NxSweepBoxBox_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepBoxBox_72_delegatefield));
			NxSweepBoxTriangles_73_delegatefield = new NxSweepBoxTriangles_73_delegate(this.NxSweepBoxTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepBoxTriangles_73_delegatefield));
			NxSweepBoxTriangles_74_delegatefield = new NxSweepBoxTriangles_74_delegate(this.NxSweepBoxTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepBoxTriangles_74_delegatefield));
			NxSweepCapsuleTriangles_75_delegatefield = new NxSweepCapsuleTriangles_75_delegate(this.NxSweepCapsuleTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepCapsuleTriangles_75_delegatefield));
			NxSweepCapsuleTriangles_76_delegatefield = new NxSweepCapsuleTriangles_76_delegate(this.NxSweepCapsuleTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSweepCapsuleTriangles_76_delegatefield));
			NxPointOBBSqrDist_77_delegatefield = new NxPointOBBSqrDist_77_delegate(this.NxPointOBBSqrDist_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxPointOBBSqrDist_77_delegatefield));
			NxSegmentOBBSqrDist_78_delegatefield = new NxSegmentOBBSqrDist_78_delegate(this.NxSegmentOBBSqrDist_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSegmentOBBSqrDist_78_delegatefield));
			return list;
		}
	}
}
