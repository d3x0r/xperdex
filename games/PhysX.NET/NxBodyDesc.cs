//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxBodyDesc : DoxyBindObject
	{
		
		internal NxBodyDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>position and orientation of the center of mass </summary>
		public NxMat34 massLocalPose
		{
			get
			{
				NxMat34 value = get_NxBodyDesc_massLocalPose_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_massLocalPose_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Diagonal mass space inertia tensor in bodies mass frame. </summary>
		public NxVec3 massSpaceInertia
		{
			get
			{
				NxVec3 value = get_NxBodyDesc_massSpaceInertia_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_massSpaceInertia_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Mass of body. </summary>
		public float mass
		{
			get
			{
				float value = get_NxBodyDesc_mass_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_mass_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Linear Velocity of the body. </summary>
		public NxVec3 linearVelocity
		{
			get
			{
				NxVec3 value = get_NxBodyDesc_linearVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_linearVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Angular velocity of the body. </summary>
		public NxVec3 angularVelocity
		{
			get
			{
				NxVec3 value = get_NxBodyDesc_angularVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_angularVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The body's initial wake up counter. </summary>
		public float wakeUpCounter
		{
			get
			{
				float value = get_NxBodyDesc_wakeUpCounter_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_wakeUpCounter_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Linear damping applied to the body. </summary>
		public float linearDamping
		{
			get
			{
				float value = get_NxBodyDesc_linearDamping_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_linearDamping_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Angular damping applied to the body. </summary>
		public float angularDamping
		{
			get
			{
				float value = get_NxBodyDesc_angularDamping_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_angularDamping_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum allowed angular velocity. </summary>
		public float maxAngularVelocity
		{
			get
			{
				float value = get_NxBodyDesc_maxAngularVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_maxAngularVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>When CCD is globally enabled, it is still not performed if the motion distance of all points on the body is below this threshold. </summary>
		public float CCDMotionThreshold
		{
			get
			{
				float value = get_NxBodyDesc_CCDMotionThreshold_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_CCDMotionThreshold_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Combination of NxBodyFlag flags. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxBodyDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum linear velocity at which body can go to sleep. </summary>
		public float sleepLinearVelocity
		{
			get
			{
				float value = get_NxBodyDesc_sleepLinearVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_sleepLinearVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum angular velocity at which body can go to sleep. </summary>
		public float sleepAngularVelocity
		{
			get
			{
				float value = get_NxBodyDesc_sleepAngularVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_sleepAngularVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Number of solver iterations performed when processing joint/contacts connected to this body. </summary>
		public uint solverIterationCount
		{
			get
			{
				uint value = get_NxBodyDesc_solverIterationCount_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_solverIterationCount_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Threshold for the energy-based sleeping algorithm. Only used when the NX_BF_ENERGY_SLEEP_TEST flag is set. </summary>
		public float sleepEnergyThreshold
		{
			get
			{
				float value = get_NxBodyDesc_sleepEnergyThreshold_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_sleepEnergyThreshold_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Damping factor for bodies that are about to sleep. </summary>
		public float sleepDamping
		{
			get
			{
				float value = get_NxBodyDesc_sleepDamping_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_sleepDamping_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The force threshold for contact reports. </summary>
		public float contactReportThreshold
		{
			get
			{
				float value = get_NxBodyDesc_contactReportThreshold_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBodyDesc_contactReportThreshold_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor sets to default, mass == 0 (an immediate call to isValid() will return false). </summary>
		public NxBodyDesc() : 
				base(new_NxBodyDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default, mass == 0 (an immediate call to isValid() will return false). </summary>
		public void setToDefault()
		{
			NxBodyDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxBodyDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_massLocalPose")]
        private extern static void set_NxBodyDesc_massLocalPose_INVOKE (HandleRef classPointer, NxMat34 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_massLocalPose")]
        private extern static NxMat34 get_NxBodyDesc_massLocalPose_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_massSpaceInertia")]
        private extern static void set_NxBodyDesc_massSpaceInertia_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_massSpaceInertia")]
        private extern static NxVec3 get_NxBodyDesc_massSpaceInertia_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_mass")]
        private extern static void set_NxBodyDesc_mass_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_mass")]
        private extern static System.Single get_NxBodyDesc_mass_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_linearVelocity")]
        private extern static void set_NxBodyDesc_linearVelocity_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_linearVelocity")]
        private extern static NxVec3 get_NxBodyDesc_linearVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_angularVelocity")]
        private extern static void set_NxBodyDesc_angularVelocity_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_angularVelocity")]
        private extern static NxVec3 get_NxBodyDesc_angularVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_wakeUpCounter")]
        private extern static void set_NxBodyDesc_wakeUpCounter_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_wakeUpCounter")]
        private extern static System.Single get_NxBodyDesc_wakeUpCounter_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_linearDamping")]
        private extern static void set_NxBodyDesc_linearDamping_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_linearDamping")]
        private extern static System.Single get_NxBodyDesc_linearDamping_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_angularDamping")]
        private extern static void set_NxBodyDesc_angularDamping_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_angularDamping")]
        private extern static System.Single get_NxBodyDesc_angularDamping_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_maxAngularVelocity")]
        private extern static void set_NxBodyDesc_maxAngularVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_maxAngularVelocity")]
        private extern static System.Single get_NxBodyDesc_maxAngularVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_CCDMotionThreshold")]
        private extern static void set_NxBodyDesc_CCDMotionThreshold_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_CCDMotionThreshold")]
        private extern static System.Single get_NxBodyDesc_CCDMotionThreshold_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_flags")]
        private extern static void set_NxBodyDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_flags")]
        private extern static System.UInt32 get_NxBodyDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_sleepLinearVelocity")]
        private extern static void set_NxBodyDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_sleepLinearVelocity")]
        private extern static System.Single get_NxBodyDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_sleepAngularVelocity")]
        private extern static void set_NxBodyDesc_sleepAngularVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_sleepAngularVelocity")]
        private extern static System.Single get_NxBodyDesc_sleepAngularVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_solverIterationCount")]
        private extern static void set_NxBodyDesc_solverIterationCount_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_solverIterationCount")]
        private extern static System.UInt32 get_NxBodyDesc_solverIterationCount_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_sleepEnergyThreshold")]
        private extern static void set_NxBodyDesc_sleepEnergyThreshold_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_sleepEnergyThreshold")]
        private extern static System.Single get_NxBodyDesc_sleepEnergyThreshold_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_sleepDamping")]
        private extern static void set_NxBodyDesc_sleepDamping_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_sleepDamping")]
        private extern static System.Single get_NxBodyDesc_sleepDamping_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBodyDesc_contactReportThreshold")]
        private extern static void set_NxBodyDesc_contactReportThreshold_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBodyDesc_contactReportThreshold")]
        private extern static System.Single get_NxBodyDesc_contactReportThreshold_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBodyDesc")]
        private extern static IntPtr new_NxBodyDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBodyDesc_setToDefault")]
        private extern static void NxBodyDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBodyDesc_isValid")]
        private extern static System.Boolean NxBodyDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxBodyDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxBodyDesc)(obj.Target));
				}
			}
			return new NxBodyDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
