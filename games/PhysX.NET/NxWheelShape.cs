//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxWheelShape : NxShape
	{
		
		internal NxWheelShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Saves the state of the shape object to a descriptor. </summary>
		/// <param name="desc">Descriptor to retrieve shape properties.</param>
		public virtual void saveToDesc(NxWheelShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxWheelShapeDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>distance from wheel axle to a point on the contact surface. </summary>
		/// <param name="radius">The new wheel radius. Range: (0,inf)</param>
		public virtual void setRadius(float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setRadius_INVOKE(ClassPointer, doSetFunctionPointers, radius);
		}
		
		private void setRadius_virtual(float radius)
		{
			setRadius(radius);
		}
		
		delegate void setRadius_1_delegate(float radius);
		
		
		
		
		
		
		private setRadius_1_delegate setRadius_1_delegatefield;
		
		/// <summary>maximum extension distance of suspension along shape's -Y axis. The minimum extension is always 0. </summary>
		/// <param name="travel">The suspension travel. Range: [0,inf)</param>
		public virtual void setSuspensionTravel(float travel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setSuspensionTravel_INVOKE(ClassPointer, doSetFunctionPointers, travel);
		}
		
		private void setSuspensionTravel_virtual(float travel)
		{
			setSuspensionTravel(travel);
		}
		
		delegate void setSuspensionTravel_2_delegate(float travel);
		
		
		
		
		
		
		private setSuspensionTravel_2_delegate setSuspensionTravel_2_delegatefield;
		
		/// <summary>distance from wheel axle to a point on the contact surface. </summary>
		public virtual float getRadius()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getRadius_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRadius_virtual()
		{
			return getRadius();
		}
		
		delegate float getRadius_3_delegate();
		
		
		
		
		
		
		private getRadius_3_delegate getRadius_3_delegatefield;
		
		/// <summary>maximum extension distance of suspension along shape's -Y axis. The minimum extension is always 0. </summary>
		public virtual float getSuspensionTravel()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getSuspensionTravel_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSuspensionTravel_virtual()
		{
			return getSuspensionTravel();
		}
		
		delegate float getSuspensionTravel_4_delegate();
		
		
		
		
		
		
		private getSuspensionTravel_4_delegate getSuspensionTravel_4_delegatefield;
		
		/// <summary>data intended for car wheel suspension effects. </summary>
		/// <param name="spring">Suspension spring properties. Range: .spring [0,inf)Range: .damper [0,inf)Range: .targetValue [0,1]</param>
		public virtual void setSuspension(NxSpringDesc spring)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setSuspension_INVOKE(ClassPointer, doSetFunctionPointers, (spring!=null ? spring.ClassPointer : NullRef));
		}
		
		private void setSuspension_virtual(IntPtr spring)
		{
			setSuspension(NxSpringDesc.GetClass(spring));
		}
		
		delegate void setSuspension_5_delegate(IntPtr spring);
		
		
		
		
		
		
		private setSuspension_5_delegate setSuspension_5_delegatefield;
		
		/// <summary>cubic Hermite spline coefficients describing the longitudinal tire force curve. </summary>
		/// <param name="tireFunc">Description of the longitudinal tire forces. Range: See NxTireFunctionDesc</param>
		public virtual void setLongitudalTireForceFunction(NxTireFunctionDesc tireFunc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setLongitudalTireForceFunction_INVOKE(ClassPointer, doSetFunctionPointers, (tireFunc!=null ? tireFunc.ClassPointer : NullRef));
		}
		
		private void setLongitudalTireForceFunction_virtual(IntPtr tireFunc)
		{
			setLongitudalTireForceFunction(NxTireFunctionDesc.GetClass(tireFunc));
		}
		
		delegate void setLongitudalTireForceFunction_6_delegate(IntPtr tireFunc);
		
		
		
		
		
		
		private setLongitudalTireForceFunction_6_delegate setLongitudalTireForceFunction_6_delegatefield;
		
		/// <summary>cubic Hermite spline coefficients describing the lateral tire force curve. </summary>
		/// <param name="tireFunc">Description of the lateral tire forces. Range: See NxTireFunctionDesc</param>
		public virtual void setLateralTireForceFunction(NxTireFunctionDesc tireFunc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setLateralTireForceFunction_INVOKE(ClassPointer, doSetFunctionPointers, (tireFunc!=null ? tireFunc.ClassPointer : NullRef));
		}
		
		private void setLateralTireForceFunction_virtual(IntPtr tireFunc)
		{
			setLateralTireForceFunction(NxTireFunctionDesc.GetClass(tireFunc));
		}
		
		delegate void setLateralTireForceFunction_7_delegate(IntPtr tireFunc);
		
		
		
		
		
		
		private setLateralTireForceFunction_7_delegate setLateralTireForceFunction_7_delegatefield;
		
		/// <summary>inverse mass of the wheel. Determines the wheel velocity that wheel torques can achieve. </summary>
		/// <param name="invMass">The inverse wheel mass. Range: (0,inf)</param>
		public virtual void setInverseWheelMass(float invMass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setInverseWheelMass_INVOKE(ClassPointer, doSetFunctionPointers, invMass);
		}
		
		private void setInverseWheelMass_virtual(float invMass)
		{
			setInverseWheelMass(invMass);
		}
		
		delegate void setInverseWheelMass_8_delegate(float invMass);
		
		
		
		
		
		
		private setInverseWheelMass_8_delegate setInverseWheelMass_8_delegatefield;
		
		/// <summary>flags from NxWheelShapeFlags </summary>
		/// <param name="flags">The new wheel flags.</param>
		public virtual void setWheelFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setWheelFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setWheelFlags_virtual(uint flags)
		{
			setWheelFlags(flags);
		}
		
		delegate void setWheelFlags_9_delegate(uint flags);
		
		
		
		
		
		
		private setWheelFlags_9_delegate setWheelFlags_9_delegatefield;
		
		/// <summary>data intended for car wheel suspension effects. </summary>
		public virtual NxSpringDesc getSuspension()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSpringDesc.GetClass(NxWheelShape_getSuspension_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getSuspension_virtual()
		{
			return getSuspension().ClassPointer.Handle;
		}
		
		delegate IntPtr getSuspension_10_delegate();
		
		
		
		
		
		
		private getSuspension_10_delegate getSuspension_10_delegatefield;
		
		/// <summary>cubic Hermite spline coefficients describing the longitudinal tire force curve. </summary>
		public virtual NxTireFunctionDesc getLongitudalTireForceFunction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTireFunctionDesc.GetClass(NxWheelShape_getLongitudalTireForceFunction_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getLongitudalTireForceFunction_virtual()
		{
			return getLongitudalTireForceFunction().ClassPointer.Handle;
		}
		
		delegate IntPtr getLongitudalTireForceFunction_11_delegate();
		
		
		
		
		
		
		private getLongitudalTireForceFunction_11_delegate getLongitudalTireForceFunction_11_delegatefield;
		
		/// <summary>cubic Hermite spline coefficients describing the lateral tire force curve. </summary>
		public virtual NxTireFunctionDesc getLateralTireForceFunction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTireFunctionDesc.GetClass(NxWheelShape_getLateralTireForceFunction_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getLateralTireForceFunction_virtual()
		{
			return getLateralTireForceFunction().ClassPointer.Handle;
		}
		
		delegate IntPtr getLateralTireForceFunction_12_delegate();
		
		
		
		
		
		
		private getLateralTireForceFunction_12_delegate getLateralTireForceFunction_12_delegatefield;
		
		/// <summary>inverse mass of the wheel. Determines the wheel velocity that wheel torques can achieve. </summary>
		public virtual float getInverseWheelMass()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getInverseWheelMass_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getInverseWheelMass_virtual()
		{
			return getInverseWheelMass();
		}
		
		delegate float getInverseWheelMass_13_delegate();
		
		
		
		
		
		
		private getInverseWheelMass_13_delegate getInverseWheelMass_13_delegatefield;
		
		/// <summary>flags from NxWheelShapeFlags </summary>
		public virtual uint getWheelFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getWheelFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getWheelFlags_virtual()
		{
			return getWheelFlags();
		}
		
		delegate uint getWheelFlags_14_delegate();
		
		
		
		
		
		
		private getWheelFlags_14_delegate getWheelFlags_14_delegatefield;
		
		/// <summary>Sum engine torque on the wheel axle. Positive or negative depending on direction. </summary>
		/// <param name="torque">The motor torque to apply. Range: (-inf,inf)</param>
		public virtual void setMotorTorque(float torque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setMotorTorque_INVOKE(ClassPointer, doSetFunctionPointers, torque);
		}
		
		private void setMotorTorque_virtual(float torque)
		{
			setMotorTorque(torque);
		}
		
		delegate void setMotorTorque_15_delegate(float torque);
		
		
		
		
		
		
		private setMotorTorque_15_delegate setMotorTorque_15_delegatefield;
		
		/// <summary>Must be nonnegative. Very large values should lock wheel but should be stable. </summary>
		/// <param name="torque">The brake torque to apply. Range: [0,inf)</param>
		public virtual void setBrakeTorque(float torque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setBrakeTorque_INVOKE(ClassPointer, doSetFunctionPointers, torque);
		}
		
		private void setBrakeTorque_virtual(float torque)
		{
			setBrakeTorque(torque);
		}
		
		delegate void setBrakeTorque_16_delegate(float torque);
		
		
		
		
		
		
		private setBrakeTorque_16_delegate setBrakeTorque_16_delegatefield;
		
		/// <summary>steering angle, around shape Y axis. </summary>
		/// <param name="angle">The new steering angle(in radians). Range: (-PI,PI)</param>
		public virtual void setSteerAngle(float angle)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setSteerAngle_INVOKE(ClassPointer, doSetFunctionPointers, angle);
		}
		
		private void setSteerAngle_virtual(float angle)
		{
			setSteerAngle(angle);
		}
		
		delegate void setSteerAngle_17_delegate(float angle);
		
		
		
		
		
		
		private setSteerAngle_17_delegate setSteerAngle_17_delegatefield;
		
		/// <summary>Sum engine torque on the wheel axle. Positive or negative depending on direction. </summary>
		public virtual float getMotorTorque()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getMotorTorque_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getMotorTorque_virtual()
		{
			return getMotorTorque();
		}
		
		delegate float getMotorTorque_18_delegate();
		
		
		
		
		
		
		private getMotorTorque_18_delegate getMotorTorque_18_delegatefield;
		
		/// <summary>Must be positive. Very large values should lock wheel but should be stable. </summary>
		public virtual float getBrakeTorque()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getBrakeTorque_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getBrakeTorque_virtual()
		{
			return getBrakeTorque();
		}
		
		delegate float getBrakeTorque_19_delegate();
		
		
		
		
		
		
		private getBrakeTorque_19_delegate getBrakeTorque_19_delegatefield;
		
		/// <summary>steering angle, around shape Y axis. </summary>
		public virtual float getSteerAngle()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getSteerAngle_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSteerAngle_virtual()
		{
			return getSteerAngle();
		}
		
		delegate float getSteerAngle_20_delegate();
		
		
		
		
		
		
		private getSteerAngle_20_delegate getSteerAngle_20_delegatefield;
		
		/// <summary>Current axle rotation speed NOTE: NX_WF_AXLE_SPEED_OVERRIDE flag must be raised for this to have effect! </summary>
		/// <param name="speed">The new axle speed. Range: (-inf,inf)</param>
		public virtual void setAxleSpeed(float speed)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setAxleSpeed_INVOKE(ClassPointer, doSetFunctionPointers, speed);
		}
		
		private void setAxleSpeed_virtual(float speed)
		{
			setAxleSpeed(speed);
		}
		
		delegate void setAxleSpeed_21_delegate(float speed);
		
		
		
		
		
		
		private setAxleSpeed_21_delegate setAxleSpeed_21_delegatefield;
		
		/// <summary>Current axle rotation speed. </summary>
		public virtual float getAxleSpeed()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxWheelShape_getAxleSpeed_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAxleSpeed_virtual()
		{
			return getAxleSpeed();
		}
		
		delegate float getAxleSpeed_22_delegate();
		
		
		
		
		
		
		private getAxleSpeed_22_delegate getAxleSpeed_22_delegatefield;
		
		/// <summary>Return contact information for the wheel. </summary>
		/// <param name="dest">Description of the contact. (only valid if there is a contact) </param>
		public virtual NxShape getContact(NxWheelContactData dest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxWheelShape_getContact_INVOKE(ClassPointer, doSetFunctionPointers, (dest!=null ? dest.ClassPointer : NullRef)));
		}
		
		private IntPtr getContact_virtual(IntPtr dest)
		{
			return getContact(NxWheelContactData.GetClass(dest)).ClassPointer.Handle;
		}
		
		delegate IntPtr getContact_23_delegate(IntPtr dest);
		
		
		
		
		
		
		private getContact_23_delegate getContact_23_delegatefield;
		
		/// <summary>Sets a callback function for wheel contact modification. NULL deactivates this functionality for the WheelShape. </summary>
		/// <param name="callback">The callback function</param>
		public virtual void setUserWheelContactModify(NxUserWheelContactModify callback)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxWheelShape_setUserWheelContactModify_INVOKE(ClassPointer, doSetFunctionPointers, (callback!=null ? callback.ClassPointer : NullRef));
		}
		
		private void setUserWheelContactModify_virtual(IntPtr callback)
		{
			setUserWheelContactModify(NxUserWheelContactModify.GetClass(callback));
		}
		
		delegate void setUserWheelContactModify_24_delegate(IntPtr callback);
		
		
		
		
		
		
		private setUserWheelContactModify_24_delegate setUserWheelContactModify_24_delegatefield;
		
		/// <summary>Returns the callback function used for wheel contact modification on the WheelShape. </summary>
		public virtual NxUserWheelContactModify getUserWheelContactModify()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserWheelContactModify.GetClass(NxWheelShape_getUserWheelContactModify_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getUserWheelContactModify_virtual()
		{
			return getUserWheelContactModify().ClassPointer.Handle;
		}
		
		delegate IntPtr getUserWheelContactModify_25_delegate();
		
		
		
		
		
		
		private getUserWheelContactModify_25_delegate getUserWheelContactModify_25_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_saveToDesc")]
        private extern static void NxWheelShape_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setRadius")]
        private extern static void NxWheelShape_setRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setSuspensionTravel")]
        private extern static void NxWheelShape_setSuspensionTravel_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single travel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getRadius")]
        private extern static System.Single NxWheelShape_getRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getSuspensionTravel")]
        private extern static System.Single NxWheelShape_getSuspensionTravel_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setSuspension")]
        private extern static void NxWheelShape_setSuspension_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef spring);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setLongitudalTireForceFunction")]
        private extern static void NxWheelShape_setLongitudalTireForceFunction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef tireFunc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setLateralTireForceFunction")]
        private extern static void NxWheelShape_setLateralTireForceFunction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef tireFunc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setInverseWheelMass")]
        private extern static void NxWheelShape_setInverseWheelMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single invMass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setWheelFlags")]
        private extern static void NxWheelShape_setWheelFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getSuspension")]
        private extern static IntPtr NxWheelShape_getSuspension_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getLongitudalTireForceFunction")]
        private extern static IntPtr NxWheelShape_getLongitudalTireForceFunction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getLateralTireForceFunction")]
        private extern static IntPtr NxWheelShape_getLateralTireForceFunction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getInverseWheelMass")]
        private extern static System.Single NxWheelShape_getInverseWheelMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getWheelFlags")]
        private extern static System.UInt32 NxWheelShape_getWheelFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setMotorTorque")]
        private extern static void NxWheelShape_setMotorTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single torque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setBrakeTorque")]
        private extern static void NxWheelShape_setBrakeTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single torque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setSteerAngle")]
        private extern static void NxWheelShape_setSteerAngle_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single angle);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getMotorTorque")]
        private extern static System.Single NxWheelShape_getMotorTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getBrakeTorque")]
        private extern static System.Single NxWheelShape_getBrakeTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getSteerAngle")]
        private extern static System.Single NxWheelShape_getSteerAngle_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setAxleSpeed")]
        private extern static void NxWheelShape_setAxleSpeed_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single speed);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getAxleSpeed")]
        private extern static System.Single NxWheelShape_getAxleSpeed_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getContact")]
        private extern static IntPtr NxWheelShape_getContact_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef dest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_setUserWheelContactModify")]
        private extern static void NxWheelShape_setUserWheelContactModify_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef callback);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShape_getUserWheelContactModify")]
        private extern static IntPtr NxWheelShape_getUserWheelContactModify_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxWheelShape")]
        private extern static IntPtr new_NxWheelShape_INVOKE (bool do_override);

		
		protected NxWheelShape() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxWheelShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxWheelShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxWheelShape_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxWheelShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxWheelShape)(obj.Target));
				}
			}
			return new NxWheelShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			setRadius_1_delegatefield = new setRadius_1_delegate(this.setRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRadius_1_delegatefield));
			setSuspensionTravel_2_delegatefield = new setSuspensionTravel_2_delegate(this.setSuspensionTravel_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSuspensionTravel_2_delegatefield));
			getRadius_3_delegatefield = new getRadius_3_delegate(this.getRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRadius_3_delegatefield));
			getSuspensionTravel_4_delegatefield = new getSuspensionTravel_4_delegate(this.getSuspensionTravel_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSuspensionTravel_4_delegatefield));
			setSuspension_5_delegatefield = new setSuspension_5_delegate(this.setSuspension_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSuspension_5_delegatefield));
			setLongitudalTireForceFunction_6_delegatefield = new setLongitudalTireForceFunction_6_delegate(this.setLongitudalTireForceFunction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLongitudalTireForceFunction_6_delegatefield));
			setLateralTireForceFunction_7_delegatefield = new setLateralTireForceFunction_7_delegate(this.setLateralTireForceFunction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLateralTireForceFunction_7_delegatefield));
			setInverseWheelMass_8_delegatefield = new setInverseWheelMass_8_delegate(this.setInverseWheelMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setInverseWheelMass_8_delegatefield));
			setWheelFlags_9_delegatefield = new setWheelFlags_9_delegate(this.setWheelFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setWheelFlags_9_delegatefield));
			getSuspension_10_delegatefield = new getSuspension_10_delegate(this.getSuspension_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSuspension_10_delegatefield));
			getLongitudalTireForceFunction_11_delegatefield = new getLongitudalTireForceFunction_11_delegate(this.getLongitudalTireForceFunction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLongitudalTireForceFunction_11_delegatefield));
			getLateralTireForceFunction_12_delegatefield = new getLateralTireForceFunction_12_delegate(this.getLateralTireForceFunction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLateralTireForceFunction_12_delegatefield));
			getInverseWheelMass_13_delegatefield = new getInverseWheelMass_13_delegate(this.getInverseWheelMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getInverseWheelMass_13_delegatefield));
			getWheelFlags_14_delegatefield = new getWheelFlags_14_delegate(this.getWheelFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWheelFlags_14_delegatefield));
			setMotorTorque_15_delegatefield = new setMotorTorque_15_delegate(this.setMotorTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMotorTorque_15_delegatefield));
			setBrakeTorque_16_delegatefield = new setBrakeTorque_16_delegate(this.setBrakeTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setBrakeTorque_16_delegatefield));
			setSteerAngle_17_delegatefield = new setSteerAngle_17_delegate(this.setSteerAngle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSteerAngle_17_delegatefield));
			getMotorTorque_18_delegatefield = new getMotorTorque_18_delegate(this.getMotorTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMotorTorque_18_delegatefield));
			getBrakeTorque_19_delegatefield = new getBrakeTorque_19_delegate(this.getBrakeTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getBrakeTorque_19_delegatefield));
			getSteerAngle_20_delegatefield = new getSteerAngle_20_delegate(this.getSteerAngle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSteerAngle_20_delegatefield));
			setAxleSpeed_21_delegatefield = new setAxleSpeed_21_delegate(this.setAxleSpeed_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAxleSpeed_21_delegatefield));
			getAxleSpeed_22_delegatefield = new getAxleSpeed_22_delegate(this.getAxleSpeed_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAxleSpeed_22_delegatefield));
			getContact_23_delegatefield = new getContact_23_delegate(this.getContact_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getContact_23_delegatefield));
			setUserWheelContactModify_24_delegatefield = new setUserWheelContactModify_24_delegate(this.setUserWheelContactModify_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setUserWheelContactModify_24_delegatefield));
			getUserWheelContactModify_25_delegatefield = new getUserWheelContactModify_25_delegate(this.getUserWheelContactModify_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getUserWheelContactModify_25_delegatefield));
			return list;
		}
	}
}
