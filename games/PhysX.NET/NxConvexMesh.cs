//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxConvexMesh : DoxyBindObject
	{
		
		internal NxConvexMesh(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Saves the mesh to a descriptor. </summary>
		/// <param name="desc">Descriptor to store the state of the convex mesh into.</param>
		public virtual bool saveToDesc(NxConvexMeshDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxConvexMeshDesc.GetClass(desc));
		}
		
		delegate bool saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Not used. </summary>
		public virtual uint getSubmeshCount()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getSubmeshCount_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getSubmeshCount_virtual()
		{
			return getSubmeshCount();
		}
		
		delegate uint getSubmeshCount_1_delegate();
		
		
		
		
		
		
		private getSubmeshCount_1_delegate getSubmeshCount_1_delegatefield;
		
		/// <summary>Retrieves the number of elements of a given internal array. </summary>
		/// <param name="submeshIndex">Reserved for future use, must be 0. </param>
		/// <param name="intArray">The internal array size to retrieve (e.g. triangles, vertices etc). See NxInternalArray.</param>
		public virtual uint getCount(uint submeshIndex, NxInternalArray intArray)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getCount_INVOKE(ClassPointer, doSetFunctionPointers, submeshIndex, intArray);
		}
		
		private uint getCount_virtual(uint submeshIndex, NxInternalArray intArray)
		{
			return getCount(submeshIndex, intArray);
		}
		
		delegate uint getCount_2_delegate(uint submeshIndex, NxInternalArray intArray);
		
		
		
		
		
		
		private getCount_2_delegate getCount_2_delegatefield;
		
		/// <summary>Retrieves the format of a given internal array. </summary>
		/// <param name="submeshIndex">Reserved for future use, must be 0. </param>
		/// <param name="intArray">The internal array format to retrieve (e.g. triangles, vertices etc). See NxInternalArray.</param>
		public virtual NxInternalFormat getFormat(uint submeshIndex, NxInternalArray intArray)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getFormat_INVOKE(ClassPointer, doSetFunctionPointers, submeshIndex, intArray);
		}
		
		private NxInternalFormat getFormat_virtual(uint submeshIndex, NxInternalArray intArray)
		{
			return getFormat(submeshIndex, intArray);
		}
		
		delegate NxInternalFormat getFormat_3_delegate(uint submeshIndex, NxInternalArray intArray);
		
		
		
		
		
		
		private getFormat_3_delegate getFormat_3_delegatefield;
		
		/// <summary>Retrieves the base pointer of a given internal array. </summary>
		/// <param name="submeshIndex">Reserved for future use, must be 0. </param>
		/// <param name="intArray">The internal array pointer to retrieve (e.g. triangles, vertices etc). See NxInternalArray.</param>
		public virtual System.IntPtr getBase(uint submeshIndex, NxInternalArray intArray)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getBase_INVOKE(ClassPointer, doSetFunctionPointers, submeshIndex, intArray);
		}
		
		private System.IntPtr getBase_virtual(uint submeshIndex, NxInternalArray intArray)
		{
			return getBase(submeshIndex, intArray);
		}
		
		delegate System.IntPtr getBase_4_delegate(uint submeshIndex, NxInternalArray intArray);
		
		
		
		
		
		
		private getBase_4_delegate getBase_4_delegatefield;
		
		/// <summary>Retrieves the stride value of a given internal array. </summary>
		/// <param name="submeshIndex">Reserved for future use, must be 0. </param>
		/// <param name="intArray">The internal array stride to retrieve (e.g. triangles, vertices etc). See NxInternalArray.</param>
		public virtual uint getStride(uint submeshIndex, NxInternalArray intArray)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getStride_INVOKE(ClassPointer, doSetFunctionPointers, submeshIndex, intArray);
		}
		
		private uint getStride_virtual(uint submeshIndex, NxInternalArray intArray)
		{
			return getStride(submeshIndex, intArray);
		}
		
		delegate uint getStride_5_delegate(uint submeshIndex, NxInternalArray intArray);
		
		
		
		
		
		
		private getStride_5_delegate getStride_5_delegatefield;
		
		/// <summary>Load the contents of this mesh from the provided stream. </summary>
		/// <param name="stream">Stream to load this mesh from. See NxStream. </param>
		public virtual bool load(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_load_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private bool load_virtual(IntPtr stream)
		{
			return load(NxStream.GetClass(stream));
		}
		
		delegate bool load_6_delegate(IntPtr stream);
		
		
		
		
		
		
		private load_6_delegate load_6_delegatefield;
		
		/// <summary>Returns the reference count for shared meshes. </summary>
		public virtual uint getReferenceCount()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getReferenceCount_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getReferenceCount_virtual()
		{
			return getReferenceCount();
		}
		
		delegate uint getReferenceCount_7_delegate();
		
		
		
		
		
		
		private getReferenceCount_7_delegate getReferenceCount_7_delegatefield;
		
		/// <summary>Returns the mass properties of the mesh. </summary>
		/// <param name="mass">The mass of the mesh. </param>
		/// <param name="localInertia">The inertia tensor in mesh local space. </param>
		/// <param name="localCenterOfMass">Position of center of mass in mesh local space.</param>
		public virtual void getMassInformation(ref float mass, ref NxMat33 localInertia, ref NxVec3 localCenterOfMass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxConvexMesh_getMassInformation_INVOKE(ClassPointer, doSetFunctionPointers, ref mass, ref localInertia, ref localCenterOfMass);
		}
		
		private void getMassInformation_virtual([In()] [Out()] ref float mass, [In()] [Out()] ref NxMat33 localInertia, [In()] [Out()] ref NxVec3 localCenterOfMass)
		{
			getMassInformation(ref mass, ref localInertia, ref localCenterOfMass);
		}
		
		delegate void getMassInformation_8_delegate([In()] [Out()] ref float mass, [In()] [Out()] ref NxMat33 localInertia, [In()] [Out()] ref NxVec3 localCenterOfMass);
		
		
		
		
		
		
		private getMassInformation_8_delegate getMassInformation_8_delegatefield;
		
		/// <summary></summary>
		public virtual System.IntPtr getInternal()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh_getInternal_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private System.IntPtr getInternal_virtual()
		{
			return getInternal();
		}
		
		delegate System.IntPtr getInternal_9_delegate();
		
		
		
		
		
		
		private getInternal_9_delegate getInternal_9_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_saveToDesc")]
        private extern static System.Boolean NxConvexMesh_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getSubmeshCount")]
        private extern static System.UInt32 NxConvexMesh_getSubmeshCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getCount")]
        private extern static System.UInt32 NxConvexMesh_getCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 submeshIndex, NxInternalArray intArray);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getFormat")]
        private extern static NxInternalFormat NxConvexMesh_getFormat_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 submeshIndex, NxInternalArray intArray);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getBase")]
        private extern static System.IntPtr NxConvexMesh_getBase_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 submeshIndex, NxInternalArray intArray);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getStride")]
        private extern static System.UInt32 NxConvexMesh_getStride_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 submeshIndex, NxInternalArray intArray);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_load")]
        private extern static System.Boolean NxConvexMesh_load_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getReferenceCount")]
        private extern static System.UInt32 NxConvexMesh_getReferenceCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getMassInformation")]
        private extern static void NxConvexMesh_getMassInformation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single mass, [In()] [Out()] ref NxMat33 localInertia, [In()] [Out()] ref NxVec3 localCenterOfMass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMesh_getInternal")]
        private extern static System.IntPtr NxConvexMesh_getInternal_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxConvexMesh")]
        private extern static IntPtr new_NxConvexMesh_INVOKE (bool do_override);

		
		protected NxConvexMesh() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxConvexMesh)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxConvexMesh_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxConvexMesh_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxConvexMesh GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxConvexMesh)(obj.Target));
				}
			}
			return new NxConvexMesh(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getSubmeshCount_1_delegatefield = new getSubmeshCount_1_delegate(this.getSubmeshCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSubmeshCount_1_delegatefield));
			getCount_2_delegatefield = new getCount_2_delegate(this.getCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCount_2_delegatefield));
			getFormat_3_delegatefield = new getFormat_3_delegate(this.getFormat_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFormat_3_delegatefield));
			getBase_4_delegatefield = new getBase_4_delegate(this.getBase_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getBase_4_delegatefield));
			getStride_5_delegatefield = new getStride_5_delegate(this.getStride_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStride_5_delegatefield));
			load_6_delegatefield = new load_6_delegate(this.load_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(load_6_delegatefield));
			getReferenceCount_7_delegatefield = new getReferenceCount_7_delegate(this.getReferenceCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getReferenceCount_7_delegatefield));
			getMassInformation_8_delegatefield = new getMassInformation_8_delegate(this.getMassInformation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMassInformation_8_delegatefield));
			getInternal_9_delegatefield = new getInternal_9_delegate(this.getInternal_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getInternal_9_delegatefield));
			return list;
		}
	}
}
