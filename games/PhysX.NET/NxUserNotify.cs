//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserNotify : DoxyBindObject
	{
		
		internal NxUserNotify(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>This is called when a breakable joint breaks. </summary>
		/// <param name="breakingImpulse">The impulse which caused the joint to break. </param>
		/// <param name="brokenJoint">The joint which has been broken. </param>
		public virtual bool onJointBreak(float breakingImpulse, NxJoint brokenJoint)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserNotify_onJointBreak_INVOKE(ClassPointer, doSetFunctionPointers, breakingImpulse, (brokenJoint!=null ? brokenJoint.ClassPointer : NullRef));
		}
		
		private bool onJointBreak_virtual(float breakingImpulse, IntPtr brokenJoint)
		{
			return onJointBreak(breakingImpulse, NxJoint.GetClass(brokenJoint));
		}
		
		delegate bool onJointBreak_0_delegate(float breakingImpulse, IntPtr brokenJoint);
		
		
		
		
		
		
		private onJointBreak_0_delegate onJointBreak_0_delegatefield;
		
		/// <summary>This is called during NxScene::fetchResults with the actors which have just been woken up. </summary>
		/// <param name="actors">- The actors which just woke up. </param>
		/// <param name="count">- The number of actors</param>
		public virtual void onWake(DoxyBindArray<NxActor> actors, uint count)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserNotify_onWake_INVOKE(ClassPointer, doSetFunctionPointers, actors, count);
		}
		
		private void onWake_virtual(IntPtr[] actors, uint count)
		{
			onWake(actors, count);
		}
		
		delegate void onWake_1_delegate(IntPtr[] actors, uint count);
		
		
		
		
		
		
		private onWake_1_delegate onWake_1_delegatefield;
		
		/// <summary>This is called during NxScene::fetchResults with the actors which have just been put to sleep. </summary>
		/// <param name="actors">- The actors which have just been put to sleep. </param>
		/// <param name="count">- The number of actors</param>
		public virtual void onSleep(DoxyBindArray<NxActor> actors, uint count)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserNotify_onSleep_INVOKE(ClassPointer, doSetFunctionPointers, actors, count);
		}
		
		private void onSleep_virtual(IntPtr[] actors, uint count)
		{
			onSleep(actors, count);
		}
		
		delegate void onSleep_2_delegate(IntPtr[] actors, uint count);
		
		
		
		
		
		
		private onSleep_2_delegate onSleep_2_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserNotify_onJointBreak")]
        private extern static System.Boolean NxUserNotify_onJointBreak_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single breakingImpulse, HandleRef brokenJoint);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserNotify_onWake")]
        private extern static void NxUserNotify_onWake_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] actors, System.UInt32 count);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserNotify_onSleep")]
        private extern static void NxUserNotify_onSleep_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] actors, System.UInt32 count);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserNotify")]
        private extern static IntPtr new_NxUserNotify_INVOKE (bool do_override);

		
		protected NxUserNotify() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserNotify)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserNotify_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserNotify_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserNotify GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserNotify)(obj.Target));
				}
			}
			return new NxUserNotify(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onJointBreak_0_delegatefield = new onJointBreak_0_delegate(this.onJointBreak_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onJointBreak_0_delegatefield));
			onWake_1_delegatefield = new onWake_1_delegate(this.onWake_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onWake_1_delegatefield));
			onSleep_2_delegatefield = new onSleep_2_delegate(this.onSleep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onSleep_2_delegatefield));
			return list;
		}
	}
}
