//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxMotorDesc : DoxyBindObject
	{
		
		internal NxMotorDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The relative velocity the motor is trying to achieve. </summary>
		public float velTarget
		{
			get
			{
				float value = get_NxMotorDesc_velTarget_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMotorDesc_velTarget_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The maximum force (or torque) the motor can exert. </summary>
		public float maxForce
		{
			get
			{
				float value = get_NxMotorDesc_maxForce_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMotorDesc_maxForce_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If true, motor will not brake when it spins faster than velTarget. </summary>
		public int freeSpin
		{
			get
			{
				int value = get_NxMotorDesc_freeSpin_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMotorDesc_freeSpin_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor, sets members to default values. </summary>
		public NxMotorDesc() : 
				base(new_NxMotorDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor, sets members to specified values. </summary>
		/// <param name="velTarget">target velocity of motor. Range: [0,inf] </param>
		/// <param name="maxForce">maximum motor force/torque. Range: [0,inf) </param>
		/// <param name="freeSpin">If true, motor will not brake when it spins faster than velTarget. </param>
		public NxMotorDesc(float velTarget, float maxForce, int freeSpin) : 
				base(new_NxMotorDesc_1_INVOKE(false, velTarget, maxForce, freeSpin))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor, sets members to specified values. </summary>
		/// <param name="velTarget">target velocity of motor. Range: [0,inf] </param>
		/// <param name="maxForce">maximum motor force/torque. Range: [0,inf) </param>
		/// <param name="freeSpin">If true, motor will not brake when it spins faster than velTarget. </param>
		public NxMotorDesc(float velTarget, float maxForce) : 
				base(new_NxMotorDesc_2_INVOKE(false, velTarget, maxForce))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor, sets members to specified values. </summary>
		/// <param name="velTarget">target velocity of motor. Range: [0,inf] </param>
		/// <param name="maxForce">maximum motor force/torque. Range: [0,inf) </param>
		/// <param name="freeSpin">If true, motor will not brake when it spins faster than velTarget. </param>
		public NxMotorDesc(float velTarget) : 
				base(new_NxMotorDesc_3_INVOKE(false, velTarget))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Sets members to default values. </summary>
		public void setToDefault()
		{
			NxMotorDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxMotorDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMotorDesc_velTarget")]
        private extern static void set_NxMotorDesc_velTarget_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMotorDesc_velTarget")]
        private extern static System.Single get_NxMotorDesc_velTarget_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMotorDesc_maxForce")]
        private extern static void set_NxMotorDesc_maxForce_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMotorDesc_maxForce")]
        private extern static System.Single get_NxMotorDesc_maxForce_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMotorDesc_freeSpin")]
        private extern static void set_NxMotorDesc_freeSpin_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMotorDesc_freeSpin")]
        private extern static System.Int32 get_NxMotorDesc_freeSpin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMotorDesc")]
        private extern static IntPtr new_NxMotorDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMotorDesc_1")]
        private extern static IntPtr new_NxMotorDesc_1_INVOKE (System.Boolean do_override, System.Single velTarget, System.Single maxForce, System.Int32 freeSpin);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMotorDesc_2")]
        private extern static IntPtr new_NxMotorDesc_2_INVOKE (System.Boolean do_override, System.Single velTarget, System.Single maxForce);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMotorDesc_3")]
        private extern static IntPtr new_NxMotorDesc_3_INVOKE (System.Boolean do_override, System.Single velTarget);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMotorDesc_setToDefault")]
        private extern static void NxMotorDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMotorDesc_isValid")]
        private extern static System.Boolean NxMotorDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxMotorDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxMotorDesc)(obj.Target));
				}
			}
			return new NxMotorDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
