//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSoftBodyDesc : DoxyBindObject
	{
		
		internal NxSoftBodyDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The cooked soft body mesh. </summary>
		public NxSoftBodyMesh softBodyMesh
		{
			get
			{
				return NxSoftBodyMesh.GetClass(get_NxSoftBodyDesc_softBodyMesh_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_softBodyMesh_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>The global pose of the soft body in the world. </summary>
		public NxMat34 globalPose
		{
			get
			{
				NxMat34 value = get_NxSoftBodyDesc_globalPose_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_globalPose_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Size of the particles used for collision detection. </summary>
		public float particleRadius
		{
			get
			{
				float value = get_NxSoftBodyDesc_particleRadius_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_particleRadius_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Density of the soft body (mass per volume). </summary>
		public float density
		{
			get
			{
				float value = get_NxSoftBodyDesc_density_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_density_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Volume stiffness of the soft body in the range 0 to 1. </summary>
		public float volumeStiffness
		{
			get
			{
				float value = get_NxSoftBodyDesc_volumeStiffness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_volumeStiffness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Stretching stiffness of the soft body in the range 0 to 1. </summary>
		public float stretchingStiffness
		{
			get
			{
				float value = get_NxSoftBodyDesc_stretchingStiffness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_stretchingStiffness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Spring damping of the soft body in the range 0 to 1. </summary>
		public float dampingCoefficient
		{
			get
			{
				float value = get_NxSoftBodyDesc_dampingCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_dampingCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Friction coefficient in the range 0 to 1. </summary>
		public float friction
		{
			get
			{
				float value = get_NxSoftBodyDesc_friction_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_friction_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_SBF_TEARABLE is set, this variable defines the elongation factor that causes the soft body to tear. </summary>
		public float tearFactor
		{
			get
			{
				float value = get_NxSoftBodyDesc_tearFactor_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_tearFactor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from the soft body to colliding rigid bodies. </summary>
		public float collisionResponseCoefficient
		{
			get
			{
				float value = get_NxSoftBodyDesc_collisionResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_collisionResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from the soft body to attached rigid bodies. </summary>
		public float attachmentResponseCoefficient
		{
			get
			{
				float value = get_NxSoftBodyDesc_attachmentResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_attachmentResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_SOFTBODY_ATTACHMENT_TEARABLE is set in the attachment method of NxSoftBody, this variable defines the elongation factor that causes the attachment to tear. </summary>
		public float attachmentTearFactor
		{
			get
			{
				float value = get_NxSoftBodyDesc_attachmentTearFactor_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_attachmentTearFactor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from this soft body to colliding fluids. </summary>
		public float toFluidResponseCoefficient
		{
			get
			{
				float value = get_NxSoftBodyDesc_toFluidResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_toFluidResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from colliding fluids to this soft body. </summary>
		public float fromFluidResponseCoefficient
		{
			get
			{
				float value = get_NxSoftBodyDesc_fromFluidResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_fromFluidResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the NX_SBF_ADHERE flag is set the soft body moves partially in the frame of the attached actor. </summary>
		public float minAdhereVelocity
		{
			get
			{
				float value = get_NxSoftBodyDesc_minAdhereVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_minAdhereVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Number of solver iterations. </summary>
		public uint solverIterations
		{
			get
			{
				uint value = get_NxSoftBodyDesc_solverIterations_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_solverIterations_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>External acceleration which affects all non attached particles of the soft body. </summary>
		public NxVec3 externalAcceleration
		{
			get
			{
				NxVec3 value = get_NxSoftBodyDesc_externalAcceleration_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_externalAcceleration_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The soft body wake up counter. </summary>
		public float wakeUpCounter
		{
			get
			{
				float value = get_NxSoftBodyDesc_wakeUpCounter_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_wakeUpCounter_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum linear velocity at which the soft body can go to sleep. </summary>
		public float sleepLinearVelocity
		{
			get
			{
				float value = get_NxSoftBodyDesc_sleepLinearVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_sleepLinearVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The buffers in meshData are used to communicate the dynamic data of the soft body back to the user. </summary>
		public NxMeshData meshData
		{
			get
			{
				return NxMeshData.GetClass(get_NxSoftBodyDesc_meshData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_meshData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>The buffers in splitPairData are used to communicate the split tetrahedra data of the soft body back to the user. </summary>
		public NxSoftBodySplitPairData splitPairData
		{
			get
			{
				return NxSoftBodySplitPairData.GetClass(get_NxSoftBodyDesc_splitPairData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_splitPairData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Sets which collision group this soft body is part of. </summary>
		public ushort collisionGroup
		{
			get
			{
				ushort value = get_NxSoftBodyDesc_collisionGroup_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_collisionGroup_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the 128-bit mask used for collision filtering. </summary>
		public NxGroupsMask groupsMask
		{
			get
			{
				return NxGroupsMask.GetClass(get_NxSoftBodyDesc_groupsMask_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_groupsMask_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Force Field Material Index, index != 0 has to be created. </summary>
		public ushort forceFieldMaterial
		{
			get
			{
				ushort value = get_NxSoftBodyDesc_forceFieldMaterial_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_forceFieldMaterial_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_SBF_VALIDBOUNDS is set, this variable defines the volume outside of which soft body particles are automatically removed from the simulation. </summary>
		public NxBounds3 validBounds
		{
			get
			{
				return NxBounds3.GetClass(get_NxSoftBodyDesc_validBounds_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_validBounds_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>This parameter defines the size of grid cells for collision detection. </summary>
		public float relativeGridSpacing
		{
			get
			{
				float value = get_NxSoftBodyDesc_relativeGridSpacing_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_relativeGridSpacing_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Flag bits. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxSoftBodyDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxSoftBody::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxSoftBodyDesc_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxSoftBodyDesc_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodyDesc_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The compartment to place the soft body in. The soft body feature currently uses the cloth simulation, so this must be either a pointer to an NxCompartment of type NX_SCT_SOFTBODY (or NX_SCT_CLOTH, since cloth and softbody currently use the same compartments), or NULL. A NULL compartment means creating the soft body in the first available cloth compartment (a default cloth compartment is created if none exists). A software soft body with a NULL compartment is created in the scene on which createSoftBody() is called. </summary>
		public NxCompartment compartment
		{
			get
			{
				return NxCompartment.GetClass(get_NxSoftBodyDesc_compartment_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodyDesc_compartment_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxSoftBodyDesc() : 
				base(new_NxSoftBodyDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(Re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxSoftBodyDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the current settings are valid. </summary>
		public bool isValid()
		{
			return NxSoftBodyDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_softBodyMesh")]
        private extern static void set_NxSoftBodyDesc_softBodyMesh_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_softBodyMesh")]
        private extern static IntPtr get_NxSoftBodyDesc_softBodyMesh_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_globalPose")]
        private extern static void set_NxSoftBodyDesc_globalPose_INVOKE (HandleRef classPointer, NxMat34 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_globalPose")]
        private extern static NxMat34 get_NxSoftBodyDesc_globalPose_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_particleRadius")]
        private extern static void set_NxSoftBodyDesc_particleRadius_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_particleRadius")]
        private extern static System.Single get_NxSoftBodyDesc_particleRadius_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_density")]
        private extern static void set_NxSoftBodyDesc_density_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_density")]
        private extern static System.Single get_NxSoftBodyDesc_density_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_volumeStiffness")]
        private extern static void set_NxSoftBodyDesc_volumeStiffness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_volumeStiffness")]
        private extern static System.Single get_NxSoftBodyDesc_volumeStiffness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_stretchingStiffness")]
        private extern static void set_NxSoftBodyDesc_stretchingStiffness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_stretchingStiffness")]
        private extern static System.Single get_NxSoftBodyDesc_stretchingStiffness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_dampingCoefficient")]
        private extern static void set_NxSoftBodyDesc_dampingCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_dampingCoefficient")]
        private extern static System.Single get_NxSoftBodyDesc_dampingCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_friction")]
        private extern static void set_NxSoftBodyDesc_friction_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_friction")]
        private extern static System.Single get_NxSoftBodyDesc_friction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_tearFactor")]
        private extern static void set_NxSoftBodyDesc_tearFactor_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_tearFactor")]
        private extern static System.Single get_NxSoftBodyDesc_tearFactor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_collisionResponseCoefficient")]
        private extern static void set_NxSoftBodyDesc_collisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_collisionResponseCoefficient")]
        private extern static System.Single get_NxSoftBodyDesc_collisionResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_attachmentResponseCoefficient")]
        private extern static void set_NxSoftBodyDesc_attachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_attachmentResponseCoefficient")]
        private extern static System.Single get_NxSoftBodyDesc_attachmentResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_attachmentTearFactor")]
        private extern static void set_NxSoftBodyDesc_attachmentTearFactor_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_attachmentTearFactor")]
        private extern static System.Single get_NxSoftBodyDesc_attachmentTearFactor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_toFluidResponseCoefficient")]
        private extern static void set_NxSoftBodyDesc_toFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_toFluidResponseCoefficient")]
        private extern static System.Single get_NxSoftBodyDesc_toFluidResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_fromFluidResponseCoefficient")]
        private extern static void set_NxSoftBodyDesc_fromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_fromFluidResponseCoefficient")]
        private extern static System.Single get_NxSoftBodyDesc_fromFluidResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_minAdhereVelocity")]
        private extern static void set_NxSoftBodyDesc_minAdhereVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_minAdhereVelocity")]
        private extern static System.Single get_NxSoftBodyDesc_minAdhereVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_solverIterations")]
        private extern static void set_NxSoftBodyDesc_solverIterations_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_solverIterations")]
        private extern static System.UInt32 get_NxSoftBodyDesc_solverIterations_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_externalAcceleration")]
        private extern static void set_NxSoftBodyDesc_externalAcceleration_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_externalAcceleration")]
        private extern static NxVec3 get_NxSoftBodyDesc_externalAcceleration_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_wakeUpCounter")]
        private extern static void set_NxSoftBodyDesc_wakeUpCounter_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_wakeUpCounter")]
        private extern static System.Single get_NxSoftBodyDesc_wakeUpCounter_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_sleepLinearVelocity")]
        private extern static void set_NxSoftBodyDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_sleepLinearVelocity")]
        private extern static System.Single get_NxSoftBodyDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_meshData")]
        private extern static void set_NxSoftBodyDesc_meshData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_meshData")]
        private extern static IntPtr get_NxSoftBodyDesc_meshData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_splitPairData")]
        private extern static void set_NxSoftBodyDesc_splitPairData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_splitPairData")]
        private extern static IntPtr get_NxSoftBodyDesc_splitPairData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_collisionGroup")]
        private extern static void set_NxSoftBodyDesc_collisionGroup_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_collisionGroup")]
        private extern static System.UInt16 get_NxSoftBodyDesc_collisionGroup_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_groupsMask")]
        private extern static void set_NxSoftBodyDesc_groupsMask_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_groupsMask")]
        private extern static IntPtr get_NxSoftBodyDesc_groupsMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_forceFieldMaterial")]
        private extern static void set_NxSoftBodyDesc_forceFieldMaterial_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_forceFieldMaterial")]
        private extern static System.UInt16 get_NxSoftBodyDesc_forceFieldMaterial_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_validBounds")]
        private extern static void set_NxSoftBodyDesc_validBounds_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_validBounds")]
        private extern static IntPtr get_NxSoftBodyDesc_validBounds_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_relativeGridSpacing")]
        private extern static void set_NxSoftBodyDesc_relativeGridSpacing_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_relativeGridSpacing")]
        private extern static System.Single get_NxSoftBodyDesc_relativeGridSpacing_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_flags")]
        private extern static void set_NxSoftBodyDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_flags")]
        private extern static System.UInt32 get_NxSoftBodyDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_userData")]
        private extern static void set_NxSoftBodyDesc_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_userData")]
        private extern static System.IntPtr get_NxSoftBodyDesc_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_name")]
        private extern static void set_NxSoftBodyDesc_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_name")]
        private extern static System.String get_NxSoftBodyDesc_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodyDesc_compartment")]
        private extern static void set_NxSoftBodyDesc_compartment_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodyDesc_compartment")]
        private extern static IntPtr get_NxSoftBodyDesc_compartment_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSoftBodyDesc")]
        private extern static IntPtr new_NxSoftBodyDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBodyDesc_setToDefault")]
        private extern static void NxSoftBodyDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBodyDesc_isValid")]
        private extern static System.Boolean NxSoftBodyDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSoftBodyDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSoftBodyDesc)(obj.Target));
				}
			}
			return new NxSoftBodyDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
