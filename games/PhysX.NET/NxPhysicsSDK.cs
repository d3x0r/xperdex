//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxPhysicsSDK : DoxyBindObject
	{
		
		internal NxPhysicsSDK(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		protected NxPhysicsSDK() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxPhysicsSDK)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxPhysicsSDK_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxPhysicsSDK_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Destroys the instance it is called on. </summary>
		public virtual void release()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_release_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void release_virtual()
		{
			release();
		}
		
		delegate void release_0_delegate();
		
		
		
		
		
		
		private release_0_delegate release_0_delegatefield;
		
		/// <summary>Function that lets you set global simulation parameters. </summary>
		/// <param name="paramEnum">Parameter to set. See NxParameter</param>
		/// <param name="paramValue">The value to set, see NxParameter for allowable values. </param>
		public virtual bool setParameter(NxParameter paramEnum, float paramValue)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_setParameter_INVOKE(ClassPointer, doSetFunctionPointers, paramEnum, paramValue);
		}
		
		private bool setParameter_virtual(NxParameter paramEnum, float paramValue)
		{
			return setParameter(paramEnum, paramValue);
		}
		
		delegate bool setParameter_1_delegate(NxParameter paramEnum, float paramValue);
		
		
		
		
		
		
		private setParameter_1_delegate setParameter_1_delegatefield;
		
		/// <summary>Function that lets you query global simulation parameters. </summary>
		/// <param name="paramEnum">The Parameter to retrieve. </param>
		public virtual float getParameter(NxParameter paramEnum)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getParameter_INVOKE(ClassPointer, doSetFunctionPointers, paramEnum);
		}
		
		private float getParameter_virtual(NxParameter paramEnum)
		{
			return getParameter(paramEnum);
		}
		
		delegate float getParameter_2_delegate(NxParameter paramEnum);
		
		
		
		
		
		
		private getParameter_2_delegate getParameter_2_delegatefield;
		
		/// <summary>Creates a scene. </summary>
		/// <param name="sceneDesc">Scene descriptor. See NxSceneDesc</param>
		public virtual NxScene createScene(NxSceneDesc sceneDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxPhysicsSDK_createScene_INVOKE(ClassPointer, doSetFunctionPointers, (sceneDesc!=null ? sceneDesc.ClassPointer : NullRef)));
		}
		
		private IntPtr createScene_virtual(IntPtr sceneDesc)
		{
			return createScene(NxSceneDesc.GetClass(sceneDesc)).ClassPointer.Handle;
		}
		
		delegate IntPtr createScene_3_delegate(IntPtr sceneDesc);
		
		
		
		
		
		
		private createScene_3_delegate createScene_3_delegatefield;
		
		/// <summary>Deletes the instance passed. </summary>
		/// <param name="scene">The scene to release.</param>
		public virtual void releaseScene(NxScene scene)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseScene_INVOKE(ClassPointer, doSetFunctionPointers, (scene!=null ? scene.ClassPointer : NullRef));
		}
		
		private void releaseScene_virtual(IntPtr scene)
		{
			releaseScene(NxScene.GetClass(scene));
		}
		
		delegate void releaseScene_4_delegate(IntPtr scene);
		
		
		
		
		
		
		private releaseScene_4_delegate releaseScene_4_delegatefield;
		
		/// <summary>Gets number of created scenes. </summary>
		public virtual uint getNbScenes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbScenes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbScenes_virtual()
		{
			return getNbScenes();
		}
		
		delegate uint getNbScenes_5_delegate();
		
		
		
		
		
		
		private getNbScenes_5_delegate getNbScenes_5_delegatefield;
		
		/// <summary>Retrieves pointer to created scenes. </summary>
		/// <param name="i">The index for the scene. </param>
		public virtual NxScene getScene(uint i)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxPhysicsSDK_getScene_INVOKE(ClassPointer, doSetFunctionPointers, i));
		}
		
		private IntPtr getScene_virtual(uint i)
		{
			return getScene(i).ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_6_delegate(uint i);
		
		
		
		
		
		
		private getScene_6_delegate getScene_6_delegatefield;
		
		/// <summary>Creates a triangle mesh object. </summary>
		/// <param name="stream">The triangle mesh stream. </param>
		public virtual NxTriangleMesh createTriangleMesh(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMesh.GetClass(NxPhysicsSDK_createTriangleMesh_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef)));
		}
		
		private IntPtr createTriangleMesh_virtual(IntPtr stream)
		{
			return createTriangleMesh(NxStream.GetClass(stream)).ClassPointer.Handle;
		}
		
		delegate IntPtr createTriangleMesh_7_delegate(IntPtr stream);
		
		
		
		
		
		
		private createTriangleMesh_7_delegate createTriangleMesh_7_delegatefield;
		
		/// <summary>Destroys the instance passed. </summary>
		/// <param name="mesh">Triangle mesh to release.</param>
		public virtual void releaseTriangleMesh(NxTriangleMesh mesh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseTriangleMesh_INVOKE(ClassPointer, doSetFunctionPointers, (mesh!=null ? mesh.ClassPointer : NullRef));
		}
		
		private void releaseTriangleMesh_virtual(IntPtr mesh)
		{
			releaseTriangleMesh(NxTriangleMesh.GetClass(mesh));
		}
		
		delegate void releaseTriangleMesh_8_delegate(IntPtr mesh);
		
		
		
		
		
		
		private releaseTriangleMesh_8_delegate releaseTriangleMesh_8_delegatefield;
		
		/// <summary>Number of triangle meshes. </summary>
		public virtual uint getNbTriangleMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbTriangleMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbTriangleMeshes_virtual()
		{
			return getNbTriangleMeshes();
		}
		
		delegate uint getNbTriangleMeshes_9_delegate();
		
		
		
		
		
		
		private getNbTriangleMeshes_9_delegate getNbTriangleMeshes_9_delegatefield;
		
		/// <summary>Creates a NxHeightField object. </summary>
		/// <param name="desc">The descriptor to load the object from. </param>
		public virtual NxHeightField createHeightField(NxHeightFieldDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightField.GetClass(NxPhysicsSDK_createHeightField_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef)));
		}
		
		private IntPtr createHeightField_virtual(IntPtr desc)
		{
			return createHeightField(NxHeightFieldDesc.GetClass(desc)).ClassPointer.Handle;
		}
		
		delegate IntPtr createHeightField_10_delegate(IntPtr desc);
		
		
		
		
		
		
		private createHeightField_10_delegate createHeightField_10_delegatefield;
		
		/// <summary>Destroys the instance passed. </summary>
		/// <param name="heightField">The height field to release.</param>
		public virtual void releaseHeightField(NxHeightField heightField)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseHeightField_INVOKE(ClassPointer, doSetFunctionPointers, (heightField!=null ? heightField.ClassPointer : NullRef));
		}
		
		private void releaseHeightField_virtual(IntPtr heightField)
		{
			releaseHeightField(NxHeightField.GetClass(heightField));
		}
		
		delegate void releaseHeightField_11_delegate(IntPtr heightField);
		
		
		
		
		
		
		private releaseHeightField_11_delegate releaseHeightField_11_delegatefield;
		
		/// <summary>Number of heightfields. </summary>
		public virtual uint getNbHeightFields()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbHeightFields_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbHeightFields_virtual()
		{
			return getNbHeightFields();
		}
		
		delegate uint getNbHeightFields_12_delegate();
		
		
		
		
		
		
		private getNbHeightFields_12_delegate getNbHeightFields_12_delegatefield;
		
		/// <summary>Creates a CCD Skeleton mesh object. </summary>
		/// <param name="mesh">The triangle mesh from which to create the CCD skeleton. </param>
		public virtual NxCCDSkeleton createCCDSkeleton(NxSimpleTriangleMesh mesh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton.GetClass(NxPhysicsSDK_createCCDSkeleton_INVOKE(ClassPointer, doSetFunctionPointers, (mesh!=null ? mesh.ClassPointer : NullRef)));
		}
		
		private IntPtr createCCDSkeleton_virtual(IntPtr mesh)
		{
			return createCCDSkeleton(NxSimpleTriangleMesh.GetClass(mesh)).ClassPointer.Handle;
		}
		
		delegate IntPtr createCCDSkeleton_13_delegate(IntPtr mesh);
		
		
		
		
		
		
		private createCCDSkeleton_13_delegate createCCDSkeleton_13_delegatefield;
		
		/// <summary>Creates a CCD Skeleton mesh object. </summary>
		/// <param name="memoryBuffer">the buffer to read from. </param>
		/// <param name="bufferSize">size of the buffer.</param>
		public virtual NxCCDSkeleton createCCDSkeleton(System.IntPtr memoryBuffer, uint bufferSize)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton.GetClass(NxPhysicsSDK_createCCDSkeleton_1_INVOKE(ClassPointer, doSetFunctionPointers, memoryBuffer, bufferSize));
		}
		
		private IntPtr createCCDSkeleton_virtual(System.IntPtr memoryBuffer, uint bufferSize)
		{
			return createCCDSkeleton(memoryBuffer, bufferSize).ClassPointer.Handle;
		}
		
		delegate IntPtr createCCDSkeleton_14_delegate(System.IntPtr memoryBuffer, uint bufferSize);
		
		
		
		
		
		
		private createCCDSkeleton_14_delegate createCCDSkeleton_14_delegatefield;
		
		/// <summary>Destroys the instance passed. </summary>
		/// <param name="skel">The CCD Skeleton to release.</param>
		public virtual void releaseCCDSkeleton(NxCCDSkeleton skel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseCCDSkeleton_INVOKE(ClassPointer, doSetFunctionPointers, (skel!=null ? skel.ClassPointer : NullRef));
		}
		
		private void releaseCCDSkeleton_virtual(IntPtr skel)
		{
			releaseCCDSkeleton(NxCCDSkeleton.GetClass(skel));
		}
		
		delegate void releaseCCDSkeleton_15_delegate(IntPtr skel);
		
		
		
		
		
		
		private releaseCCDSkeleton_15_delegate releaseCCDSkeleton_15_delegatefield;
		
		/// <summary>Number of CCD skeletons. </summary>
		public virtual uint getNbCCDSkeletons()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbCCDSkeletons_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbCCDSkeletons_virtual()
		{
			return getNbCCDSkeletons();
		}
		
		delegate uint getNbCCDSkeletons_16_delegate();
		
		
		
		
		
		
		private getNbCCDSkeletons_16_delegate getNbCCDSkeletons_16_delegatefield;
		
		/// <summary>Creates a convex mesh object. </summary>
		/// <param name="mesh">The stream to load the convex mesh from. </param>
		public virtual NxConvexMesh createConvexMesh(NxStream mesh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxConvexMesh.GetClass(NxPhysicsSDK_createConvexMesh_INVOKE(ClassPointer, doSetFunctionPointers, (mesh!=null ? mesh.ClassPointer : NullRef)));
		}
		
		private IntPtr createConvexMesh_virtual(IntPtr mesh)
		{
			return createConvexMesh(NxStream.GetClass(mesh)).ClassPointer.Handle;
		}
		
		delegate IntPtr createConvexMesh_17_delegate(IntPtr mesh);
		
		
		
		
		
		
		private createConvexMesh_17_delegate createConvexMesh_17_delegatefield;
		
		/// <summary>Destroys the instance passed. </summary>
		/// <param name="mesh">The convex mesh to release.</param>
		public virtual void releaseConvexMesh(NxConvexMesh mesh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseConvexMesh_INVOKE(ClassPointer, doSetFunctionPointers, (mesh!=null ? mesh.ClassPointer : NullRef));
		}
		
		private void releaseConvexMesh_virtual(IntPtr mesh)
		{
			releaseConvexMesh(NxConvexMesh.GetClass(mesh));
		}
		
		delegate void releaseConvexMesh_18_delegate(IntPtr mesh);
		
		
		
		
		
		
		private releaseConvexMesh_18_delegate releaseConvexMesh_18_delegatefield;
		
		/// <summary>Number of convex meshes. </summary>
		public virtual uint getNbConvexMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbConvexMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbConvexMeshes_virtual()
		{
			return getNbConvexMeshes();
		}
		
		delegate uint getNbConvexMeshes_19_delegate();
		
		
		
		
		
		
		private getNbConvexMeshes_19_delegate getNbConvexMeshes_19_delegatefield;
		
		/// <summary>Creates a cloth mesh from a cooked cloth mesh stored in a stream. </summary>
		public virtual NxClothMesh createClothMesh(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxClothMesh.GetClass(NxPhysicsSDK_createClothMesh_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef)));
		}
		
		private IntPtr createClothMesh_virtual(IntPtr stream)
		{
			return createClothMesh(NxStream.GetClass(stream)).ClassPointer.Handle;
		}
		
		delegate IntPtr createClothMesh_20_delegate(IntPtr stream);
		
		
		
		
		
		
		private createClothMesh_20_delegate createClothMesh_20_delegatefield;
		
		/// <summary>Deletes the specified cloth mesh. The cloth mesh must be in this scene. </summary>
		/// <param name="cloth">Cloth to release. </param>
		public virtual void releaseClothMesh(NxClothMesh cloth)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseClothMesh_INVOKE(ClassPointer, doSetFunctionPointers, (cloth!=null ? cloth.ClassPointer : NullRef));
		}
		
		private void releaseClothMesh_virtual(IntPtr cloth)
		{
			releaseClothMesh(NxClothMesh.GetClass(cloth));
		}
		
		delegate void releaseClothMesh_21_delegate(IntPtr cloth);
		
		
		
		
		
		
		private releaseClothMesh_21_delegate releaseClothMesh_21_delegatefield;
		
		/// <summary>Number of cloth meshes. </summary>
		public virtual uint getNbClothMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbClothMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbClothMeshes_virtual()
		{
			return getNbClothMeshes();
		}
		
		delegate uint getNbClothMeshes_22_delegate();
		
		
		
		
		
		
		private getNbClothMeshes_22_delegate getNbClothMeshes_22_delegatefield;
		
		/// <summary>Retrieve an array of cloth meshes. </summary>
		public virtual DoxyBindArray<NxClothMesh> getClothMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getClothMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private IntPtr[] getClothMeshes_virtual()
		{
			return getClothMeshes();
		}
		
		delegate IntPtr[] getClothMeshes_23_delegate();
		
		
		
		
		
		
		private getClothMeshes_23_delegate getClothMeshes_23_delegatefield;
		
		/// <summary>Creates a soft body mesh from a cooked soft body mesh stored in a stream. </summary>
		public virtual NxSoftBodyMesh createSoftBodyMesh(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBodyMesh.GetClass(NxPhysicsSDK_createSoftBodyMesh_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef)));
		}
		
		private IntPtr createSoftBodyMesh_virtual(IntPtr stream)
		{
			return createSoftBodyMesh(NxStream.GetClass(stream)).ClassPointer.Handle;
		}
		
		delegate IntPtr createSoftBodyMesh_24_delegate(IntPtr stream);
		
		
		
		
		
		
		private createSoftBodyMesh_24_delegate createSoftBodyMesh_24_delegatefield;
		
		/// <summary>Deletes the specified soft body mesh. The soft body mesh must be in this scene. </summary>
		/// <param name="softBodyMesh">Soft body mesh to release. </param>
		public virtual void releaseSoftBodyMesh(NxSoftBodyMesh softBodyMesh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxPhysicsSDK_releaseSoftBodyMesh_INVOKE(ClassPointer, doSetFunctionPointers, (softBodyMesh!=null ? softBodyMesh.ClassPointer : NullRef));
		}
		
		private void releaseSoftBodyMesh_virtual(IntPtr softBodyMesh)
		{
			releaseSoftBodyMesh(NxSoftBodyMesh.GetClass(softBodyMesh));
		}
		
		delegate void releaseSoftBodyMesh_25_delegate(IntPtr softBodyMesh);
		
		
		
		
		
		
		private releaseSoftBodyMesh_25_delegate releaseSoftBodyMesh_25_delegatefield;
		
		/// <summary>Number of soft body meshes. </summary>
		public virtual uint getNbSoftBodyMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbSoftBodyMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbSoftBodyMeshes_virtual()
		{
			return getNbSoftBodyMeshes();
		}
		
		delegate uint getNbSoftBodyMeshes_26_delegate();
		
		
		
		
		
		
		private getNbSoftBodyMeshes_26_delegate getNbSoftBodyMeshes_26_delegatefield;
		
		/// <summary>Retrieve an array of soft body meshes. </summary>
		public virtual DoxyBindArray<NxSoftBodyMesh> getSoftBodyMeshes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getSoftBodyMeshes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private IntPtr[] getSoftBodyMeshes_virtual()
		{
			return getSoftBodyMeshes();
		}
		
		delegate IntPtr[] getSoftBodyMeshes_27_delegate();
		
		
		
		
		
		
		private getSoftBodyMeshes_27_delegate getSoftBodyMeshes_27_delegatefield;
		
		/// <summary>Reports the internal API version number of the SDK. </summary>
		public virtual uint getInternalVersion(ref uint apiRev, ref uint descRev, ref uint branchId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getInternalVersion_INVOKE(ClassPointer, doSetFunctionPointers, ref apiRev, ref descRev, ref branchId);
		}
		
		private uint getInternalVersion_virtual([In()] [Out()] ref uint apiRev, [In()] [Out()] ref uint descRev, [In()] [Out()] ref uint branchId)
		{
			return getInternalVersion(ref apiRev, ref descRev, ref branchId);
		}
		
		delegate uint getInternalVersion_28_delegate([In()] [Out()] ref uint apiRev, [In()] [Out()] ref uint descRev, [In()] [Out()] ref uint branchId);
		
		
		
		
		
		
		private getInternalVersion_28_delegate getInternalVersion_28_delegatefield;
		
		/// <summary></summary>
		public virtual NxInterface getInterface(NxInterfaceType type, int versionNumber)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxInterface.GetClass(NxPhysicsSDK_getInterface_INVOKE(ClassPointer, doSetFunctionPointers, type, versionNumber));
		}
		
		private IntPtr getInterface_virtual(NxInterfaceType type, int versionNumber)
		{
			return getInterface(type, versionNumber).ClassPointer.Handle;
		}
		
		delegate IntPtr getInterface_29_delegate(NxInterfaceType type, int versionNumber);
		
		
		
		
		
		
		private getInterface_29_delegate getInterface_29_delegatefield;
		
		/// <summary>Reports the available revision of the PhysX Hardware. </summary>
		public virtual NxHWVersion getHWVersion()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getHWVersion_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxHWVersion getHWVersion_virtual()
		{
			return getHWVersion();
		}
		
		delegate NxHWVersion getHWVersion_30_delegate();
		
		
		
		
		
		
		private getHWVersion_30_delegate getHWVersion_30_delegatefield;
		
		/// <summary>Reports the number of PPUs installed in the host system. </summary>
		public virtual uint getNbPPUs()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxPhysicsSDK_getNbPPUs_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbPPUs_virtual()
		{
			return getNbPPUs();
		}
		
		delegate uint getNbPPUs_31_delegate();
		
		
		
		
		
		
		private getNbPPUs_31_delegate getNbPPUs_31_delegatefield;
		
		/// <summary>Retrieves the FoundationSDK instance. </summary>
		public virtual NxFoundationSDK getFoundationSDK()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFoundationSDK.GetClass(NxPhysicsSDK_getFoundationSDK_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getFoundationSDK_virtual()
		{
			return getFoundationSDK().ClassPointer.Handle;
		}
		
		delegate IntPtr getFoundationSDK_32_delegate();
		
		
		
		
		
		
		private getFoundationSDK_32_delegate getFoundationSDK_32_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxPhysicsSDK")]
        private extern static IntPtr new_NxPhysicsSDK_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_release")]
        private extern static void NxPhysicsSDK_release_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_setParameter")]
        private extern static System.Boolean NxPhysicsSDK_setParameter_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxParameter paramEnum, System.Single paramValue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getParameter")]
        private extern static System.Single NxPhysicsSDK_getParameter_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxParameter paramEnum);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createScene")]
        private extern static IntPtr NxPhysicsSDK_createScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef sceneDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseScene")]
        private extern static void NxPhysicsSDK_releaseScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef scene);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbScenes")]
        private extern static System.UInt32 NxPhysicsSDK_getNbScenes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getScene")]
        private extern static IntPtr NxPhysicsSDK_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 i);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createTriangleMesh")]
        private extern static IntPtr NxPhysicsSDK_createTriangleMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseTriangleMesh")]
        private extern static void NxPhysicsSDK_releaseTriangleMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mesh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbTriangleMeshes")]
        private extern static System.UInt32 NxPhysicsSDK_getNbTriangleMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createHeightField")]
        private extern static IntPtr NxPhysicsSDK_createHeightField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseHeightField")]
        private extern static void NxPhysicsSDK_releaseHeightField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef heightField);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbHeightFields")]
        private extern static System.UInt32 NxPhysicsSDK_getNbHeightFields_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createCCDSkeleton")]
        private extern static IntPtr NxPhysicsSDK_createCCDSkeleton_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mesh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createCCDSkeleton_1")]
        private extern static IntPtr NxPhysicsSDK_createCCDSkeleton_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memoryBuffer, System.UInt32 bufferSize);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseCCDSkeleton")]
        private extern static void NxPhysicsSDK_releaseCCDSkeleton_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef skel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbCCDSkeletons")]
        private extern static System.UInt32 NxPhysicsSDK_getNbCCDSkeletons_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createConvexMesh")]
        private extern static IntPtr NxPhysicsSDK_createConvexMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mesh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseConvexMesh")]
        private extern static void NxPhysicsSDK_releaseConvexMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mesh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbConvexMeshes")]
        private extern static System.UInt32 NxPhysicsSDK_getNbConvexMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createClothMesh")]
        private extern static IntPtr NxPhysicsSDK_createClothMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseClothMesh")]
        private extern static void NxPhysicsSDK_releaseClothMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef cloth);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbClothMeshes")]
        private extern static System.UInt32 NxPhysicsSDK_getNbClothMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getClothMeshes")]
        private extern static IntPtr[] NxPhysicsSDK_getClothMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_createSoftBodyMesh")]
        private extern static IntPtr NxPhysicsSDK_createSoftBodyMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_releaseSoftBodyMesh")]
        private extern static void NxPhysicsSDK_releaseSoftBodyMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef softBodyMesh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbSoftBodyMeshes")]
        private extern static System.UInt32 NxPhysicsSDK_getNbSoftBodyMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getSoftBodyMeshes")]
        private extern static IntPtr[] NxPhysicsSDK_getSoftBodyMeshes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getInternalVersion")]
        private extern static System.UInt32 NxPhysicsSDK_getInternalVersion_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.UInt32 apiRev, [In()] [Out()] ref System.UInt32 descRev, [In()] [Out()] ref System.UInt32 branchId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getInterface")]
        private extern static IntPtr NxPhysicsSDK_getInterface_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxInterfaceType type, System.Int32 versionNumber);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getHWVersion")]
        private extern static NxHWVersion NxPhysicsSDK_getHWVersion_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getNbPPUs")]
        private extern static System.UInt32 NxPhysicsSDK_getNbPPUs_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDK_getFoundationSDK")]
        private extern static IntPtr NxPhysicsSDK_getFoundationSDK_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxPhysicsSDK GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxPhysicsSDK)(obj.Target));
				}
			}
			return new NxPhysicsSDK(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			release_0_delegatefield = new release_0_delegate(this.release_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(release_0_delegatefield));
			setParameter_1_delegatefield = new setParameter_1_delegate(this.setParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setParameter_1_delegatefield));
			getParameter_2_delegatefield = new getParameter_2_delegate(this.getParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getParameter_2_delegatefield));
			createScene_3_delegatefield = new createScene_3_delegate(this.createScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createScene_3_delegatefield));
			releaseScene_4_delegatefield = new releaseScene_4_delegate(this.releaseScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseScene_4_delegatefield));
			getNbScenes_5_delegatefield = new getNbScenes_5_delegate(this.getNbScenes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbScenes_5_delegatefield));
			getScene_6_delegatefield = new getScene_6_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_6_delegatefield));
			createTriangleMesh_7_delegatefield = new createTriangleMesh_7_delegate(this.createTriangleMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createTriangleMesh_7_delegatefield));
			releaseTriangleMesh_8_delegatefield = new releaseTriangleMesh_8_delegate(this.releaseTriangleMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseTriangleMesh_8_delegatefield));
			getNbTriangleMeshes_9_delegatefield = new getNbTriangleMeshes_9_delegate(this.getNbTriangleMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbTriangleMeshes_9_delegatefield));
			createHeightField_10_delegatefield = new createHeightField_10_delegate(this.createHeightField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createHeightField_10_delegatefield));
			releaseHeightField_11_delegatefield = new releaseHeightField_11_delegate(this.releaseHeightField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseHeightField_11_delegatefield));
			getNbHeightFields_12_delegatefield = new getNbHeightFields_12_delegate(this.getNbHeightFields_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbHeightFields_12_delegatefield));
			createCCDSkeleton_13_delegatefield = new createCCDSkeleton_13_delegate(this.createCCDSkeleton_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createCCDSkeleton_13_delegatefield));
			createCCDSkeleton_14_delegatefield = new createCCDSkeleton_14_delegate(this.createCCDSkeleton_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createCCDSkeleton_14_delegatefield));
			releaseCCDSkeleton_15_delegatefield = new releaseCCDSkeleton_15_delegate(this.releaseCCDSkeleton_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseCCDSkeleton_15_delegatefield));
			getNbCCDSkeletons_16_delegatefield = new getNbCCDSkeletons_16_delegate(this.getNbCCDSkeletons_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbCCDSkeletons_16_delegatefield));
			createConvexMesh_17_delegatefield = new createConvexMesh_17_delegate(this.createConvexMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createConvexMesh_17_delegatefield));
			releaseConvexMesh_18_delegatefield = new releaseConvexMesh_18_delegate(this.releaseConvexMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseConvexMesh_18_delegatefield));
			getNbConvexMeshes_19_delegatefield = new getNbConvexMeshes_19_delegate(this.getNbConvexMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbConvexMeshes_19_delegatefield));
			createClothMesh_20_delegatefield = new createClothMesh_20_delegate(this.createClothMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createClothMesh_20_delegatefield));
			releaseClothMesh_21_delegatefield = new releaseClothMesh_21_delegate(this.releaseClothMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseClothMesh_21_delegatefield));
			getNbClothMeshes_22_delegatefield = new getNbClothMeshes_22_delegate(this.getNbClothMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbClothMeshes_22_delegatefield));
			getClothMeshes_23_delegatefield = new getClothMeshes_23_delegate(this.getClothMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getClothMeshes_23_delegatefield));
			createSoftBodyMesh_24_delegatefield = new createSoftBodyMesh_24_delegate(this.createSoftBodyMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createSoftBodyMesh_24_delegatefield));
			releaseSoftBodyMesh_25_delegatefield = new releaseSoftBodyMesh_25_delegate(this.releaseSoftBodyMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseSoftBodyMesh_25_delegatefield));
			getNbSoftBodyMeshes_26_delegatefield = new getNbSoftBodyMeshes_26_delegate(this.getNbSoftBodyMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbSoftBodyMeshes_26_delegatefield));
			getSoftBodyMeshes_27_delegatefield = new getSoftBodyMeshes_27_delegate(this.getSoftBodyMeshes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSoftBodyMeshes_27_delegatefield));
			getInternalVersion_28_delegatefield = new getInternalVersion_28_delegate(this.getInternalVersion_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getInternalVersion_28_delegatefield));
			getInterface_29_delegatefield = new getInterface_29_delegate(this.getInterface_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getInterface_29_delegatefield));
			getHWVersion_30_delegatefield = new getHWVersion_30_delegate(this.getHWVersion_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHWVersion_30_delegatefield));
			getNbPPUs_31_delegatefield = new getNbPPUs_31_delegate(this.getNbPPUs_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbPPUs_31_delegatefield));
			getFoundationSDK_32_delegatefield = new getFoundationSDK_32_delegate(this.getFoundationSDK_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFoundationSDK_32_delegatefield));
			return list;
		}
	}
}
