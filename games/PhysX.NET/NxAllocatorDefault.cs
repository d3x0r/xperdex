//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxAllocatorDefault : DoxyBindObject
	{
		
		internal NxAllocatorDefault(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		/// <param name="size">Number of bytes to allocate. </param>
		/// <param name="type">A hint about what the memory will be used for. See NxMemoryType. </param>
		public System.IntPtr malloc(System.IntPtr size, NxMemoryType type)
		{
			return NxAllocatorDefault_malloc_INVOKE(ClassPointer, doSetFunctionPointers, size, type);
		}
		
		/// <summary></summary>
		/// <param name="size">Number of bytes to allocate. </param>
		/// <param name="fileName">File which is allocating the memory. </param>
		/// <param name="line">Line which is allocating the memory. </param>
		/// <param name="className">Name of the class which is allocating the memory. </param>
		/// <param name="type">A hint about what the memory will be used for. See NxMemoryType. </param>
		public System.IntPtr mallocDEBUG(System.IntPtr size, string fileName, int line, string className, NxMemoryType type)
		{
			return NxAllocatorDefault_mallocDEBUG_INVOKE(ClassPointer, doSetFunctionPointers, size, fileName, line, className, type);
		}
		
		/// <summary></summary>
		/// <param name="memory">Memory block to change the size of. </param>
		/// <param name="size">New size for memory block. </param>
		public System.IntPtr realloc(System.IntPtr memory, System.IntPtr size)
		{
			return NxAllocatorDefault_realloc_INVOKE(ClassPointer, doSetFunctionPointers, memory, size);
		}
		
		/// <summary></summary>
		/// <param name="memory">Memory to free. </param>
		public void free(System.IntPtr memory)
		{
			NxAllocatorDefault_free_INVOKE(ClassPointer, doSetFunctionPointers, memory);
		}
		
		/// <summary></summary>
		public void check(System.IntPtr memory)
		{
			NxAllocatorDefault_check_INVOKE(ClassPointer, doSetFunctionPointers, memory);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxAllocatorDefault_malloc")]
        private extern static System.IntPtr NxAllocatorDefault_malloc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size, NxMemoryType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxAllocatorDefault_mallocDEBUG")]
        private extern static System.IntPtr NxAllocatorDefault_mallocDEBUG_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr size, System.String fileName, System.Int32 line, System.String className, NxMemoryType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxAllocatorDefault_realloc")]
        private extern static System.IntPtr NxAllocatorDefault_realloc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memory, System.IntPtr size);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxAllocatorDefault_free")]
        private extern static void NxAllocatorDefault_free_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memory);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxAllocatorDefault_check")]
        private extern static void NxAllocatorDefault_check_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr memory);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxAllocatorDefault")]
        private extern static IntPtr new_NxAllocatorDefault_INVOKE (bool do_override);

		
		public NxAllocatorDefault() : 
				base(new_NxAllocatorDefault_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxAllocatorDefault GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxAllocatorDefault)(obj.Target));
				}
			}
			return new NxAllocatorDefault(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
