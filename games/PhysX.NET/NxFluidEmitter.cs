//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxFluidEmitter : DoxyBindObject
	{
		
		internal NxFluidEmitter(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Loads the FluidEmitter descriptor. </summary>
		/// <param name="desc">The descriptor used to restore the state of the object. </param>
		public virtual bool loadFromDesc(NxFluidEmitterDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_loadFromDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool loadFromDesc_virtual(IntPtr desc)
		{
			return loadFromDesc(NxFluidEmitterDesc.GetClass(desc));
		}
		
		delegate bool loadFromDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private loadFromDesc_0_delegate loadFromDesc_0_delegatefield;
		
		/// <summary>Saves the FluidEmitter descriptor. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object. </param>
		public virtual bool saveToDesc(NxFluidEmitterDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxFluidEmitterDesc.GetClass(desc));
		}
		
		delegate bool saveToDesc_1_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_1_delegate saveToDesc_1_delegatefield;
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxFluidEmitter_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidEmitter_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxFluidEmitter() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxFluidEmitter)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxFluidEmitter_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxFluidEmitter_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Returns the owner fluid. </summary>
		public virtual NxFluid getFluid()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluid.GetClass(NxFluidEmitter_getFluid_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getFluid_virtual()
		{
			return getFluid().ClassPointer.Handle;
		}
		
		delegate IntPtr getFluid_2_delegate();
		
		
		
		
		
		
		private getFluid_2_delegate getFluid_2_delegatefield;
		
		/// <summary>Sets the pose of the emitter in world space. </summary>
		/// <param name="mat">New pose of the emitter in world space.</param>
		public virtual void setGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			setGlobalPose(ref mat);
		}
		
		delegate void setGlobalPose_3_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setGlobalPose_3_delegate setGlobalPose_3_delegatefield;
		
		/// <summary>Sets the position of the emitter in world space. </summary>
		/// <param name="vec">New positon in world space.</param>
		public virtual void setGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			setGlobalPosition(ref vec);
		}
		
		delegate void setGlobalPosition_4_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setGlobalPosition_4_delegate setGlobalPosition_4_delegatefield;
		
		/// <summary>Sets the orientation of the emitter in world space. </summary>
		/// <param name="mat">New orientation in world space.</param>
		public virtual void setGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setGlobalOrientation(ref mat);
		}
		
		delegate void setGlobalOrientation_5_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setGlobalOrientation_5_delegate setGlobalOrientation_5_delegatefield;
		
		/// <summary>Returns the pose of the emitter in world space. </summary>
		public NxMat34 getGlobalPose()
		{
			return NxFluidEmitter_getGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns the position of the emitter in world space. </summary>
		public NxVec3 getGlobalPosition()
		{
			return NxFluidEmitter_getGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns the orientation of the emitter in world space. </summary>
		public NxMat33 getGlobalOrientation()
		{
			return NxFluidEmitter_getGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Sets the pose of the emitter relative to the frameShape. </summary>
		/// <param name="mat">The new local pose of the emitter.</param>
		public virtual void setLocalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setLocalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setLocalPose_virtual([In()] ref NxMat34 mat)
		{
			setLocalPose(ref mat);
		}
		
		delegate void setLocalPose_6_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setLocalPose_6_delegate setLocalPose_6_delegatefield;
		
		/// <summary>Sets the position of the emitter relative to the frameShape. </summary>
		/// <param name="vec">The new local position of the emitter.</param>
		public virtual void setLocalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setLocalPosition_virtual([In()] ref NxVec3 vec)
		{
			setLocalPosition(ref vec);
		}
		
		delegate void setLocalPosition_7_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setLocalPosition_7_delegate setLocalPosition_7_delegatefield;
		
		/// <summary>Sets the orientation of the emitter relative to the frameShape. </summary>
		/// <param name="mat">The new local orientation of the emitter.</param>
		public virtual void setLocalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setLocalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setLocalOrientation(ref mat);
		}
		
		delegate void setLocalOrientation_8_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setLocalOrientation_8_delegate setLocalOrientation_8_delegatefield;
		
		/// <summary>Returns the pose of the emitter relative to the frameShape. </summary>
		public NxMat34 getLocalPose()
		{
			return NxFluidEmitter_getLocalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns the position of the emitter relative to the frameShape. </summary>
		public NxVec3 getLocalPosition()
		{
			return NxFluidEmitter_getLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns the orientation of the emitter relative to the frameShape. </summary>
		public NxMat33 getLocalOrientation()
		{
			return NxFluidEmitter_getLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Sets the frame shape. Can be set to NULL. </summary>
		/// <param name="shape">The frame shape.</param>
		public virtual void setFrameShape(NxShape shape)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setFrameShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef));
		}
		
		private void setFrameShape_virtual(IntPtr shape)
		{
			setFrameShape(NxShape.GetClass(shape));
		}
		
		delegate void setFrameShape_9_delegate(IntPtr shape);
		
		
		
		
		
		
		private setFrameShape_9_delegate setFrameShape_9_delegatefield;
		
		/// <summary>Returns the frame shape. May be NULL. </summary>
		public virtual NxShape getFrameShape()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxFluidEmitter_getFrameShape_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getFrameShape_virtual()
		{
			return getFrameShape().ClassPointer.Handle;
		}
		
		delegate IntPtr getFrameShape_10_delegate();
		
		
		
		
		
		
		private getFrameShape_10_delegate getFrameShape_10_delegatefield;
		
		/// <summary>Returns the radius of the emitter along the x axis. </summary>
		public virtual float getDimensionX()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getDimensionX_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDimensionX_virtual()
		{
			return getDimensionX();
		}
		
		delegate float getDimensionX_11_delegate();
		
		
		
		
		
		
		private getDimensionX_11_delegate getDimensionX_11_delegatefield;
		
		/// <summary>Returns the radius of the emitter along the y axis. </summary>
		public virtual float getDimensionY()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getDimensionY_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDimensionY_virtual()
		{
			return getDimensionY();
		}
		
		delegate float getDimensionY_12_delegate();
		
		
		
		
		
		
		private getDimensionY_12_delegate getDimensionY_12_delegatefield;
		
		/// <summary>Sets the maximal random displacement in every dimension. </summary>
		/// <param name="disp">The maximal random displacment of particles.</param>
		public virtual void setRandomPos(NxVec3 disp)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setRandomPos_INVOKE(ClassPointer, doSetFunctionPointers, disp);
		}
		
		private void setRandomPos_virtual(NxVec3 disp)
		{
			setRandomPos(disp);
		}
		
		delegate void setRandomPos_13_delegate(NxVec3 disp);
		
		
		
		
		
		
		private setRandomPos_13_delegate setRandomPos_13_delegatefield;
		
		/// <summary>Returns the maximal random displacement in every dimension. </summary>
		public virtual NxVec3 getRandomPos()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getRandomPos_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getRandomPos_virtual()
		{
			return getRandomPos();
		}
		
		delegate NxVec3 getRandomPos_14_delegate();
		
		
		
		
		
		
		private getRandomPos_14_delegate getRandomPos_14_delegatefield;
		
		/// <summary>Sets the maximal random angle offset (in radians). </summary>
		/// <param name="angle">Maximum random angle for emitted particles.</param>
		public virtual void setRandomAngle(float angle)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setRandomAngle_INVOKE(ClassPointer, doSetFunctionPointers, angle);
		}
		
		private void setRandomAngle_virtual(float angle)
		{
			setRandomAngle(angle);
		}
		
		delegate void setRandomAngle_15_delegate(float angle);
		
		
		
		
		
		
		private setRandomAngle_15_delegate setRandomAngle_15_delegatefield;
		
		/// <summary>Returns the maximal random angle offset (in radians). </summary>
		public virtual float getRandomAngle()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getRandomAngle_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRandomAngle_virtual()
		{
			return getRandomAngle();
		}
		
		delegate float getRandomAngle_16_delegate();
		
		
		
		
		
		
		private getRandomAngle_16_delegate getRandomAngle_16_delegatefield;
		
		/// <summary>Sets the velocity magnitude of the emitted particles. </summary>
		/// <param name="vel">New velocity magnitude of emitted particles.</param>
		public virtual void setFluidVelocityMagnitude(float vel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setFluidVelocityMagnitude_INVOKE(ClassPointer, doSetFunctionPointers, vel);
		}
		
		private void setFluidVelocityMagnitude_virtual(float vel)
		{
			setFluidVelocityMagnitude(vel);
		}
		
		delegate void setFluidVelocityMagnitude_17_delegate(float vel);
		
		
		
		
		
		
		private setFluidVelocityMagnitude_17_delegate setFluidVelocityMagnitude_17_delegatefield;
		
		/// <summary>Returns the velocity magnitude of the emitted particles. </summary>
		public virtual float getFluidVelocityMagnitude()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getFluidVelocityMagnitude_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getFluidVelocityMagnitude_virtual()
		{
			return getFluidVelocityMagnitude();
		}
		
		delegate float getFluidVelocityMagnitude_18_delegate();
		
		
		
		
		
		
		private getFluidVelocityMagnitude_18_delegate getFluidVelocityMagnitude_18_delegatefield;
		
		/// <summary>Sets the emission rate (particles/second). </summary>
		/// <param name="rate">New emission rate.</param>
		public virtual void setRate(float rate)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setRate_INVOKE(ClassPointer, doSetFunctionPointers, rate);
		}
		
		private void setRate_virtual(float rate)
		{
			setRate(rate);
		}
		
		delegate void setRate_19_delegate(float rate);
		
		
		
		
		
		
		private setRate_19_delegate setRate_19_delegatefield;
		
		/// <summary>Returns the emission rate. </summary>
		public virtual float getRate()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getRate_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRate_virtual()
		{
			return getRate();
		}
		
		delegate float getRate_20_delegate();
		
		
		
		
		
		
		private getRate_20_delegate getRate_20_delegatefield;
		
		/// <summary>Sets the particle lifetime. </summary>
		/// <param name="life">Lifetime of emitted particles.</param>
		public virtual void setParticleLifetime(float life)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setParticleLifetime_INVOKE(ClassPointer, doSetFunctionPointers, life);
		}
		
		private void setParticleLifetime_virtual(float life)
		{
			setParticleLifetime(life);
		}
		
		delegate void setParticleLifetime_21_delegate(float life);
		
		
		
		
		
		
		private setParticleLifetime_21_delegate setParticleLifetime_21_delegatefield;
		
		/// <summary>Returns the particle lifetime. </summary>
		public virtual float getParticleLifetime()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getParticleLifetime_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getParticleLifetime_virtual()
		{
			return getParticleLifetime();
		}
		
		delegate float getParticleLifetime_22_delegate();
		
		
		
		
		
		
		private getParticleLifetime_22_delegate getParticleLifetime_22_delegatefield;
		
		/// <summary>Sets the repulsion coefficient. </summary>
		/// <param name="coefficient">The repulsion coefficient in the range from 0 to inf.</param>
		public virtual void setRepulsionCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setRepulsionCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setRepulsionCoefficient_virtual(float coefficient)
		{
			setRepulsionCoefficient(coefficient);
		}
		
		delegate void setRepulsionCoefficient_23_delegate(float coefficient);
		
		
		
		
		
		
		private setRepulsionCoefficient_23_delegate setRepulsionCoefficient_23_delegatefield;
		
		/// <summary>Retrieves the repulsion coefficient. </summary>
		public virtual float getRepulsionCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getRepulsionCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRepulsionCoefficient_virtual()
		{
			return getRepulsionCoefficient();
		}
		
		delegate float getRepulsionCoefficient_24_delegate();
		
		
		
		
		
		
		private getRepulsionCoefficient_24_delegate getRepulsionCoefficient_24_delegatefield;
		
		/// <summary>Resets the particle reservoir. </summary>
		/// <param name="new">maxParticles value.</param>
		public virtual void resetEmission(uint maxParticles)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_resetEmission_INVOKE(ClassPointer, doSetFunctionPointers, maxParticles);
		}
		
		private void resetEmission_virtual(uint maxParticles)
		{
			resetEmission(maxParticles);
		}
		
		delegate void resetEmission_25_delegate(uint maxParticles);
		
		
		
		
		
		
		private resetEmission_25_delegate resetEmission_25_delegatefield;
		
		/// <summary>Returns the maximal particle number to be emitted. </summary>
		public virtual uint getMaxParticles()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getMaxParticles_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getMaxParticles_virtual()
		{
			return getMaxParticles();
		}
		
		delegate uint getMaxParticles_26_delegate();
		
		
		
		
		
		
		private getMaxParticles_26_delegate getMaxParticles_26_delegatefield;
		
		/// <summary>Returns the number of particles that have been emitted already. </summary>
		public virtual uint getNbParticlesEmitted()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getNbParticlesEmitted_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbParticlesEmitted_virtual()
		{
			return getNbParticlesEmitted();
		}
		
		delegate uint getNbParticlesEmitted_27_delegate();
		
		
		
		
		
		
		private getNbParticlesEmitted_27_delegate getNbParticlesEmitted_27_delegatefield;
		
		/// <summary>Sets the emitter flags. </summary>
		/// <param name="flag">Member of NxFluidEmitterFlag. </param>
		/// <param name="val">New flag value.</param>
		public virtual void setFlag(NxFluidEmitterFlag flag, bool val)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setFlag_INVOKE(ClassPointer, doSetFunctionPointers, flag, val);
		}
		
		private void setFlag_virtual(NxFluidEmitterFlag flag, bool val)
		{
			setFlag(flag, val);
		}
		
		delegate void setFlag_28_delegate(NxFluidEmitterFlag flag, bool val);
		
		
		
		
		
		
		private setFlag_28_delegate setFlag_28_delegatefield;
		
		/// <summary>Returns the emitter flags. </summary>
		/// <param name="flag">Member of NxFluidEmitterFlag. </param>
		public virtual int getFlag(NxFluidEmitterFlag flag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getFlag_INVOKE(ClassPointer, doSetFunctionPointers, flag);
		}
		
		private int getFlag_virtual(NxFluidEmitterFlag flag)
		{
			return getFlag(flag);
		}
		
		delegate int getFlag_29_delegate(NxFluidEmitterFlag flag);
		
		
		
		
		
		
		private getFlag_29_delegate getFlag_29_delegatefield;
		
		/// <summary>Get the emitter shape. </summary>
		/// <param name="shape">Member of NxEmitterShape. </param>
		public virtual int getShape(NxEmitterShape shape)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getShape_INVOKE(ClassPointer, doSetFunctionPointers, shape);
		}
		
		private int getShape_virtual(NxEmitterShape shape)
		{
			return getShape(shape);
		}
		
		delegate int getShape_30_delegate(NxEmitterShape shape);
		
		
		
		
		
		
		private getShape_30_delegate getShape_30_delegatefield;
		
		/// <summary>Get the emitter type. </summary>
		/// <param name="type">Member of NxEmitterType</param>
		public virtual int getType(NxEmitterType type)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getType_INVOKE(ClassPointer, doSetFunctionPointers, type);
		}
		
		private int getType_virtual(NxEmitterType type)
		{
			return getType(type);
		}
		
		delegate int getType_31_delegate(NxEmitterType type);
		
		
		
		
		
		
		private getType_31_delegate getType_31_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">The new name.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFluidEmitter_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_32_delegate(string name);
		
		
		
		
		
		
		private setName_32_delegate setName_32_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFluidEmitter_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_33_delegate();
		
		
		
		
		
		
		private getName_33_delegate getName_33_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_loadFromDesc")]
        private extern static System.Boolean NxFluidEmitter_loadFromDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_saveToDesc")]
        private extern static System.Boolean NxFluidEmitter_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidEmitter_userData")]
        private extern static void set_NxFluidEmitter_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidEmitter_userData")]
        private extern static System.IntPtr get_NxFluidEmitter_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxFluidEmitter")]
        private extern static IntPtr new_NxFluidEmitter_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getFluid")]
        private extern static IntPtr NxFluidEmitter_getFluid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setGlobalPose")]
        private extern static void NxFluidEmitter_setGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setGlobalPosition")]
        private extern static void NxFluidEmitter_setGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setGlobalOrientation")]
        private extern static void NxFluidEmitter_setGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getGlobalPose")]
        private extern static NxMat34 NxFluidEmitter_getGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getGlobalPosition")]
        private extern static NxVec3 NxFluidEmitter_getGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getGlobalOrientation")]
        private extern static NxMat33 NxFluidEmitter_getGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setLocalPose")]
        private extern static void NxFluidEmitter_setLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setLocalPosition")]
        private extern static void NxFluidEmitter_setLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setLocalOrientation")]
        private extern static void NxFluidEmitter_setLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getLocalPose")]
        private extern static NxMat34 NxFluidEmitter_getLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getLocalPosition")]
        private extern static NxVec3 NxFluidEmitter_getLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getLocalOrientation")]
        private extern static NxMat33 NxFluidEmitter_getLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setFrameShape")]
        private extern static void NxFluidEmitter_setFrameShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getFrameShape")]
        private extern static IntPtr NxFluidEmitter_getFrameShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getDimensionX")]
        private extern static System.Single NxFluidEmitter_getDimensionX_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getDimensionY")]
        private extern static System.Single NxFluidEmitter_getDimensionY_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setRandomPos")]
        private extern static void NxFluidEmitter_setRandomPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxVec3 disp);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getRandomPos")]
        private extern static NxVec3 NxFluidEmitter_getRandomPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setRandomAngle")]
        private extern static void NxFluidEmitter_setRandomAngle_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single angle);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getRandomAngle")]
        private extern static System.Single NxFluidEmitter_getRandomAngle_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setFluidVelocityMagnitude")]
        private extern static void NxFluidEmitter_setFluidVelocityMagnitude_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single vel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getFluidVelocityMagnitude")]
        private extern static System.Single NxFluidEmitter_getFluidVelocityMagnitude_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setRate")]
        private extern static void NxFluidEmitter_setRate_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single rate);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getRate")]
        private extern static System.Single NxFluidEmitter_getRate_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setParticleLifetime")]
        private extern static void NxFluidEmitter_setParticleLifetime_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single life);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getParticleLifetime")]
        private extern static System.Single NxFluidEmitter_getParticleLifetime_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setRepulsionCoefficient")]
        private extern static void NxFluidEmitter_setRepulsionCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getRepulsionCoefficient")]
        private extern static System.Single NxFluidEmitter_getRepulsionCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_resetEmission")]
        private extern static void NxFluidEmitter_resetEmission_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 maxParticles);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getMaxParticles")]
        private extern static System.UInt32 NxFluidEmitter_getMaxParticles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getNbParticlesEmitted")]
        private extern static System.UInt32 NxFluidEmitter_getNbParticlesEmitted_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setFlag")]
        private extern static void NxFluidEmitter_setFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxFluidEmitterFlag flag, System.Boolean val);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getFlag")]
        private extern static System.Int32 NxFluidEmitter_getFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxFluidEmitterFlag flag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getShape")]
        private extern static System.Int32 NxFluidEmitter_getShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxEmitterShape shape);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getType")]
        private extern static System.Int32 NxFluidEmitter_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxEmitterType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_setName")]
        private extern static void NxFluidEmitter_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidEmitter_getName")]
        private extern static System.String NxFluidEmitter_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxFluidEmitter GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxFluidEmitter)(obj.Target));
				}
			}
			return new NxFluidEmitter(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			loadFromDesc_0_delegatefield = new loadFromDesc_0_delegate(this.loadFromDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadFromDesc_0_delegatefield));
			saveToDesc_1_delegatefield = new saveToDesc_1_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_1_delegatefield));
			getFluid_2_delegatefield = new getFluid_2_delegate(this.getFluid_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFluid_2_delegatefield));
			setGlobalPose_3_delegatefield = new setGlobalPose_3_delegate(this.setGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPose_3_delegatefield));
			setGlobalPosition_4_delegatefield = new setGlobalPosition_4_delegate(this.setGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPosition_4_delegatefield));
			setGlobalOrientation_5_delegatefield = new setGlobalOrientation_5_delegate(this.setGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalOrientation_5_delegatefield));
			setLocalPose_6_delegatefield = new setLocalPose_6_delegate(this.setLocalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalPose_6_delegatefield));
			setLocalPosition_7_delegatefield = new setLocalPosition_7_delegate(this.setLocalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalPosition_7_delegatefield));
			setLocalOrientation_8_delegatefield = new setLocalOrientation_8_delegate(this.setLocalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalOrientation_8_delegatefield));
			setFrameShape_9_delegatefield = new setFrameShape_9_delegate(this.setFrameShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFrameShape_9_delegatefield));
			getFrameShape_10_delegatefield = new getFrameShape_10_delegate(this.getFrameShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFrameShape_10_delegatefield));
			getDimensionX_11_delegatefield = new getDimensionX_11_delegate(this.getDimensionX_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDimensionX_11_delegatefield));
			getDimensionY_12_delegatefield = new getDimensionY_12_delegate(this.getDimensionY_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDimensionY_12_delegatefield));
			setRandomPos_13_delegatefield = new setRandomPos_13_delegate(this.setRandomPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRandomPos_13_delegatefield));
			getRandomPos_14_delegatefield = new getRandomPos_14_delegate(this.getRandomPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRandomPos_14_delegatefield));
			setRandomAngle_15_delegatefield = new setRandomAngle_15_delegate(this.setRandomAngle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRandomAngle_15_delegatefield));
			getRandomAngle_16_delegatefield = new getRandomAngle_16_delegate(this.getRandomAngle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRandomAngle_16_delegatefield));
			setFluidVelocityMagnitude_17_delegatefield = new setFluidVelocityMagnitude_17_delegate(this.setFluidVelocityMagnitude_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFluidVelocityMagnitude_17_delegatefield));
			getFluidVelocityMagnitude_18_delegatefield = new getFluidVelocityMagnitude_18_delegate(this.getFluidVelocityMagnitude_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFluidVelocityMagnitude_18_delegatefield));
			setRate_19_delegatefield = new setRate_19_delegate(this.setRate_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRate_19_delegatefield));
			getRate_20_delegatefield = new getRate_20_delegate(this.getRate_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRate_20_delegatefield));
			setParticleLifetime_21_delegatefield = new setParticleLifetime_21_delegate(this.setParticleLifetime_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setParticleLifetime_21_delegatefield));
			getParticleLifetime_22_delegatefield = new getParticleLifetime_22_delegate(this.getParticleLifetime_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getParticleLifetime_22_delegatefield));
			setRepulsionCoefficient_23_delegatefield = new setRepulsionCoefficient_23_delegate(this.setRepulsionCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRepulsionCoefficient_23_delegatefield));
			getRepulsionCoefficient_24_delegatefield = new getRepulsionCoefficient_24_delegate(this.getRepulsionCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRepulsionCoefficient_24_delegatefield));
			resetEmission_25_delegatefield = new resetEmission_25_delegate(this.resetEmission_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetEmission_25_delegatefield));
			getMaxParticles_26_delegatefield = new getMaxParticles_26_delegate(this.getMaxParticles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMaxParticles_26_delegatefield));
			getNbParticlesEmitted_27_delegatefield = new getNbParticlesEmitted_27_delegate(this.getNbParticlesEmitted_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbParticlesEmitted_27_delegatefield));
			setFlag_28_delegatefield = new setFlag_28_delegate(this.setFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlag_28_delegatefield));
			getFlag_29_delegatefield = new getFlag_29_delegate(this.getFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlag_29_delegatefield));
			getShape_30_delegatefield = new getShape_30_delegate(this.getShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShape_30_delegatefield));
			getType_31_delegatefield = new getType_31_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_31_delegatefield));
			setName_32_delegatefield = new setName_32_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_32_delegatefield));
			getName_33_delegatefield = new getName_33_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_33_delegatefield));
			return list;
		}
	}
}
