//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSceneQueryDesc : DoxyBindObject
	{
		
		internal NxSceneQueryDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The callback class used to return results from the batched queries. </summary>
		public NxSceneQueryReport report
		{
			get
			{
				return NxSceneQueryReport.GetClass(get_NxSceneQueryDesc_report_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneQueryDesc_report_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>The method used to execute the queries. ie synchronous or asynchronous. </summary>
		public NxSceneQueryExecuteMode executeMode
		{
			get
			{
				NxSceneQueryExecuteMode value = get_NxSceneQueryDesc_executeMode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneQueryDesc_executeMode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxSceneQueryDesc() : 
				base(new_NxSceneQueryDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public void setToDefault()
		{
			NxSceneQueryDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public bool isValid()
		{
			return NxSceneQueryDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneQueryDesc_report")]
        private extern static void set_NxSceneQueryDesc_report_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneQueryDesc_report")]
        private extern static IntPtr get_NxSceneQueryDesc_report_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneQueryDesc_executeMode")]
        private extern static void set_NxSceneQueryDesc_executeMode_INVOKE (HandleRef classPointer, NxSceneQueryExecuteMode newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneQueryDesc_executeMode")]
        private extern static NxSceneQueryExecuteMode get_NxSceneQueryDesc_executeMode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSceneQueryDesc")]
        private extern static IntPtr new_NxSceneQueryDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryDesc_setToDefault")]
        private extern static void NxSceneQueryDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneQueryDesc_isValid")]
        private extern static System.Boolean NxSceneQueryDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSceneQueryDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSceneQueryDesc)(obj.Target));
				}
			}
			return new NxSceneQueryDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
