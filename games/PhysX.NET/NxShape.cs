//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxShape : DoxyBindObject
	{
		
		internal NxShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The setLocal*() methods set the pose of the shape in actor space, i.e. relative to the actor they are owned by. </summary>
		/// <param name="mat">The new transform from the actor frame to the shape frame. Range: rigid body transform</param>
		public virtual void setLocalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setLocalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setLocalPose_virtual([In()] ref NxMat34 mat)
		{
			setLocalPose(ref mat);
		}
		
		delegate void setLocalPose_0_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setLocalPose_0_delegate setLocalPose_0_delegatefield;
		
		/// <summary>The setLocal*() methods set the pose of the shape in actor space, i.e. relative to the actor they are owned by. </summary>
		/// <param name="vec">The new position of the shape relative to the actor frame. Range: position vector</param>
		public virtual void setLocalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setLocalPosition_virtual([In()] ref NxVec3 vec)
		{
			setLocalPosition(ref vec);
		}
		
		delegate void setLocalPosition_1_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setLocalPosition_1_delegate setLocalPosition_1_delegatefield;
		
		/// <summary>The setLocal*() methods set the pose of the shape in actor space, i.e. relative to the actor they are owned by. </summary>
		/// <param name="mat">The new orientation relative to the actor frame. Range: rotation matrix</param>
		public virtual void setLocalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setLocalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setLocalOrientation(ref mat);
		}
		
		delegate void setLocalOrientation_2_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setLocalOrientation_2_delegate setLocalOrientation_2_delegatefield;
		
		/// <summary>The getLocal*() methods retrieve the pose of the shape in actor space, i.e. relative to the actor they are owned by. This transformation is identity by default. </summary>
		public virtual NxMat34 getLocalPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getLocalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getLocalPose_virtual()
		{
			return getLocalPose();
		}
		
		delegate NxMat34 getLocalPose_3_delegate();
		
		
		
		
		
		
		private getLocalPose_3_delegate getLocalPose_3_delegatefield;
		
		/// <summary>The getLocal*() methods retrieve the pose of the shape in actor space, i.e. relative to the actor they are owned by. </summary>
		public virtual NxVec3 getLocalPosition()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getLocalPosition_virtual()
		{
			return getLocalPosition();
		}
		
		delegate NxVec3 getLocalPosition_4_delegate();
		
		
		
		
		
		
		private getLocalPosition_4_delegate getLocalPosition_4_delegatefield;
		
		/// <summary>The getLocal*() methods retrieve the pose of the shape in actor space, i.e. relative to the actor they are owned by. This transformation is identity by default. </summary>
		public virtual NxMat33 getLocalOrientation()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getLocalOrientation_virtual()
		{
			return getLocalOrientation();
		}
		
		delegate NxMat33 getLocalOrientation_5_delegate();
		
		
		
		
		
		
		private getLocalOrientation_5_delegate getLocalOrientation_5_delegatefield;
		
		/// <summary>The setGlobal() calls are convenience methods which transform the passed parameter into the current local space of the actor and then call setLocalPose(). </summary>
		/// <param name="mat">The new shape pose, relative to the global frame. Range: rigid body transform</param>
		public virtual void setGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			setGlobalPose(ref mat);
		}
		
		delegate void setGlobalPose_6_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setGlobalPose_6_delegate setGlobalPose_6_delegatefield;
		
		/// <summary>The setGlobal() calls are convenience methods which transform the passed parameter into the current local space of the actor and then call setLocalPose(). </summary>
		/// <param name="vec">The new shape position, relative to the global frame. Range: position vector</param>
		public virtual void setGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			setGlobalPosition(ref vec);
		}
		
		delegate void setGlobalPosition_7_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setGlobalPosition_7_delegate setGlobalPosition_7_delegatefield;
		
		/// <summary>The setGlobal() calls are convenience methods which transform the passed parameter into the current local space of the actor and then call setLocalPose(). </summary>
		/// <param name="mat">The new shape orientation relative to the global frame. Range: orientation matrix</param>
		public virtual void setGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setGlobalOrientation(ref mat);
		}
		
		delegate void setGlobalOrientation_8_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setGlobalOrientation_8_delegate setGlobalOrientation_8_delegatefield;
		
		/// <summary>The getGlobal*() methods retrieve the shape's current world space pose. This is the local pose multiplied by the actor's current global pose. </summary>
		public virtual NxMat34 getGlobalPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getGlobalPose_virtual()
		{
			return getGlobalPose();
		}
		
		delegate NxMat34 getGlobalPose_9_delegate();
		
		
		
		
		
		
		private getGlobalPose_9_delegate getGlobalPose_9_delegatefield;
		
		/// <summary>The getGlobal*() methods retrieve the shape's current world space pose. This is the local pose multiplied by the actor's current global pose. </summary>
		public virtual NxVec3 getGlobalPosition()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getGlobalPosition_virtual()
		{
			return getGlobalPosition();
		}
		
		delegate NxVec3 getGlobalPosition_10_delegate();
		
		
		
		
		
		
		private getGlobalPosition_10_delegate getGlobalPosition_10_delegatefield;
		
		/// <summary>The getGlobal*() methods retrieve the shape's current world space pose. This is the local pose multiplied by the actor's current global pose. </summary>
		public virtual NxMat33 getGlobalOrientation()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getGlobalOrientation_virtual()
		{
			return getGlobalOrientation();
		}
		
		delegate NxMat33 getGlobalOrientation_11_delegate();
		
		
		
		
		
		
		private getGlobalOrientation_11_delegate getGlobalOrientation_11_delegatefield;
		
		/// <summary>Type casting operator. The result may be cast to the desired subclass type. </summary>
		/// <param name="type">The type of shape to attempt a cast to. </param>
		public virtual System.IntPtr @is(NxShapeType type)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_is_INVOKE(ClassPointer, doSetFunctionPointers, type);
		}
		
		private System.IntPtr is_virtual(NxShapeType type)
		{
			return @is(type);
		}
		
		delegate System.IntPtr is_12_delegate(NxShapeType type);
		
		
		
		
		
		
		private is_12_delegate is_12_delegatefield;
		
		
		/// <summary>Attempts to cast to an NxPlaneShape. </summary>
		public NxPlaneShape isPlane()
		{
			return NxPlaneShape.GetClass(NxShape_isPlane_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxSphereShape. </summary>
		public NxSphereShape isSphere()
		{
			return NxSphereShape.GetClass(NxShape_isSphere_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxBoxShape. </summary>
		public NxBoxShape isBox()
		{
			return NxBoxShape.GetClass(NxShape_isBox_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxCapsuleShape. </summary>
		public NxCapsuleShape isCapsule()
		{
			return NxCapsuleShape.GetClass(NxShape_isCapsule_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxWheelShape. </summary>
		public NxWheelShape isWheel()
		{
			return NxWheelShape.GetClass(NxShape_isWheel_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxConvexShape. </summary>
		public NxConvexShape isConvexMesh()
		{
			return NxConvexShape.GetClass(NxShape_isConvexMesh_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxTriangleMeshShape. </summary>
		public NxTriangleMeshShape isTriangleMesh()
		{
			return NxTriangleMeshShape.GetClass(NxShape_isTriangleMesh_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Attempts to cast to an NxHeightFieldShape. </summary>
		public NxHeightFieldShape isHeightField()
		{
			return NxHeightFieldShape.GetClass(NxShape_isHeightField_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>casts a world-space ray against the shape. </summary>
		/// <param name="worldRay">The ray to intersect against the shape in the global frame. Range See NxRay</param>
		/// <param name="maxDist">The maximum distance to check along the ray. Range: (0,inf) </param>
		/// <param name="hintFlags">a combination of NxRaycastBit flags. Specifies which members of NxRaycastHit the user is interested in(eg normal, material etc) </param>
		/// <param name="hit">Retrieves the information computed from a ray intersection </param>
		/// <param name="firstHit">is a hint saying you're only interested in a boolean answer. </param>
		public virtual bool raycast(NxRay worldRay, float maxDist, uint hintFlags, NxRaycastHit hit, bool firstHit)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_raycast_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), maxDist, hintFlags, (hit!=null ? hit.ClassPointer : NullRef), firstHit);
		}
		
		private bool raycast_virtual(IntPtr worldRay, float maxDist, uint hintFlags, IntPtr hit, bool firstHit)
		{
			return raycast(NxRay.GetClass(worldRay), maxDist, hintFlags, NxRaycastHit.GetClass(hit), firstHit);
		}
		
		delegate bool raycast_14_delegate(IntPtr worldRay, float maxDist, uint hintFlags, IntPtr hit, bool firstHit);
		
		
		
		
		
		
		private raycast_14_delegate raycast_14_delegatefield;
		
		/// <summary>Checks whether the shape overlaps a world-space sphere or not. </summary>
		/// <param name="worldSphere">The sphere description in the global frame to test against. Range: See NxSphere</param>
		public virtual bool checkOverlapSphere(NxSphere worldSphere)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_checkOverlapSphere_INVOKE(ClassPointer, doSetFunctionPointers, (worldSphere!=null ? worldSphere.ClassPointer : NullRef));
		}
		
		private bool checkOverlapSphere_virtual(IntPtr worldSphere)
		{
			return checkOverlapSphere(NxSphere.GetClass(worldSphere));
		}
		
		delegate bool checkOverlapSphere_15_delegate(IntPtr worldSphere);
		
		
		
		
		
		
		private checkOverlapSphere_15_delegate checkOverlapSphere_15_delegatefield;
		
		/// <summary>Checks whether the shape overlaps a world-space OBB or not. </summary>
		/// <param name="worldBox">The world space oriented box to check against. Range: See NxBox</param>
		public virtual bool checkOverlapOBB(NxBox worldBox)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_checkOverlapOBB_INVOKE(ClassPointer, doSetFunctionPointers, (worldBox!=null ? worldBox.ClassPointer : NullRef));
		}
		
		private bool checkOverlapOBB_virtual(IntPtr worldBox)
		{
			return checkOverlapOBB(NxBox.GetClass(worldBox));
		}
		
		delegate bool checkOverlapOBB_16_delegate(IntPtr worldBox);
		
		
		
		
		
		
		private checkOverlapOBB_16_delegate checkOverlapOBB_16_delegatefield;
		
		/// <summary>Checks whether the shape overlaps a world-space AABB or not. </summary>
		/// <param name="worldBounds">The world space axis aligned box to check against. Range: See NxBounds3</param>
		public virtual bool checkOverlapAABB(NxBounds3 worldBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_checkOverlapAABB_INVOKE(ClassPointer, doSetFunctionPointers, (worldBounds!=null ? worldBounds.ClassPointer : NullRef));
		}
		
		private bool checkOverlapAABB_virtual(IntPtr worldBounds)
		{
			return checkOverlapAABB(NxBounds3.GetClass(worldBounds));
		}
		
		delegate bool checkOverlapAABB_17_delegate(IntPtr worldBounds);
		
		
		
		
		
		
		private checkOverlapAABB_17_delegate checkOverlapAABB_17_delegatefield;
		
		/// <summary>Checks whether the shape overlaps a world-space capsule or not. </summary>
		/// <param name="worldCapsule">The world space capsule to check against. Range: See NxCapsule</param>
		public virtual bool checkOverlapCapsule(NxCapsule worldCapsule)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_checkOverlapCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef));
		}
		
		private bool checkOverlapCapsule_virtual(IntPtr worldCapsule)
		{
			return checkOverlapCapsule(NxCapsule.GetClass(worldCapsule));
		}
		
		delegate bool checkOverlapCapsule_18_delegate(IntPtr worldCapsule);
		
		
		
		
		
		
		private checkOverlapCapsule_18_delegate checkOverlapCapsule_18_delegatefield;
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxShape_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxShape_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>used internally, do not change. </summary>
		public System.IntPtr appData
		{
			get
			{
				System.IntPtr value = get_NxShape_appData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxShape_appData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxShape() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxShape_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Retrieves the actor which this shape is associated with. </summary>
		public virtual NxActor getActor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor.GetClass(NxShape_getActor_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getActor_virtual()
		{
			return getActor().ClassPointer.Handle;
		}
		
		delegate IntPtr getActor_19_delegate();
		
		
		
		
		
		
		private getActor_19_delegate getActor_19_delegatefield;
		
		/// <summary>Sets which collision group this shape is part of. </summary>
		/// <param name="collisionGroup">The collision group for this shape.</param>
		public virtual void setGroup(ushort collisionGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setGroup_INVOKE(ClassPointer, doSetFunctionPointers, collisionGroup);
		}
		
		private void setGroup_virtual(ushort collisionGroup)
		{
			setGroup(collisionGroup);
		}
		
		delegate void setGroup_20_delegate(ushort collisionGroup);
		
		
		
		
		
		
		private setGroup_20_delegate setGroup_20_delegatefield;
		
		/// <summary>Retrieves the value set with setGroup(). </summary>
		public virtual ushort getGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getGroup_virtual()
		{
			return getGroup();
		}
		
		delegate ushort getGroup_21_delegate();
		
		
		
		
		
		
		private getGroup_21_delegate getGroup_21_delegatefield;
		
		/// <summary>Returns a world space AABB enclosing this shape. </summary>
		/// <param name="dest">Retrieves the world space bounds.</param>
		public virtual void getWorldBounds(NxBounds3 dest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_getWorldBounds_INVOKE(ClassPointer, doSetFunctionPointers, (dest!=null ? dest.ClassPointer : NullRef));
		}
		
		private void getWorldBounds_virtual(IntPtr dest)
		{
			getWorldBounds(NxBounds3.GetClass(dest));
		}
		
		delegate void getWorldBounds_22_delegate(IntPtr dest);
		
		
		
		
		
		
		private getWorldBounds_22_delegate getWorldBounds_22_delegatefield;
		
		/// <summary>Sets shape flags. </summary>
		/// <param name="flag">The new shape flags to set for this shape. See NxShapeFlag. </param>
		/// <param name="value">True to set the flags. False to clear the flags specified in flag.</param>
		public virtual void setFlag(NxShapeFlag flag, bool value)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setFlag_INVOKE(ClassPointer, doSetFunctionPointers, flag, value);
		}
		
		private void setFlag_virtual(NxShapeFlag flag, bool value)
		{
			setFlag(flag, value);
		}
		
		delegate void setFlag_23_delegate(NxShapeFlag flag, bool value);
		
		
		
		
		
		
		private setFlag_23_delegate setFlag_23_delegatefield;
		
		/// <summary>Retrieves shape flags. </summary>
		/// <param name="flag">The flag to retrieve. </param>
		public virtual int getFlag(NxShapeFlag flag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getFlag_INVOKE(ClassPointer, doSetFunctionPointers, flag);
		}
		
		private int getFlag_virtual(NxShapeFlag flag)
		{
			return getFlag(flag);
		}
		
		delegate int getFlag_24_delegate(NxShapeFlag flag);
		
		
		
		
		
		
		private getFlag_24_delegate getFlag_24_delegatefield;
		
		/// <summary>Assigns a material index to the shape. </summary>
		/// <param name="matIndex">The material index to assign to the shape. See NxMaterial</param>
		public virtual void setMaterial(ushort matIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setMaterial_INVOKE(ClassPointer, doSetFunctionPointers, matIndex);
		}
		
		private void setMaterial_virtual(ushort matIndex)
		{
			setMaterial(matIndex);
		}
		
		delegate void setMaterial_25_delegate(ushort matIndex);
		
		
		
		
		
		
		private setMaterial_25_delegate setMaterial_25_delegatefield;
		
		/// <summary>Retrieves the material index currently assigned to the shape. </summary>
		public virtual ushort getMaterial()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getMaterial_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getMaterial_virtual()
		{
			return getMaterial();
		}
		
		delegate ushort getMaterial_26_delegate();
		
		
		
		
		
		
		private getMaterial_26_delegate getMaterial_26_delegatefield;
		
		/// <summary>Sets the skin width. See NxShapeDesc::skinWidth. </summary>
		/// <param name="skinWidth">The new skin width. Range: (0,inf)</param>
		public virtual void setSkinWidth(float skinWidth)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setSkinWidth_INVOKE(ClassPointer, doSetFunctionPointers, skinWidth);
		}
		
		private void setSkinWidth_virtual(float skinWidth)
		{
			setSkinWidth(skinWidth);
		}
		
		delegate void setSkinWidth_27_delegate(float skinWidth);
		
		
		
		
		
		
		private setSkinWidth_27_delegate setSkinWidth_27_delegatefield;
		
		/// <summary>Retrieves the skin width. See NxShapeDesc::skinWidth. </summary>
		public virtual float getSkinWidth()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getSkinWidth_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSkinWidth_virtual()
		{
			return getSkinWidth();
		}
		
		delegate float getSkinWidth_28_delegate();
		
		
		
		
		
		
		private getSkinWidth_28_delegate getSkinWidth_28_delegatefield;
		
		/// <summary>returns the type of shape. </summary>
		public virtual NxShapeType getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxShapeType getType_virtual()
		{
			return getType();
		}
		
		delegate NxShapeType getType_29_delegate();
		
		
		
		
		
		
		private getType_29_delegate getType_29_delegatefield;
		
		/// <summary>Assigns a CCD Skeleton mesh. </summary>
		/// <param name="ccdSkel">The CCDSkeleton to assign to the shape.</param>
		public virtual void setCCDSkeleton(NxCCDSkeleton ccdSkel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setCCDSkeleton_INVOKE(ClassPointer, doSetFunctionPointers, (ccdSkel!=null ? ccdSkel.ClassPointer : NullRef));
		}
		
		private void setCCDSkeleton_virtual(IntPtr ccdSkel)
		{
			setCCDSkeleton(NxCCDSkeleton.GetClass(ccdSkel));
		}
		
		delegate void setCCDSkeleton_30_delegate(IntPtr ccdSkel);
		
		
		
		
		
		
		private setCCDSkeleton_30_delegate setCCDSkeleton_30_delegatefield;
		
		/// <summary>Retrieves the CCDSkeleton for this shape. </summary>
		public virtual NxCCDSkeleton getCCDSkeleton()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton.GetClass(NxShape_getCCDSkeleton_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getCCDSkeleton_virtual()
		{
			return getCCDSkeleton().ClassPointer.Handle;
		}
		
		delegate IntPtr getCCDSkeleton_31_delegate();
		
		
		
		
		
		
		private getCCDSkeleton_31_delegate getCCDSkeleton_31_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">The name string to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_32_delegate(string name);
		
		
		
		
		
		
		private setName_32_delegate setName_32_delegatefield;
		
		/// <summary>retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_33_delegate();
		
		
		
		
		
		
		private getName_33_delegate getName_33_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. See comments for NxGroupsMask. </summary>
		/// <param name="mask">The group mask to set for the shape.</param>
		public virtual void setGroupsMask(NxGroupsMask mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers, (mask!=null ? mask.ClassPointer : NullRef));
		}
		
		private void setGroupsMask_virtual(IntPtr mask)
		{
			setGroupsMask(NxGroupsMask.GetClass(mask));
		}
		
		delegate void setGroupsMask_34_delegate(IntPtr mask);
		
		
		
		
		
		
		private setGroupsMask_34_delegate setGroupsMask_34_delegatefield;
		
		/// <summary>Gets 128-bit mask used for collision filtering. See comments for NxGroupsMask. </summary>
		public virtual NxGroupsMask getGroupsMask()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxGroupsMask.GetClass(NxShape_getGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getGroupsMask_virtual()
		{
			return getGroupsMask().ClassPointer.Handle;
		}
		
		delegate IntPtr getGroupsMask_35_delegate();
		
		
		
		
		
		
		private getGroupsMask_35_delegate getGroupsMask_35_delegatefield;
		
		/// <summary>Returns which compartment types the shape should not interact with. </summary>
		public virtual uint getNonInteractingCompartmentTypes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape_getNonInteractingCompartmentTypes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNonInteractingCompartmentTypes_virtual()
		{
			return getNonInteractingCompartmentTypes();
		}
		
		delegate uint getNonInteractingCompartmentTypes_36_delegate();
		
		
		
		
		
		
		private getNonInteractingCompartmentTypes_36_delegate getNonInteractingCompartmentTypes_36_delegatefield;
		
		/// <summary>Sets which compartment types the shape should not interact with. </summary>
		/// <param name="compartmentTypes">A combination of NxShapeCompartmentType values.</param>
		public virtual void setNonInteractingCompartmentTypes(uint compartmentTypes)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxShape_setNonInteractingCompartmentTypes_INVOKE(ClassPointer, doSetFunctionPointers, compartmentTypes);
		}
		
		private void setNonInteractingCompartmentTypes_virtual(uint compartmentTypes)
		{
			setNonInteractingCompartmentTypes(compartmentTypes);
		}
		
		delegate void setNonInteractingCompartmentTypes_37_delegate(uint compartmentTypes);
		
		
		
		
		
		
		private setNonInteractingCompartmentTypes_37_delegate setNonInteractingCompartmentTypes_37_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setLocalPose")]
        private extern static void NxShape_setLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setLocalPosition")]
        private extern static void NxShape_setLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setLocalOrientation")]
        private extern static void NxShape_setLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getLocalPose")]
        private extern static NxMat34 NxShape_getLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getLocalPosition")]
        private extern static NxVec3 NxShape_getLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getLocalOrientation")]
        private extern static NxMat33 NxShape_getLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setGlobalPose")]
        private extern static void NxShape_setGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setGlobalPosition")]
        private extern static void NxShape_setGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setGlobalOrientation")]
        private extern static void NxShape_setGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getGlobalPose")]
        private extern static NxMat34 NxShape_getGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getGlobalPosition")]
        private extern static NxVec3 NxShape_getGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getGlobalOrientation")]
        private extern static NxMat33 NxShape_getGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_is")]
        private extern static System.IntPtr NxShape_is_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_is_1")]
        private extern static System.IntPtr NxShape_is_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isPlane")]
        private extern static IntPtr NxShape_isPlane_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isPlane_1")]
        private extern static IntPtr NxShape_isPlane_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isSphere")]
        private extern static IntPtr NxShape_isSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isSphere_1")]
        private extern static IntPtr NxShape_isSphere_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isBox")]
        private extern static IntPtr NxShape_isBox_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isBox_1")]
        private extern static IntPtr NxShape_isBox_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isCapsule")]
        private extern static IntPtr NxShape_isCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isCapsule_1")]
        private extern static IntPtr NxShape_isCapsule_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isWheel")]
        private extern static IntPtr NxShape_isWheel_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isWheel_1")]
        private extern static IntPtr NxShape_isWheel_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isConvexMesh")]
        private extern static IntPtr NxShape_isConvexMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isConvexMesh_1")]
        private extern static IntPtr NxShape_isConvexMesh_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isTriangleMesh")]
        private extern static IntPtr NxShape_isTriangleMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isTriangleMesh_1")]
        private extern static IntPtr NxShape_isTriangleMesh_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isHeightField")]
        private extern static IntPtr NxShape_isHeightField_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_isHeightField_1")]
        private extern static IntPtr NxShape_isHeightField_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_raycast")]
        private extern static System.Boolean NxShape_raycast_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, System.Single maxDist, System.UInt32 hintFlags, HandleRef hit, System.Boolean firstHit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_checkOverlapSphere")]
        private extern static System.Boolean NxShape_checkOverlapSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldSphere);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_checkOverlapOBB")]
        private extern static System.Boolean NxShape_checkOverlapOBB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBox);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_checkOverlapAABB")]
        private extern static System.Boolean NxShape_checkOverlapAABB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_checkOverlapCapsule")]
        private extern static System.Boolean NxShape_checkOverlapCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxShape_userData")]
        private extern static void set_NxShape_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxShape_userData")]
        private extern static System.IntPtr get_NxShape_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxShape_appData")]
        private extern static void set_NxShape_appData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxShape_appData")]
        private extern static System.IntPtr get_NxShape_appData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxShape")]
        private extern static IntPtr new_NxShape_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getActor")]
        private extern static IntPtr NxShape_getActor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setGroup")]
        private extern static void NxShape_setGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 collisionGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getGroup")]
        private extern static System.UInt16 NxShape_getGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getWorldBounds")]
        private extern static void NxShape_getWorldBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef dest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setFlag")]
        private extern static void NxShape_setFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeFlag flag, System.Boolean value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getFlag")]
        private extern static System.Int32 NxShape_getFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeFlag flag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setMaterial")]
        private extern static void NxShape_setMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 matIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getMaterial")]
        private extern static System.UInt16 NxShape_getMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setSkinWidth")]
        private extern static void NxShape_setSkinWidth_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single skinWidth);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getSkinWidth")]
        private extern static System.Single NxShape_getSkinWidth_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getType")]
        private extern static NxShapeType NxShape_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setCCDSkeleton")]
        private extern static void NxShape_setCCDSkeleton_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef ccdSkel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getCCDSkeleton")]
        private extern static IntPtr NxShape_getCCDSkeleton_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setName")]
        private extern static void NxShape_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getName")]
        private extern static System.String NxShape_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setGroupsMask")]
        private extern static void NxShape_setGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getGroupsMask")]
        private extern static IntPtr NxShape_getGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_getNonInteractingCompartmentTypes")]
        private extern static System.UInt32 NxShape_getNonInteractingCompartmentTypes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxShape_setNonInteractingCompartmentTypes")]
        private extern static void NxShape_setNonInteractingCompartmentTypes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 compartmentTypes);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxShape)(obj.Target));
				}
			}
			return new NxShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setLocalPose_0_delegatefield = new setLocalPose_0_delegate(this.setLocalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalPose_0_delegatefield));
			setLocalPosition_1_delegatefield = new setLocalPosition_1_delegate(this.setLocalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalPosition_1_delegatefield));
			setLocalOrientation_2_delegatefield = new setLocalOrientation_2_delegate(this.setLocalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLocalOrientation_2_delegatefield));
			getLocalPose_3_delegatefield = new getLocalPose_3_delegate(this.getLocalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLocalPose_3_delegatefield));
			getLocalPosition_4_delegatefield = new getLocalPosition_4_delegate(this.getLocalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLocalPosition_4_delegatefield));
			getLocalOrientation_5_delegatefield = new getLocalOrientation_5_delegate(this.getLocalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLocalOrientation_5_delegatefield));
			setGlobalPose_6_delegatefield = new setGlobalPose_6_delegate(this.setGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPose_6_delegatefield));
			setGlobalPosition_7_delegatefield = new setGlobalPosition_7_delegate(this.setGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPosition_7_delegatefield));
			setGlobalOrientation_8_delegatefield = new setGlobalOrientation_8_delegate(this.setGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalOrientation_8_delegatefield));
			getGlobalPose_9_delegatefield = new getGlobalPose_9_delegate(this.getGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalPose_9_delegatefield));
			getGlobalPosition_10_delegatefield = new getGlobalPosition_10_delegate(this.getGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalPosition_10_delegatefield));
			getGlobalOrientation_11_delegatefield = new getGlobalOrientation_11_delegate(this.getGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalOrientation_11_delegatefield));
			is_12_delegatefield = new is_12_delegate(this.is_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(is_12_delegatefield));
			list.Add(Marshal.GetFunctionPointerForDelegate(is_12_delegatefield));
			raycast_14_delegatefield = new raycast_14_delegate(this.raycast_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycast_14_delegatefield));
			checkOverlapSphere_15_delegatefield = new checkOverlapSphere_15_delegate(this.checkOverlapSphere_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapSphere_15_delegatefield));
			checkOverlapOBB_16_delegatefield = new checkOverlapOBB_16_delegate(this.checkOverlapOBB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapOBB_16_delegatefield));
			checkOverlapAABB_17_delegatefield = new checkOverlapAABB_17_delegate(this.checkOverlapAABB_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapAABB_17_delegatefield));
			checkOverlapCapsule_18_delegatefield = new checkOverlapCapsule_18_delegate(this.checkOverlapCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkOverlapCapsule_18_delegatefield));
			getActor_19_delegatefield = new getActor_19_delegate(this.getActor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getActor_19_delegatefield));
			setGroup_20_delegatefield = new setGroup_20_delegate(this.setGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroup_20_delegatefield));
			getGroup_21_delegatefield = new getGroup_21_delegate(this.getGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroup_21_delegatefield));
			getWorldBounds_22_delegatefield = new getWorldBounds_22_delegate(this.getWorldBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWorldBounds_22_delegatefield));
			setFlag_23_delegatefield = new setFlag_23_delegate(this.setFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlag_23_delegatefield));
			getFlag_24_delegatefield = new getFlag_24_delegate(this.getFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlag_24_delegatefield));
			setMaterial_25_delegatefield = new setMaterial_25_delegate(this.setMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMaterial_25_delegatefield));
			getMaterial_26_delegatefield = new getMaterial_26_delegate(this.getMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMaterial_26_delegatefield));
			setSkinWidth_27_delegatefield = new setSkinWidth_27_delegate(this.setSkinWidth_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSkinWidth_27_delegatefield));
			getSkinWidth_28_delegatefield = new getSkinWidth_28_delegate(this.getSkinWidth_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSkinWidth_28_delegatefield));
			getType_29_delegatefield = new getType_29_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_29_delegatefield));
			setCCDSkeleton_30_delegatefield = new setCCDSkeleton_30_delegate(this.setCCDSkeleton_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCCDSkeleton_30_delegatefield));
			getCCDSkeleton_31_delegatefield = new getCCDSkeleton_31_delegate(this.getCCDSkeleton_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCCDSkeleton_31_delegatefield));
			setName_32_delegatefield = new setName_32_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_32_delegatefield));
			getName_33_delegatefield = new getName_33_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_33_delegatefield));
			setGroupsMask_34_delegatefield = new setGroupsMask_34_delegate(this.setGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroupsMask_34_delegatefield));
			getGroupsMask_35_delegatefield = new getGroupsMask_35_delegate(this.getGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroupsMask_35_delegatefield));
			getNonInteractingCompartmentTypes_36_delegatefield = new getNonInteractingCompartmentTypes_36_delegate(this.getNonInteractingCompartmentTypes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNonInteractingCompartmentTypes_36_delegatefield));
			setNonInteractingCompartmentTypes_37_delegatefield = new setNonInteractingCompartmentTypes_37_delegate(this.setNonInteractingCompartmentTypes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setNonInteractingCompartmentTypes_37_delegatefield));
			return list;
		}
	}
}
