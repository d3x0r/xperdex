//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxContactPair : DoxyBindObject
	{
		
		internal NxContactPair(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The two actors that make up the pair. </summary>
		public DoxyBindArray<NxActor> actors
		{
			get
			{
				IntPtr[] value = new IntPtr[2];
				get_NxContactPair_actors_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxContactPair_actors_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Use this to create stream iter. See NxContactStreamIterator. </summary>
		public uint stream
		{
			get
			{
				uint value = get_NxContactPair_stream_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxContactPair_stream_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The total contact normal force that was applied for this pair, to maintain nonpenetration constraints. You should set NX_NOTIFY_FORCES in order to receive this value. </summary>
		public NxVec3 sumNormalForce
		{
			get
			{
				NxVec3 value = get_NxContactPair_sumNormalForce_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxContactPair_sumNormalForce_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The total tangential force that was applied for this pair. You should set NX_NOTIFY_FORCES in order to receive this value. </summary>
		public NxVec3 sumFrictionForce
		{
			get
			{
				NxVec3 value = get_NxContactPair_sumFrictionForce_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxContactPair_sumFrictionForce_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Specifies for each actor of the pair if the actor has been deleted. </summary>
		public bool[] isDeletedActor
		{
			get
			{
				bool[] value = new bool[2];
				get_NxContactPair_isDeletedActor_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxContactPair_isDeletedActor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxContactPair() : 
				base(new_NxContactPair_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactPair_actors")]
        private extern static void set_NxContactPair_actors_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] IntPtr[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactPair_actors")]
        private extern static void get_NxContactPair_actors_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] IntPtr[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactPair_stream")]
        private extern static void set_NxContactPair_stream_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactPair_stream")]
        private extern static System.UInt32 get_NxContactPair_stream_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactPair_sumNormalForce")]
        private extern static void set_NxContactPair_sumNormalForce_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactPair_sumNormalForce")]
        private extern static NxVec3 get_NxContactPair_sumNormalForce_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactPair_sumFrictionForce")]
        private extern static void set_NxContactPair_sumFrictionForce_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactPair_sumFrictionForce")]
        private extern static NxVec3 get_NxContactPair_sumFrictionForce_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactPair_isDeletedActor")]
        private extern static void set_NxContactPair_isDeletedActor_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] System.Boolean[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactPair_isDeletedActor")]
        private extern static void get_NxContactPair_isDeletedActor_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] System.Boolean[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxContactPair")]
        private extern static IntPtr new_NxContactPair_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxContactPair GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxContactPair)(obj.Target));
				}
			}
			return new NxContactPair(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
