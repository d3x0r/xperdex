//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxConvexMeshDesc : DoxyBindObject
	{
		
		internal NxConvexMeshDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Number of vertices. </summary>
		public uint numVertices
		{
			get
			{
				uint value = get_NxConvexMeshDesc_numVertices_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_numVertices_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Number of triangles. </summary>
		public uint numTriangles
		{
			get
			{
				uint value = get_NxConvexMeshDesc_numTriangles_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_numTriangles_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Offset between vertex points in bytes. </summary>
		public uint pointStrideBytes
		{
			get
			{
				uint value = get_NxConvexMeshDesc_pointStrideBytes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_pointStrideBytes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Offset between triangles in bytes. </summary>
		public uint triangleStrideBytes
		{
			get
			{
				uint value = get_NxConvexMeshDesc_triangleStrideBytes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_triangleStrideBytes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Pointer to array of vertex positions. Pointer to first vertex point. Caller may add pointStrideBytes bytes to the pointer to access the next point. </summary>
		public System.IntPtr points
		{
			get
			{
				System.IntPtr value = get_NxConvexMeshDesc_points_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_points_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Pointer to array of triangle indices. </summary>
		public System.IntPtr triangles
		{
			get
			{
				System.IntPtr value = get_NxConvexMeshDesc_triangles_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_triangles_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Flags bits, combined from values of the enum NxConvexFlags. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxConvexMeshDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxConvexMeshDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>constructor sets to default. </summary>
		public NxConvexMeshDesc() : 
				base(new_NxConvexMeshDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxConvexMeshDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxConvexMeshDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_numVertices")]
        private extern static void set_NxConvexMeshDesc_numVertices_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_numVertices")]
        private extern static System.UInt32 get_NxConvexMeshDesc_numVertices_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_numTriangles")]
        private extern static void set_NxConvexMeshDesc_numTriangles_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_numTriangles")]
        private extern static System.UInt32 get_NxConvexMeshDesc_numTriangles_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_pointStrideBytes")]
        private extern static void set_NxConvexMeshDesc_pointStrideBytes_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_pointStrideBytes")]
        private extern static System.UInt32 get_NxConvexMeshDesc_pointStrideBytes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_triangleStrideBytes")]
        private extern static void set_NxConvexMeshDesc_triangleStrideBytes_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_triangleStrideBytes")]
        private extern static System.UInt32 get_NxConvexMeshDesc_triangleStrideBytes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_points")]
        private extern static void set_NxConvexMeshDesc_points_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_points")]
        private extern static System.IntPtr get_NxConvexMeshDesc_points_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_triangles")]
        private extern static void set_NxConvexMeshDesc_triangles_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_triangles")]
        private extern static System.IntPtr get_NxConvexMeshDesc_triangles_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxConvexMeshDesc_flags")]
        private extern static void set_NxConvexMeshDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxConvexMeshDesc_flags")]
        private extern static System.UInt32 get_NxConvexMeshDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxConvexMeshDesc")]
        private extern static IntPtr new_NxConvexMeshDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMeshDesc_setToDefault")]
        private extern static void NxConvexMeshDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxConvexMeshDesc_isValid")]
        private extern static System.Boolean NxConvexMeshDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxConvexMeshDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxConvexMeshDesc)(obj.Target));
				}
			}
			return new NxConvexMeshDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
