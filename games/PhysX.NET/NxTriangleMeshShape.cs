//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxTriangleMeshShape : NxShape
	{
		
		internal NxTriangleMeshShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public virtual void saveToDesc(NxTriangleMeshShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxTriangleMeshShape_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxTriangleMeshShapeDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Retrieves the triangle mesh data associated with this instance. </summary>
		public virtual NxTriangleMesh getTriangleMesh()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMesh.GetClass(NxTriangleMeshShape_getTriangleMesh_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getTriangleMesh_virtual()
		{
			return getTriangleMesh().ClassPointer.Handle;
		}
		
		delegate IntPtr getTriangleMesh_1_delegate();
		
		
		
		
		
		
		private getTriangleMesh_1_delegate getTriangleMesh_1_delegatefield;
		
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="triangle">triangle points in local or world space. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">true to return triangle's position in world space, else false for local space </param>
		/// <param name="worldSpaceRotation">true to return triangle's orientation in world space, else false for local space </param>
		public virtual uint getTriangle(NxTriangle triangle, NxTriangle edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_getTriangle_INVOKE(ClassPointer, doSetFunctionPointers, (triangle!=null ? triangle.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex, worldSpaceTranslation, worldSpaceRotation);
		}
		
		private uint getTriangle_virtual(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation)
		{
			return getTriangle(NxTriangle.GetClass(triangle), NxTriangle.GetClass(edgeTri), flags, triangleIndex, worldSpaceTranslation, worldSpaceRotation);
		}
		
		delegate uint getTriangle_3_delegate(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation);
		
		
		
		
		
		
		private getTriangle_3_delegate getTriangle_3_delegatefield;
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="triangle">triangle points in local or world space. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">true to return triangle's position in world space, else false for local space </param>
		/// <param name="worldSpaceRotation">true to return triangle's orientation in world space, else false for local space </param>
		public virtual uint getTriangle(NxTriangle triangle, NxTriangle edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_getTriangle_1_INVOKE(ClassPointer, doSetFunctionPointers, (triangle!=null ? triangle.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex, worldSpaceTranslation);
		}
		
		private uint getTriangle_virtual(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation)
		{
			return getTriangle(NxTriangle.GetClass(triangle), NxTriangle.GetClass(edgeTri), flags, triangleIndex, worldSpaceTranslation);
		}
		
		delegate uint getTriangle_4_delegate(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation);
		
		
		
		
		
		
		private getTriangle_4_delegate getTriangle_4_delegatefield;
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="triangle">triangle points in local or world space. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">true to return triangle's position in world space, else false for local space </param>
		/// <param name="worldSpaceRotation">true to return triangle's orientation in world space, else false for local space </param>
		public virtual uint getTriangle(NxTriangle triangle, NxTriangle edgeTri, uint[] flags, uint triangleIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_getTriangle_2_INVOKE(ClassPointer, doSetFunctionPointers, (triangle!=null ? triangle.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex);
		}
		
		private uint getTriangle_virtual(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex)
		{
			return getTriangle(NxTriangle.GetClass(triangle), NxTriangle.GetClass(edgeTri), flags, triangleIndex);
		}
		
		delegate uint getTriangle_5_delegate(IntPtr triangle, IntPtr edgeTri, uint[] flags, uint triangleIndex);
		
		
		
		
		
		
		private getTriangle_5_delegate getTriangle_5_delegatefield;
		
		/// <summary>Finds triangles touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against. In object or world space depending on NxQueryFlags. Range: See NxBounds3</param>
		/// <param name="flags">Controls if the bounds are in object or world space and if we return first contact only. See NxQueryFlags. </param>
		/// <param name="nb">Retrieves the number of triangle indices touching the AABB. </param>
		/// <param name="indices">Returns an array of touching triangle indices. </param>
		public bool overlapAABBTriangles(NxBounds3 bounds, uint flags, ref uint nb, ref uint[] indices)
		{
			return NxTriangleMeshShape_overlapAABBTriangles_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, ref nb, ref indices);
		}
		
		/// <summary></summary>
		public virtual bool overlapAABBTrianglesDeprecated(NxBounds3 bounds, uint flags, ref uint nb, ref uint[] indices)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_overlapAABBTrianglesDeprecated_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, ref nb, ref indices);
		}
		
		private bool overlapAABBTrianglesDeprecated_virtual(IntPtr bounds, uint flags, [In()] [Out()] ref uint nb, [In()] ref uint[] indices)
		{
			return overlapAABBTrianglesDeprecated(NxBounds3.GetClass(bounds), flags, ref nb, ref indices);
		}
		
		delegate bool overlapAABBTrianglesDeprecated_6_delegate(IntPtr bounds, uint flags, [In()] [Out()] ref uint nb, [In()] ref uint[] indices);
		
		
		
		
		
		
		private overlapAABBTrianglesDeprecated_6_delegate overlapAABBTrianglesDeprecated_6_delegatefield;
		
		/// <summary>Finds triangles touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against. In object or world space depending on NxQueryFlags. Range: See NxBounds3</param>
		/// <param name="flags">Controls if the bounds are in object or world space and if we return first contact only. See NxQueryFlags. </param>
		/// <param name="callback">Used to return triangles which intersect the AABB </param>
		public virtual bool overlapAABBTriangles(NxBounds3 bounds, uint flags, NxUserEntityReport callback)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_overlapAABBTriangles_1_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, (callback!=null ? callback.ClassPointer : NullRef));
		}
		
		private bool overlapAABBTriangles_virtual(IntPtr bounds, uint flags, IntPtr callback)
		{
			return overlapAABBTriangles(NxBounds3.GetClass(bounds), flags, NxUserEntityReport.GetClass(callback));
		}
		
		delegate bool overlapAABBTriangles_7_delegate(IntPtr bounds, uint flags, IntPtr callback);
		
		
		
		
		
		
		private overlapAABBTriangles_7_delegate overlapAABBTriangles_7_delegatefield;
		
		/// <summary>Send a page to the PhysX processor. </summary>
		/// <param name="pageIndex">the index of the page to map. Pages are indexed sequentially starting from zero. </param>
		public virtual bool mapPageInstance(uint pageIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_mapPageInstance_INVOKE(ClassPointer, doSetFunctionPointers, pageIndex);
		}
		
		private bool mapPageInstance_virtual(uint pageIndex)
		{
			return mapPageInstance(pageIndex);
		}
		
		delegate bool mapPageInstance_8_delegate(uint pageIndex);
		
		
		
		
		
		
		private mapPageInstance_8_delegate mapPageInstance_8_delegatefield;
		
		/// <summary>Release a page instance from the PhysX processor. </summary>
		/// <param name="pageIndex">the index of the page to unmap. Pages are indexed sequentially starting from zero.</param>
		public virtual void unmapPageInstance(uint pageIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxTriangleMeshShape_unmapPageInstance_INVOKE(ClassPointer, doSetFunctionPointers, pageIndex);
		}
		
		private void unmapPageInstance_virtual(uint pageIndex)
		{
			unmapPageInstance(pageIndex);
		}
		
		delegate void unmapPageInstance_9_delegate(uint pageIndex);
		
		
		
		
		
		
		private unmapPageInstance_9_delegate unmapPageInstance_9_delegatefield;
		
		/// <summary>Determine whether a page instance is present from the PhysX processor. </summary>
		/// <param name="pageIndex">the index of the page being queried. Pages are indexed sequentially starting from zero. </param>
		public virtual bool isPageInstanceMapped(uint pageIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxTriangleMeshShape_isPageInstanceMapped_INVOKE(ClassPointer, doSetFunctionPointers, pageIndex);
		}
		
		private bool isPageInstanceMapped_virtual(uint pageIndex)
		{
			return isPageInstanceMapped(pageIndex);
		}
		
		delegate bool isPageInstanceMapped_10_delegate(uint pageIndex);
		
		
		
		
		
		
		private isPageInstanceMapped_10_delegate isPageInstanceMapped_10_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_saveToDesc")]
        private extern static void NxTriangleMeshShape_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_getTriangleMesh")]
        private extern static IntPtr NxTriangleMeshShape_getTriangleMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_getTriangleMesh_1")]
        private extern static IntPtr NxTriangleMeshShape_getTriangleMesh_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_getTriangle")]
        private extern static System.UInt32 NxTriangleMeshShape_getTriangle_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef triangle, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex, System.Boolean worldSpaceTranslation, System.Boolean worldSpaceRotation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_getTriangle_1")]
        private extern static System.UInt32 NxTriangleMeshShape_getTriangle_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef triangle, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex, System.Boolean worldSpaceTranslation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_getTriangle_2")]
        private extern static System.UInt32 NxTriangleMeshShape_getTriangle_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef triangle, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_overlapAABBTriangles")]
        private extern static System.Boolean NxTriangleMeshShape_overlapAABBTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_overlapAABBTrianglesDeprecated")]
        private extern static System.Boolean NxTriangleMeshShape_overlapAABBTrianglesDeprecated_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_overlapAABBTriangles_1")]
        private extern static System.Boolean NxTriangleMeshShape_overlapAABBTriangles_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, HandleRef callback);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_mapPageInstance")]
        private extern static System.Boolean NxTriangleMeshShape_mapPageInstance_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 pageIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_unmapPageInstance")]
        private extern static void NxTriangleMeshShape_unmapPageInstance_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 pageIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxTriangleMeshShape_isPageInstanceMapped")]
        private extern static System.Boolean NxTriangleMeshShape_isPageInstanceMapped_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 pageIndex);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxTriangleMeshShape")]
        private extern static IntPtr new_NxTriangleMeshShape_INVOKE (bool do_override);

		
		protected NxTriangleMeshShape() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxTriangleMeshShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxTriangleMeshShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxTriangleMeshShape_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxTriangleMeshShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxTriangleMeshShape)(obj.Target));
				}
			}
			return new NxTriangleMeshShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getTriangleMesh_1_delegatefield = new getTriangleMesh_1_delegate(this.getTriangleMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangleMesh_1_delegatefield));
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangleMesh_1_delegatefield));
			getTriangle_3_delegatefield = new getTriangle_3_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_3_delegatefield));
			getTriangle_4_delegatefield = new getTriangle_4_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_4_delegatefield));
			getTriangle_5_delegatefield = new getTriangle_5_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_5_delegatefield));
			overlapAABBTrianglesDeprecated_6_delegatefield = new overlapAABBTrianglesDeprecated_6_delegate(this.overlapAABBTrianglesDeprecated_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTrianglesDeprecated_6_delegatefield));
			overlapAABBTriangles_7_delegatefield = new overlapAABBTriangles_7_delegate(this.overlapAABBTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTriangles_7_delegatefield));
			mapPageInstance_8_delegatefield = new mapPageInstance_8_delegate(this.mapPageInstance_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(mapPageInstance_8_delegatefield));
			unmapPageInstance_9_delegatefield = new unmapPageInstance_9_delegate(this.unmapPageInstance_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(unmapPageInstance_9_delegatefield));
			isPageInstanceMapped_10_delegatefield = new isPageInstanceMapped_10_delegate(this.isPageInstanceMapped_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isPageInstanceMapped_10_delegatefield));
			return list;
		}
	}
}
