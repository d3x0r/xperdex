//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxExtendedBounds3 : DoxyBindObject
	{
		
		internal NxExtendedBounds3(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public NxExtendedVec3 min
		{
			get
			{
				NxExtendedVec3 value = get_NxExtendedBounds3_min_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedBounds3_min_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxExtendedVec3 max
		{
			get
			{
				NxExtendedVec3 value = get_NxExtendedBounds3_max_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedBounds3_max_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxExtendedBounds3() : 
				base(new_NxExtendedBounds3_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public void setEmpty()
		{
			NxExtendedBounds3_setEmpty_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void set(double minx, double miny, double minz, double maxx, double maxy, double maxz)
		{
			NxExtendedBounds3_set_INVOKE(ClassPointer, doSetFunctionPointers, minx, miny, minz, maxx, maxy, maxz);
		}
		
		/// <summary></summary>
		public void set(ref NxExtendedVec3 _min, ref NxExtendedVec3 _max)
		{
			NxExtendedBounds3_set_1_INVOKE(ClassPointer, doSetFunctionPointers, ref _min, ref _max);
		}
		
		/// <summary></summary>
		public void setCenterExtents(ref NxExtendedVec3 c, ref NxVec3 e)
		{
			NxExtendedBounds3_setCenterExtents_INVOKE(ClassPointer, doSetFunctionPointers, ref c, ref e);
		}
		
		/// <summary></summary>
		public void getCenter(ref NxExtendedVec3 center)
		{
			NxExtendedBounds3_getCenter_INVOKE(ClassPointer, doSetFunctionPointers, ref center);
		}
		
		/// <summary></summary>
		public double getCenter(uint axis)
		{
			return NxExtendedBounds3_getCenter_1_INVOKE(ClassPointer, doSetFunctionPointers, axis);
		}
		
		/// <summary></summary>
		public void getExtents(ref NxVec3 extents)
		{
			NxExtendedBounds3_getExtents_INVOKE(ClassPointer, doSetFunctionPointers, ref extents);
		}
		
		/// <summary></summary>
		public double getExtents(uint axis)
		{
			return NxExtendedBounds3_getExtents_1_INVOKE(ClassPointer, doSetFunctionPointers, axis);
		}
		
		/// <summary></summary>
		public bool intersect(NxExtendedBounds3 b)
		{
			return NxExtendedBounds3_intersect_INVOKE(ClassPointer, doSetFunctionPointers, (b!=null ? b.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public void boundsOfOBB(ref NxMat33 orientation, ref NxExtendedVec3 translation, ref NxVec3 halfDims)
		{
			NxExtendedBounds3_boundsOfOBB_INVOKE(ClassPointer, doSetFunctionPointers, ref orientation, ref translation, ref halfDims);
		}
		
		/// <summary></summary>
		public void transform(ref NxMat33 orientation, ref NxExtendedVec3 translation)
		{
			NxExtendedBounds3_transform_INVOKE(ClassPointer, doSetFunctionPointers, ref orientation, ref translation);
		}
		
		/// <summary></summary>
		public void add(NxExtendedBounds3 b2)
		{
			NxExtendedBounds3_add_INVOKE(ClassPointer, doSetFunctionPointers, (b2!=null ? b2.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public bool isInside(NxExtendedBounds3 box)
		{
			return NxExtendedBounds3_isInside_INVOKE(ClassPointer, doSetFunctionPointers, (box!=null ? box.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public void scale(float scale)
		{
			NxExtendedBounds3_scale_INVOKE(ClassPointer, doSetFunctionPointers, scale);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedBounds3_min")]
        private extern static void set_NxExtendedBounds3_min_INVOKE (HandleRef classPointer, NxExtendedVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedBounds3_min")]
        private extern static NxExtendedVec3 get_NxExtendedBounds3_min_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedBounds3_max")]
        private extern static void set_NxExtendedBounds3_max_INVOKE (HandleRef classPointer, NxExtendedVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedBounds3_max")]
        private extern static NxExtendedVec3 get_NxExtendedBounds3_max_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxExtendedBounds3")]
        private extern static IntPtr new_NxExtendedBounds3_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_setEmpty")]
        private extern static void NxExtendedBounds3_setEmpty_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_set")]
        private extern static void NxExtendedBounds3_set_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double minx, System.Double miny, System.Double minz, System.Double maxx, System.Double maxy, System.Double maxz);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_set_1")]
        private extern static void NxExtendedBounds3_set_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxExtendedVec3 _min, [In()] ref NxExtendedVec3 _max);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_setCenterExtents")]
        private extern static void NxExtendedBounds3_setCenterExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxExtendedVec3 c, [In()] ref NxVec3 e);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_getCenter")]
        private extern static void NxExtendedBounds3_getCenter_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxExtendedVec3 center);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_getCenter_1")]
        private extern static System.Double NxExtendedBounds3_getCenter_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 axis);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_getExtents")]
        private extern static void NxExtendedBounds3_getExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 extents);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_getExtents_1")]
        private extern static System.Double NxExtendedBounds3_getExtents_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 axis);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_intersect")]
        private extern static System.Boolean NxExtendedBounds3_intersect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_boundsOfOBB")]
        private extern static void NxExtendedBounds3_boundsOfOBB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 orientation, [In()] ref NxExtendedVec3 translation, [In()] ref NxVec3 halfDims);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_transform")]
        private extern static void NxExtendedBounds3_transform_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 orientation, [In()] ref NxExtendedVec3 translation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_add")]
        private extern static void NxExtendedBounds3_add_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef b2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_isInside")]
        private extern static System.Boolean NxExtendedBounds3_isInside_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef box);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedBounds3_scale")]
        private extern static void NxExtendedBounds3_scale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single scale);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxExtendedBounds3 GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxExtendedBounds3)(obj.Target));
				}
			}
			return new NxExtendedBounds3(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
