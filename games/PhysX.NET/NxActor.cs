//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxActor : DoxyBindObject
	{
		
		internal NxActor(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Methods for setting a dynamic actor's pose in the world. </summary>
		/// <param name="mat">Transformation from the actors local frame to the global frame. Range: rigid body transform.</param>
		public virtual void setGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			setGlobalPose(ref mat);
		}
		
		delegate void setGlobalPose_0_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setGlobalPose_0_delegate setGlobalPose_0_delegatefield;
		
		/// <summary>Sets a dynamic actor's position in the world. </summary>
		/// <param name="vec">New position for the actors frame relative to the global frame. Range: position vector</param>
		public virtual void setGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			setGlobalPosition(ref vec);
		}
		
		delegate void setGlobalPosition_1_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setGlobalPosition_1_delegate setGlobalPosition_1_delegatefield;
		
		/// <summary>Sets a dynamic actor's orientation in the world. </summary>
		/// <param name="mat">New orientation for the actors frame. Range: rotation matrix.</param>
		public virtual void setGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setGlobalOrientation(ref mat);
		}
		
		delegate void setGlobalOrientation_2_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setGlobalOrientation_2_delegate setGlobalOrientation_2_delegatefield;
		
		/// <summary>Sets a dynamic actor's orientation in the world. </summary>
		/// <param name="mat">New orientation for the actors frame.</param>
		public virtual void setGlobalOrientationQuat(ref NxQuat mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setGlobalOrientationQuat_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setGlobalOrientationQuat_virtual([In()] ref NxQuat mat)
		{
			setGlobalOrientationQuat(ref mat);
		}
		
		delegate void setGlobalOrientationQuat_3_delegate([In()] ref NxQuat mat);
		
		
		
		
		
		
		private setGlobalOrientationQuat_3_delegate setGlobalOrientationQuat_3_delegatefield;
		
		/// <summary>Retrieves the actors world space transform. </summary>
		public virtual NxMat34 getGlobalPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getGlobalPose_virtual()
		{
			return getGlobalPose();
		}
		
		delegate NxMat34 getGlobalPose_4_delegate();
		
		
		
		
		
		
		private getGlobalPose_4_delegate getGlobalPose_4_delegatefield;
		
		/// <summary>Retrieves the actors world space position. </summary>
		public virtual NxVec3 getGlobalPosition()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getGlobalPosition_virtual()
		{
			return getGlobalPosition();
		}
		
		delegate NxVec3 getGlobalPosition_5_delegate();
		
		
		
		
		
		
		private getGlobalPosition_5_delegate getGlobalPosition_5_delegatefield;
		
		/// <summary>Retrieves the actors world space orientation. </summary>
		public virtual NxMat33 getGlobalOrientation()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getGlobalOrientation_virtual()
		{
			return getGlobalOrientation();
		}
		
		delegate NxMat33 getGlobalOrientation_6_delegate();
		
		
		
		
		
		
		private getGlobalOrientation_6_delegate getGlobalOrientation_6_delegatefield;
		
		/// <summary>Retrieves the actors world space orientation. </summary>
		public virtual NxQuat getGlobalOrientationQuat()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalOrientationQuat_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxQuat getGlobalOrientationQuat_virtual()
		{
			return getGlobalOrientationQuat();
		}
		
		delegate NxQuat getGlobalOrientationQuat_7_delegate();
		
		
		
		
		
		
		private getGlobalOrientationQuat_7_delegate getGlobalOrientationQuat_7_delegatefield;
		
		/// <summary>The moveGlobal* calls serve to move kinematically controlled dynamic actors through the game world. </summary>
		/// <param name="mat">The desired pose for the kinematic actor, in the global frame. Range: rigid body transform.</param>
		public virtual void moveGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_moveGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void moveGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			moveGlobalPose(ref mat);
		}
		
		delegate void moveGlobalPose_8_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private moveGlobalPose_8_delegate moveGlobalPose_8_delegatefield;
		
		/// <summary>The moveGlobal* calls serve to move kinematically controlled dynamic actors through the game world. </summary>
		/// <param name="vec">The desired position for the kinematic actor, in the global frame. Range: position vector</param>
		public virtual void moveGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_moveGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void moveGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			moveGlobalPosition(ref vec);
		}
		
		delegate void moveGlobalPosition_9_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private moveGlobalPosition_9_delegate moveGlobalPosition_9_delegatefield;
		
		/// <summary>The moveGlobal* calls serve to move kinematically controlled dynamic actors through the game world. </summary>
		/// <param name="mat">The desired orientation for the kinematic actor, in the global frame. Range: rotation matrix.</param>
		public virtual void moveGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_moveGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void moveGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			moveGlobalOrientation(ref mat);
		}
		
		delegate void moveGlobalOrientation_10_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private moveGlobalOrientation_10_delegate moveGlobalOrientation_10_delegatefield;
		
		/// <summary>The moveGlobal* calls serve to move kinematically controlled dynamic actors through the game world. </summary>
		/// <param name="quat">The desired orientation quaternion for the kinematic actor, in the global frame.</param>
		public virtual void moveGlobalOrientationQuat(ref NxQuat quat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_moveGlobalOrientationQuat_INVOKE(ClassPointer, doSetFunctionPointers, ref quat);
		}
		
		private void moveGlobalOrientationQuat_virtual([In()] ref NxQuat quat)
		{
			moveGlobalOrientationQuat(ref quat);
		}
		
		delegate void moveGlobalOrientationQuat_11_delegate([In()] ref NxQuat quat);
		
		
		
		
		
		
		private moveGlobalOrientationQuat_11_delegate moveGlobalOrientationQuat_11_delegatefield;
		
		/// <summary>Creates a new shape and adds it to the list of shapes of this actor. </summary>
		/// <param name="desc">The descriptor for the new shape. See e.g. NxSphereShapeDesc. </param>
		public virtual NxShape createShape(NxShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxActor_createShape_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef)));
		}
		
		private IntPtr createShape_virtual(IntPtr desc)
		{
			return createShape(NxShapeDesc.GetClass(desc)).ClassPointer.Handle;
		}
		
		delegate IntPtr createShape_12_delegate(IntPtr desc);
		
		
		
		
		
		
		private createShape_12_delegate createShape_12_delegatefield;
		
		/// <summary>Deletes the specified shape. </summary>
		/// <param name="shape">Shape to be released.</param>
		public virtual void releaseShape(NxShape shape)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_releaseShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef));
		}
		
		private void releaseShape_virtual(IntPtr shape)
		{
			releaseShape(NxShape.GetClass(shape));
		}
		
		delegate void releaseShape_13_delegate(IntPtr shape);
		
		
		
		
		
		
		private releaseShape_13_delegate releaseShape_13_delegatefield;
		
		/// <summary>Returns the number of shapes assigned to the actor. </summary>
		public virtual uint getNbShapes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getNbShapes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbShapes_virtual()
		{
			return getNbShapes();
		}
		
		delegate uint getNbShapes_14_delegate();
		
		
		
		
		
		
		private getNbShapes_14_delegate getNbShapes_14_delegatefield;
		
		/// <summary>Returns an array of shape pointers belonging to the actor. </summary>
		public virtual DoxyBindArray<NxShape> getShapes()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getShapes_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private IntPtr[] getShapes_virtual()
		{
			return getShapes();
		}
		
		delegate IntPtr[] getShapes_15_delegate();
		
		
		
		
		
		
		private getShapes_15_delegate getShapes_15_delegatefield;
		
		/// <summary>The setCMassOffsetLocal*() methods set the pose of the center of mass relative to the actor. </summary>
		/// <param name="mat">Mass frame offset transform relative to the actor frame. Range: rigid body transform.</param>
		public virtual void setCMassOffsetLocalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetLocalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassOffsetLocalPose_virtual([In()] ref NxMat34 mat)
		{
			setCMassOffsetLocalPose(ref mat);
		}
		
		delegate void setCMassOffsetLocalPose_16_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setCMassOffsetLocalPose_16_delegate setCMassOffsetLocalPose_16_delegatefield;
		
		/// <summary>The setCMassOffsetLocal*() methods set the pose of the center of mass relative to the actor. </summary>
		/// <param name="vec">Mass frame offset relative to the actor frame. Range: position vector</param>
		public virtual void setCMassOffsetLocalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setCMassOffsetLocalPosition_virtual([In()] ref NxVec3 vec)
		{
			setCMassOffsetLocalPosition(ref vec);
		}
		
		delegate void setCMassOffsetLocalPosition_17_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setCMassOffsetLocalPosition_17_delegate setCMassOffsetLocalPosition_17_delegatefield;
		
		/// <summary>The setCMassOffsetLocal*() methods set the pose of the center of mass relative to the actor. </summary>
		/// <param name="mat">Mass frame orientation offset relative to the actor frame. Range: rotation matrix.</param>
		public virtual void setCMassOffsetLocalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassOffsetLocalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setCMassOffsetLocalOrientation(ref mat);
		}
		
		delegate void setCMassOffsetLocalOrientation_18_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setCMassOffsetLocalOrientation_18_delegate setCMassOffsetLocalOrientation_18_delegatefield;
		
		/// <summary>The setCMassOffsetGlobal*() methods set the pose of the center of mass relative to world space. </summary>
		/// <param name="mat">Mass frame offset transform relative to the global frame. Range: rigid body transform.</param>
		public virtual void setCMassOffsetGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassOffsetGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			setCMassOffsetGlobalPose(ref mat);
		}
		
		delegate void setCMassOffsetGlobalPose_19_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setCMassOffsetGlobalPose_19_delegate setCMassOffsetGlobalPose_19_delegatefield;
		
		/// <summary>The setCMassOffsetGlobal*() methods set the pose of the center of mass relative to world space. </summary>
		/// <param name="vec">Mass frame offset relative to the global frame. Range: position vector</param>
		public virtual void setCMassOffsetGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setCMassOffsetGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			setCMassOffsetGlobalPosition(ref vec);
		}
		
		delegate void setCMassOffsetGlobalPosition_20_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setCMassOffsetGlobalPosition_20_delegate setCMassOffsetGlobalPosition_20_delegatefield;
		
		/// <summary>The setCMassOffsetGlobal*() methods set the pose of the center of mass relative to world space. </summary>
		/// <param name="mat">Mass frame orientation offset relative to the global frame. Range: rotation matrix.</param>
		public virtual void setCMassOffsetGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassOffsetGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassOffsetGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setCMassOffsetGlobalOrientation(ref mat);
		}
		
		delegate void setCMassOffsetGlobalOrientation_21_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setCMassOffsetGlobalOrientation_21_delegate setCMassOffsetGlobalOrientation_21_delegatefield;
		
		/// <summary>The setCMassGlobal*() methods move the actor by setting the pose of the center of mass. </summary>
		/// <param name="mat">Actors new pose, from the transformation of the mass frame to the global frame. Range: rigid body transform.</param>
		public virtual void setCMassGlobalPose(ref NxMat34 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassGlobalPose_virtual([In()] ref NxMat34 mat)
		{
			setCMassGlobalPose(ref mat);
		}
		
		delegate void setCMassGlobalPose_22_delegate([In()] ref NxMat34 mat);
		
		
		
		
		
		
		private setCMassGlobalPose_22_delegate setCMassGlobalPose_22_delegatefield;
		
		/// <summary>The setCMassGlobal*() methods move the actor by setting the pose of the center of mass. </summary>
		/// <param name="vec">Actors new position, from the transformation of the mass frame to the global frame. Range: position vector</param>
		public virtual void setCMassGlobalPosition(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setCMassGlobalPosition_virtual([In()] ref NxVec3 vec)
		{
			setCMassGlobalPosition(ref vec);
		}
		
		delegate void setCMassGlobalPosition_23_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setCMassGlobalPosition_23_delegate setCMassGlobalPosition_23_delegatefield;
		
		/// <summary>The setCMassGlobal*() methods move the actor by setting the pose of the center of mass. </summary>
		/// <param name="mat">Actors new orientation, from the transformation of the mass frame to the global frame. Range: rotation matrix.</param>
		public virtual void setCMassGlobalOrientation(ref NxMat33 mat)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCMassGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers, ref mat);
		}
		
		private void setCMassGlobalOrientation_virtual([In()] ref NxMat33 mat)
		{
			setCMassGlobalOrientation(ref mat);
		}
		
		delegate void setCMassGlobalOrientation_24_delegate([In()] ref NxMat33 mat);
		
		
		
		
		
		
		private setCMassGlobalOrientation_24_delegate setCMassGlobalOrientation_24_delegatefield;
		
		/// <summary>The getCMassLocal*() methods retrieve the center of mass pose relative to the actor. </summary>
		public virtual NxMat34 getCMassLocalPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassLocalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getCMassLocalPose_virtual()
		{
			return getCMassLocalPose();
		}
		
		delegate NxMat34 getCMassLocalPose_25_delegate();
		
		
		
		
		
		
		private getCMassLocalPose_25_delegate getCMassLocalPose_25_delegatefield;
		
		/// <summary>The getCMassLocal*() methods retrieve the center of mass pose relative to the actor. </summary>
		public virtual NxVec3 getCMassLocalPosition()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassLocalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getCMassLocalPosition_virtual()
		{
			return getCMassLocalPosition();
		}
		
		delegate NxVec3 getCMassLocalPosition_26_delegate();
		
		
		
		
		
		
		private getCMassLocalPosition_26_delegate getCMassLocalPosition_26_delegatefield;
		
		/// <summary>The getCMassLocal*() methods retrieve the center of mass pose relative to the actor. </summary>
		public virtual NxMat33 getCMassLocalOrientation()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassLocalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getCMassLocalOrientation_virtual()
		{
			return getCMassLocalOrientation();
		}
		
		delegate NxMat33 getCMassLocalOrientation_27_delegate();
		
		
		
		
		
		
		private getCMassLocalOrientation_27_delegate getCMassLocalOrientation_27_delegatefield;
		
		/// <summary>The getCMassGlobal*() methods retrieve the center of mass pose in world space. </summary>
		public virtual NxMat34 getCMassGlobalPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassGlobalPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getCMassGlobalPose_virtual()
		{
			return getCMassGlobalPose();
		}
		
		delegate NxMat34 getCMassGlobalPose_28_delegate();
		
		
		
		
		
		
		private getCMassGlobalPose_28_delegate getCMassGlobalPose_28_delegatefield;
		
		/// <summary>The getCMassGlobal*() methods retrieve the center of mass pose in world space. </summary>
		public virtual NxVec3 getCMassGlobalPosition()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getCMassGlobalPosition_virtual()
		{
			return getCMassGlobalPosition();
		}
		
		delegate NxVec3 getCMassGlobalPosition_29_delegate();
		
		
		
		
		
		
		private getCMassGlobalPosition_29_delegate getCMassGlobalPosition_29_delegatefield;
		
		/// <summary>The getCMassGlobal*() methods retrieve the center of mass pose in world space. </summary>
		public virtual NxMat33 getCMassGlobalOrientation()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCMassGlobalOrientation_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getCMassGlobalOrientation_virtual()
		{
			return getCMassGlobalOrientation();
		}
		
		delegate NxMat33 getCMassGlobalOrientation_30_delegate();
		
		
		
		
		
		
		private getCMassGlobalOrientation_30_delegate getCMassGlobalOrientation_30_delegatefield;
		
		/// <summary>Sets the mass of a dynamic actor. </summary>
		/// <param name="mass">New mass value for the actor. Range: (0,inf)</param>
		public virtual void setMass(float mass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setMass_INVOKE(ClassPointer, doSetFunctionPointers, mass);
		}
		
		private void setMass_virtual(float mass)
		{
			setMass(mass);
		}
		
		delegate void setMass_31_delegate(float mass);
		
		
		
		
		
		
		private setMass_31_delegate setMass_31_delegatefield;
		
		/// <summary>Retrieves the mass of the actor. </summary>
		public virtual float getMass()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getMass_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getMass_virtual()
		{
			return getMass();
		}
		
		delegate float getMass_32_delegate();
		
		
		
		
		
		
		private getMass_32_delegate getMass_32_delegatefield;
		
		/// <summary>Sets the inertia tensor, using a parameter specified in mass space coordinates. </summary>
		/// <param name="m">New mass space inertia tensor for the actor. Range: inertia vector</param>
		public virtual void setMassSpaceInertiaTensor(ref NxVec3 m)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setMassSpaceInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers, ref m);
		}
		
		private void setMassSpaceInertiaTensor_virtual([In()] ref NxVec3 m)
		{
			setMassSpaceInertiaTensor(ref m);
		}
		
		delegate void setMassSpaceInertiaTensor_33_delegate([In()] ref NxVec3 m);
		
		
		
		
		
		
		private setMassSpaceInertiaTensor_33_delegate setMassSpaceInertiaTensor_33_delegatefield;
		
		/// <summary>Retrieves the diagonal inertia tensor of the actor relative to the mass coordinate frame. </summary>
		public virtual NxVec3 getMassSpaceInertiaTensor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getMassSpaceInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getMassSpaceInertiaTensor_virtual()
		{
			return getMassSpaceInertiaTensor();
		}
		
		delegate NxVec3 getMassSpaceInertiaTensor_34_delegate();
		
		
		
		
		
		
		private getMassSpaceInertiaTensor_34_delegate getMassSpaceInertiaTensor_34_delegatefield;
		
		/// <summary>Retrieves the inertia tensor of the actor relative to the world coordinate frame. </summary>
		public virtual NxMat33 getGlobalInertiaTensor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalInertiaTensor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getGlobalInertiaTensor_virtual()
		{
			return getGlobalInertiaTensor();
		}
		
		delegate NxMat33 getGlobalInertiaTensor_35_delegate();
		
		
		
		
		
		
		private getGlobalInertiaTensor_35_delegate getGlobalInertiaTensor_35_delegatefield;
		
		/// <summary>Retrieves the inverse of the inertia tensor of the actor relative to the world coordinate frame. </summary>
		public virtual NxMat33 getGlobalInertiaTensorInverse()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGlobalInertiaTensorInverse_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat33 getGlobalInertiaTensorInverse_virtual()
		{
			return getGlobalInertiaTensorInverse();
		}
		
		delegate NxMat33 getGlobalInertiaTensorInverse_36_delegate();
		
		
		
		
		
		
		private getGlobalInertiaTensorInverse_36_delegate getGlobalInertiaTensorInverse_36_delegatefield;
		
		/// <summary>Recomputes a dynamic actor's mass properties from its shapes. </summary>
		/// <param name="density">Density scale factor of the shapes belonging to the actor. Range: [0,inf) </param>
		/// <param name="totalMass">Total mass of the actor(or zero). Range: [0,inf)</param>
		public virtual bool updateMassFromShapes(float density, float totalMass)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_updateMassFromShapes_INVOKE(ClassPointer, doSetFunctionPointers, density, totalMass);
		}
		
		private bool updateMassFromShapes_virtual(float density, float totalMass)
		{
			return updateMassFromShapes(density, totalMass);
		}
		
		delegate bool updateMassFromShapes_37_delegate(float density, float totalMass);
		
		
		
		
		
		
		private updateMassFromShapes_37_delegate updateMassFromShapes_37_delegatefield;
		
		/// <summary>Sets the linear damping coefficient. </summary>
		/// <param name="linDamp">Linear damping coefficient. Range: [0,inf)</param>
		public virtual void setLinearDamping(float linDamp)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setLinearDamping_INVOKE(ClassPointer, doSetFunctionPointers, linDamp);
		}
		
		private void setLinearDamping_virtual(float linDamp)
		{
			setLinearDamping(linDamp);
		}
		
		delegate void setLinearDamping_38_delegate(float linDamp);
		
		
		
		
		
		
		private setLinearDamping_38_delegate setLinearDamping_38_delegatefield;
		
		/// <summary>Retrieves the linear damping coefficient. </summary>
		public virtual float getLinearDamping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getLinearDamping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getLinearDamping_virtual()
		{
			return getLinearDamping();
		}
		
		delegate float getLinearDamping_39_delegate();
		
		
		
		
		
		
		private getLinearDamping_39_delegate getLinearDamping_39_delegatefield;
		
		/// <summary>Sets the angular damping coefficient. </summary>
		/// <param name="angDamp">Angular damping coefficient. Range: [0,inf)</param>
		public virtual void setAngularDamping(float angDamp)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setAngularDamping_INVOKE(ClassPointer, doSetFunctionPointers, angDamp);
		}
		
		private void setAngularDamping_virtual(float angDamp)
		{
			setAngularDamping(angDamp);
		}
		
		delegate void setAngularDamping_40_delegate(float angDamp);
		
		
		
		
		
		
		private setAngularDamping_40_delegate setAngularDamping_40_delegatefield;
		
		/// <summary>Retrieves the angular damping coefficient. </summary>
		public virtual float getAngularDamping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getAngularDamping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAngularDamping_virtual()
		{
			return getAngularDamping();
		}
		
		delegate float getAngularDamping_41_delegate();
		
		
		
		
		
		
		private getAngularDamping_41_delegate getAngularDamping_41_delegatefield;
		
		/// <summary>Sets the linear velocity of the actor. </summary>
		/// <param name="linVel">New linear velocity of actor. Range: velocity vector</param>
		public virtual void setLinearVelocity(ref NxVec3 linVel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref linVel);
		}
		
		private void setLinearVelocity_virtual([In()] ref NxVec3 linVel)
		{
			setLinearVelocity(ref linVel);
		}
		
		delegate void setLinearVelocity_42_delegate([In()] ref NxVec3 linVel);
		
		
		
		
		
		
		private setLinearVelocity_42_delegate setLinearVelocity_42_delegatefield;
		
		/// <summary>Sets the angular velocity of the actor. </summary>
		/// <param name="angVel">New angular velocity of actor. Range: angular velocity vector</param>
		public virtual void setAngularVelocity(ref NxVec3 angVel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref angVel);
		}
		
		private void setAngularVelocity_virtual([In()] ref NxVec3 angVel)
		{
			setAngularVelocity(ref angVel);
		}
		
		delegate void setAngularVelocity_43_delegate([In()] ref NxVec3 angVel);
		
		
		
		
		
		
		private setAngularVelocity_43_delegate setAngularVelocity_43_delegatefield;
		
		/// <summary>Retrieves the linear velocity of an actor. </summary>
		public virtual NxVec3 getLinearVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getLinearVelocity_virtual()
		{
			return getLinearVelocity();
		}
		
		delegate NxVec3 getLinearVelocity_44_delegate();
		
		
		
		
		
		
		private getLinearVelocity_44_delegate getLinearVelocity_44_delegatefield;
		
		/// <summary>Retrieves the angular velocity of the actor. </summary>
		public virtual NxVec3 getAngularVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getAngularVelocity_virtual()
		{
			return getAngularVelocity();
		}
		
		delegate NxVec3 getAngularVelocity_45_delegate();
		
		
		
		
		
		
		private getAngularVelocity_45_delegate getAngularVelocity_45_delegatefield;
		
		/// <summary>Lets you set the maximum angular velocity permitted for this actor. </summary>
		/// <param name="maxAngVel">Max allowable angular velocity for actor. Range: (0,inf)</param>
		public virtual void setMaxAngularVelocity(float maxAngVel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setMaxAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers, maxAngVel);
		}
		
		private void setMaxAngularVelocity_virtual(float maxAngVel)
		{
			setMaxAngularVelocity(maxAngVel);
		}
		
		delegate void setMaxAngularVelocity_46_delegate(float maxAngVel);
		
		
		
		
		
		
		private setMaxAngularVelocity_46_delegate setMaxAngularVelocity_46_delegatefield;
		
		/// <summary>Retrieves the maximum angular velocity permitted for this actor. </summary>
		public virtual float getMaxAngularVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getMaxAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getMaxAngularVelocity_virtual()
		{
			return getMaxAngularVelocity();
		}
		
		delegate float getMaxAngularVelocity_47_delegate();
		
		
		
		
		
		
		private getMaxAngularVelocity_47_delegate getMaxAngularVelocity_47_delegatefield;
		
		/// <summary>Sets the CCD Motion Threshold. </summary>
		/// <param name="thresh">CCD Motion threshold. Range: [0,inf)</param>
		public virtual void setCCDMotionThreshold(float thresh)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setCCDMotionThreshold_INVOKE(ClassPointer, doSetFunctionPointers, thresh);
		}
		
		private void setCCDMotionThreshold_virtual(float thresh)
		{
			setCCDMotionThreshold(thresh);
		}
		
		delegate void setCCDMotionThreshold_48_delegate(float thresh);
		
		
		
		
		
		
		private setCCDMotionThreshold_48_delegate setCCDMotionThreshold_48_delegatefield;
		
		/// <summary>Retrieves the CCD Motion threshold for this actor. </summary>
		public virtual float getCCDMotionThreshold()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getCCDMotionThreshold_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getCCDMotionThreshold_virtual()
		{
			return getCCDMotionThreshold();
		}
		
		delegate float getCCDMotionThreshold_49_delegate();
		
		
		
		
		
		
		private getCCDMotionThreshold_49_delegate getCCDMotionThreshold_49_delegatefield;
		
		/// <summary>Sets the linear momentum of the actor. </summary>
		/// <param name="linMoment">New linear momentum. Range: momentum vector</param>
		public virtual void setLinearMomentum(ref NxVec3 linMoment)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setLinearMomentum_INVOKE(ClassPointer, doSetFunctionPointers, ref linMoment);
		}
		
		private void setLinearMomentum_virtual([In()] ref NxVec3 linMoment)
		{
			setLinearMomentum(ref linMoment);
		}
		
		delegate void setLinearMomentum_50_delegate([In()] ref NxVec3 linMoment);
		
		
		
		
		
		
		private setLinearMomentum_50_delegate setLinearMomentum_50_delegatefield;
		
		/// <summary>Sets the angular momentum of the actor. </summary>
		/// <param name="angMoment">New angular momentum. Range: angular momentum vector</param>
		public virtual void setAngularMomentum(ref NxVec3 angMoment)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setAngularMomentum_INVOKE(ClassPointer, doSetFunctionPointers, ref angMoment);
		}
		
		private void setAngularMomentum_virtual([In()] ref NxVec3 angMoment)
		{
			setAngularMomentum(ref angMoment);
		}
		
		delegate void setAngularMomentum_51_delegate([In()] ref NxVec3 angMoment);
		
		
		
		
		
		
		private setAngularMomentum_51_delegate setAngularMomentum_51_delegatefield;
		
		/// <summary>Retrieves the linear momentum of an actor. </summary>
		public virtual NxVec3 getLinearMomentum()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getLinearMomentum_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getLinearMomentum_virtual()
		{
			return getLinearMomentum();
		}
		
		delegate NxVec3 getLinearMomentum_52_delegate();
		
		
		
		
		
		
		private getLinearMomentum_52_delegate getLinearMomentum_52_delegatefield;
		
		/// <summary>Retrieves the angular momentum of an actor. </summary>
		public virtual NxVec3 getAngularMomentum()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getAngularMomentum_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getAngularMomentum_virtual()
		{
			return getAngularMomentum();
		}
		
		delegate NxVec3 getAngularMomentum_53_delegate();
		
		
		
		
		
		
		private getAngularMomentum_53_delegate getAngularMomentum_53_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtPos_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode, wakeup);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			addForceAtPos(ref force, ref pos, mode, wakeup);
		}
		
		delegate void addForceAtPos_54_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addForceAtPos_54_delegate addForceAtPos_54_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode)
		{
			addForceAtPos(ref force, ref pos, mode);
		}
		
		delegate void addForceAtPos_55_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtPos_55_delegate addForceAtPos_55_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtPos(ref NxVec3 force, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtPos_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos)
		{
			addForceAtPos(ref force, ref pos);
		}
		
		delegate void addForceAtPos_56_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private addForceAtPos_56_delegate addForceAtPos_56_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtLocalPos_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode, wakeup);
		}
		
		private void addForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			addForceAtLocalPos(ref force, ref pos, mode, wakeup);
		}
		
		delegate void addForceAtLocalPos_57_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addForceAtLocalPos_57_delegate addForceAtLocalPos_57_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtLocalPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode);
		}
		
		private void addForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode)
		{
			addForceAtLocalPos(ref force, ref pos, mode);
		}
		
		delegate void addForceAtLocalPos_58_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtLocalPos_58_delegate addForceAtLocalPos_58_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForceAtLocalPos_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos);
		}
		
		private void addForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos)
		{
			addForceAtLocalPos(ref force, ref pos);
		}
		
		delegate void addForceAtLocalPos_59_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private addForceAtLocalPos_59_delegate addForceAtLocalPos_59_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtPos_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode, wakeup);
		}
		
		private void addLocalForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			addLocalForceAtPos(ref force, ref pos, mode, wakeup);
		}
		
		delegate void addLocalForceAtPos_60_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addLocalForceAtPos_60_delegate addLocalForceAtPos_60_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode);
		}
		
		private void addLocalForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode)
		{
			addLocalForceAtPos(ref force, ref pos, mode);
		}
		
		delegate void addLocalForceAtPos_61_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);
		
		
		
		
		
		
		private addLocalForceAtPos_61_delegate addLocalForceAtPos_61_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in global coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the global frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtPos(ref NxVec3 force, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtPos_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos);
		}
		
		private void addLocalForceAtPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos)
		{
			addLocalForceAtPos(ref force, ref pos);
		}
		
		delegate void addLocalForceAtPos_62_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private addLocalForceAtPos_62_delegate addLocalForceAtPos_62_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtLocalPos_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode, wakeup);
		}
		
		private void addLocalForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup)
		{
			addLocalForceAtLocalPos(ref force, ref pos, mode, wakeup);
		}
		
		delegate void addLocalForceAtLocalPos_63_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addLocalForceAtLocalPos_63_delegate addLocalForceAtLocalPos_63_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtLocalPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos, mode);
		}
		
		private void addLocalForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode)
		{
			addLocalForceAtLocalPos(ref force, ref pos, mode);
		}
		
		delegate void addLocalForceAtLocalPos_64_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);
		
		
		
		
		
		
		private addLocalForceAtLocalPos_64_delegate addLocalForceAtLocalPos_64_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame, acting at a particular point in local coordinates, to the actor. </summary>
		/// <param name="force">Force/impulse to add, defined in the local frame. Range: force vector </param>
		/// <param name="pos">Position in the local frame to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForceAtLocalPos(ref NxVec3 force, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForceAtLocalPos_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force, ref pos);
		}
		
		private void addLocalForceAtLocalPos_virtual([In()] ref NxVec3 force, [In()] ref NxVec3 pos)
		{
			addLocalForceAtLocalPos(ref force, ref pos);
		}
		
		delegate void addLocalForceAtLocalPos_65_delegate([In()] ref NxVec3 force, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private addLocalForceAtLocalPos_65_delegate addLocalForceAtLocalPos_65_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the global frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForce(ref NxVec3 force, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForce_INVOKE(ClassPointer, doSetFunctionPointers, ref force, mode, wakeup);
		}
		
		private void addForce_virtual([In()] ref NxVec3 force, NxForceMode mode, bool wakeup)
		{
			addForce(ref force, mode, wakeup);
		}
		
		delegate void addForce_66_delegate([In()] ref NxVec3 force, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addForce_66_delegate addForce_66_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the global frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForce(ref NxVec3 force, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForce_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, mode);
		}
		
		private void addForce_virtual([In()] ref NxVec3 force, NxForceMode mode)
		{
			addForce(ref force, mode);
		}
		
		delegate void addForce_67_delegate([In()] ref NxVec3 force, NxForceMode mode);
		
		
		
		
		
		
		private addForce_67_delegate addForce_67_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the global frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addForce(ref NxVec3 force)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addForce_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force);
		}
		
		private void addForce_virtual([In()] ref NxVec3 force)
		{
			addForce(ref force);
		}
		
		delegate void addForce_68_delegate([In()] ref NxVec3 force);
		
		
		
		
		
		
		private addForce_68_delegate addForce_68_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the local frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForce(ref NxVec3 force, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForce_INVOKE(ClassPointer, doSetFunctionPointers, ref force, mode, wakeup);
		}
		
		private void addLocalForce_virtual([In()] ref NxVec3 force, NxForceMode mode, bool wakeup)
		{
			addLocalForce(ref force, mode, wakeup);
		}
		
		delegate void addLocalForce_69_delegate([In()] ref NxVec3 force, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addLocalForce_69_delegate addLocalForce_69_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the local frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForce(ref NxVec3 force, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForce_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, mode);
		}
		
		private void addLocalForce_virtual([In()] ref NxVec3 force, NxForceMode mode)
		{
			addLocalForce(ref force, mode);
		}
		
		delegate void addLocalForce_70_delegate([In()] ref NxVec3 force, NxForceMode mode);
		
		
		
		
		
		
		private addLocalForce_70_delegate addLocalForce_70_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="force">Force/Impulse to apply defined in the local frame. Range: force vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode) </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalForce(ref NxVec3 force)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalForce_2_INVOKE(ClassPointer, doSetFunctionPointers, ref force);
		}
		
		private void addLocalForce_virtual([In()] ref NxVec3 force)
		{
			addLocalForce(ref force);
		}
		
		delegate void addLocalForce_71_delegate([In()] ref NxVec3 force);
		
		
		
		
		
		
		private addLocalForce_71_delegate addLocalForce_71_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the global coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the global frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addTorque(ref NxVec3 torque, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addTorque_INVOKE(ClassPointer, doSetFunctionPointers, ref torque, mode, wakeup);
		}
		
		private void addTorque_virtual([In()] ref NxVec3 torque, NxForceMode mode, bool wakeup)
		{
			addTorque(ref torque, mode, wakeup);
		}
		
		delegate void addTorque_72_delegate([In()] ref NxVec3 torque, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addTorque_72_delegate addTorque_72_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the global coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the global frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addTorque(ref NxVec3 torque, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addTorque_1_INVOKE(ClassPointer, doSetFunctionPointers, ref torque, mode);
		}
		
		private void addTorque_virtual([In()] ref NxVec3 torque, NxForceMode mode)
		{
			addTorque(ref torque, mode);
		}
		
		delegate void addTorque_73_delegate([In()] ref NxVec3 torque, NxForceMode mode);
		
		
		
		
		
		
		private addTorque_73_delegate addTorque_73_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the global coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the global frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addTorque(ref NxVec3 torque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addTorque_2_INVOKE(ClassPointer, doSetFunctionPointers, ref torque);
		}
		
		private void addTorque_virtual([In()] ref NxVec3 torque)
		{
			addTorque(ref torque);
		}
		
		delegate void addTorque_74_delegate([In()] ref NxVec3 torque);
		
		
		
		
		
		
		private addTorque_74_delegate addTorque_74_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the local frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalTorque(ref NxVec3 torque, NxForceMode mode, bool wakeup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalTorque_INVOKE(ClassPointer, doSetFunctionPointers, ref torque, mode, wakeup);
		}
		
		private void addLocalTorque_virtual([In()] ref NxVec3 torque, NxForceMode mode, bool wakeup)
		{
			addLocalTorque(ref torque, mode, wakeup);
		}
		
		delegate void addLocalTorque_75_delegate([In()] ref NxVec3 torque, NxForceMode mode, bool wakeup);
		
		
		
		
		
		
		private addLocalTorque_75_delegate addLocalTorque_75_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the local frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalTorque(ref NxVec3 torque, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalTorque_1_INVOKE(ClassPointer, doSetFunctionPointers, ref torque, mode);
		}
		
		private void addLocalTorque_virtual([In()] ref NxVec3 torque, NxForceMode mode)
		{
			addLocalTorque(ref torque, mode);
		}
		
		delegate void addLocalTorque_76_delegate([In()] ref NxVec3 torque, NxForceMode mode);
		
		
		
		
		
		
		private addLocalTorque_76_delegate addLocalTorque_76_delegatefield;
		
		/// <summary>Applies an impulsive torque defined in the actor local coordinate frame to the actor. </summary>
		/// <param name="torque">Torque to apply defined in the local frame. Range: torque vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse(see NxForceMode). </param>
		/// <param name="wakeup">Specify if the call should wake up the actor.</param>
		public virtual void addLocalTorque(ref NxVec3 torque)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_addLocalTorque_2_INVOKE(ClassPointer, doSetFunctionPointers, ref torque);
		}
		
		private void addLocalTorque_virtual([In()] ref NxVec3 torque)
		{
			addLocalTorque(ref torque);
		}
		
		delegate void addLocalTorque_77_delegate([In()] ref NxVec3 torque);
		
		
		
		
		
		
		private addLocalTorque_77_delegate addLocalTorque_77_delegatefield;
		
		/// <summary>Computes the velocity of a point given in world coordinates if it were attached to the actor and moving with it. </summary>
		/// <param name="point">Point we wish to determine the velocity for, defined in the global frame. Range: position vector </param>
		public virtual NxVec3 getPointVelocity(ref NxVec3 point)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getPointVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref point);
		}
		
		private NxVec3 getPointVelocity_virtual([In()] ref NxVec3 point)
		{
			return getPointVelocity(ref point);
		}
		
		delegate NxVec3 getPointVelocity_78_delegate([In()] ref NxVec3 point);
		
		
		
		
		
		
		private getPointVelocity_78_delegate getPointVelocity_78_delegatefield;
		
		/// <summary>Computes the velocity of a point given in body local coordinates as if it were attached to the actor and moving with it. </summary>
		/// <param name="point">Point we wish to determine the velocity of, defined in the body local frame. Range: position vector </param>
		public virtual NxVec3 getLocalPointVelocity(ref NxVec3 point)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getLocalPointVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref point);
		}
		
		private NxVec3 getLocalPointVelocity_virtual([In()] ref NxVec3 point)
		{
			return getLocalPointVelocity(ref point);
		}
		
		delegate NxVec3 getLocalPointVelocity_79_delegate([In()] ref NxVec3 point);
		
		
		
		
		
		
		private getLocalPointVelocity_79_delegate getLocalPointVelocity_79_delegatefield;
		
		/// <summary>Returns true if this body and all the actors it is touching or is linked to with joints are sleeping. </summary>
		public virtual bool isGroupSleeping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_isGroupSleeping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isGroupSleeping_virtual()
		{
			return isGroupSleeping();
		}
		
		delegate bool isGroupSleeping_80_delegate();
		
		
		
		
		
		
		private isGroupSleeping_80_delegate isGroupSleeping_80_delegatefield;
		
		/// <summary>Returns true if this body is sleeping. </summary>
		public virtual bool isSleeping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_isSleeping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isSleeping_virtual()
		{
			return isSleeping();
		}
		
		delegate bool isSleeping_81_delegate();
		
		
		
		
		
		
		private isSleeping_81_delegate isSleeping_81_delegatefield;
		
		/// <summary>Returns the linear velocity below which an actor may go to sleep. </summary>
		public virtual float getSleepLinearVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSleepLinearVelocity_virtual()
		{
			return getSleepLinearVelocity();
		}
		
		delegate float getSleepLinearVelocity_82_delegate();
		
		
		
		
		
		
		private getSleepLinearVelocity_82_delegate getSleepLinearVelocity_82_delegatefield;
		
		/// <summary>Sets the linear velocity below which an actor may go to sleep. </summary>
		/// <param name="threshold">Linear velocity below which an actor may sleep. Range: (0,inf]</param>
		public virtual void setSleepLinearVelocity(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setSleepLinearVelocity_virtual(float threshold)
		{
			setSleepLinearVelocity(threshold);
		}
		
		delegate void setSleepLinearVelocity_83_delegate(float threshold);
		
		
		
		
		
		
		private setSleepLinearVelocity_83_delegate setSleepLinearVelocity_83_delegatefield;
		
		/// <summary>Returns the angular velocity below which an actor may go to sleep. </summary>
		public virtual float getSleepAngularVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getSleepAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSleepAngularVelocity_virtual()
		{
			return getSleepAngularVelocity();
		}
		
		delegate float getSleepAngularVelocity_84_delegate();
		
		
		
		
		
		
		private getSleepAngularVelocity_84_delegate getSleepAngularVelocity_84_delegatefield;
		
		/// <summary>Sets the angular velocity below which an actor may go to sleep. </summary>
		/// <param name="threshold">Angular velocity below which an actor may go to sleep. Range: (0,inf]</param>
		public virtual void setSleepAngularVelocity(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setSleepAngularVelocity_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setSleepAngularVelocity_virtual(float threshold)
		{
			setSleepAngularVelocity(threshold);
		}
		
		delegate void setSleepAngularVelocity_85_delegate(float threshold);
		
		
		
		
		
		
		private setSleepAngularVelocity_85_delegate setSleepAngularVelocity_85_delegatefield;
		
		/// <summary>Returns the energy below which an actor may go to sleep. </summary>
		public virtual float getSleepEnergyThreshold()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getSleepEnergyThreshold_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSleepEnergyThreshold_virtual()
		{
			return getSleepEnergyThreshold();
		}
		
		delegate float getSleepEnergyThreshold_86_delegate();
		
		
		
		
		
		
		private getSleepEnergyThreshold_86_delegate getSleepEnergyThreshold_86_delegatefield;
		
		/// <summary>Sets the energy threshold below which an actor may go to sleep. </summary>
		/// <param name="threshold">Energy below which an actor may go to sleep. Range: (0,inf]</param>
		public virtual void setSleepEnergyThreshold(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setSleepEnergyThreshold_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setSleepEnergyThreshold_virtual(float threshold)
		{
			setSleepEnergyThreshold(threshold);
		}
		
		delegate void setSleepEnergyThreshold_87_delegate(float threshold);
		
		
		
		
		
		
		private setSleepEnergyThreshold_87_delegate setSleepEnergyThreshold_87_delegatefield;
		
		/// <summary>Wakes up the actor if it is sleeping. </summary>
		/// <param name="wakeCounterValue">New sleep counter value. Range: [0,inf]</param>
		public virtual void wakeUp(float wakeCounterValue)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_wakeUp_INVOKE(ClassPointer, doSetFunctionPointers, wakeCounterValue);
		}
		
		private void wakeUp_virtual(float wakeCounterValue)
		{
			wakeUp(wakeCounterValue);
		}
		
		delegate void wakeUp_88_delegate(float wakeCounterValue);
		
		
		
		
		
		
		private wakeUp_88_delegate wakeUp_88_delegatefield;
		
		/// <summary>Forces the actor to sleep. </summary>
		public virtual void putToSleep()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_putToSleep_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void putToSleep_virtual()
		{
			putToSleep();
		}
		
		delegate void putToSleep_89_delegate();
		
		
		
		
		
		
		private putToSleep_89_delegate putToSleep_89_delegatefield;
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxActor_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxActor_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxActor() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxActor)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxActor_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxActor_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Retrieves the scene which this actor belongs to. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxActor_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_90_delegate();
		
		
		
		
		
		
		private getScene_90_delegate getScene_90_delegatefield;
		
		/// <summary>Saves the state of the actor to the passed descriptor. </summary>
		/// <param name="desc">Descriptor to save object state to.</param>
		public virtual void saveToDesc(NxActorDescBase desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxActorDescBase.GetClass(desc));
		}
		
		delegate void saveToDesc_91_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_91_delegate saveToDesc_91_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_92_delegate(string name);
		
		
		
		
		
		
		private setName_92_delegate setName_92_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_93_delegate();
		
		
		
		
		
		
		private getName_93_delegate getName_93_delegatefield;
		
		/// <summary>Assigns the actor to a user defined group of actors. </summary>
		/// <param name="actorGroup">The actor group flags.</param>
		public virtual void setGroup(ushort actorGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setGroup_INVOKE(ClassPointer, doSetFunctionPointers, actorGroup);
		}
		
		private void setGroup_virtual(ushort actorGroup)
		{
			setGroup(actorGroup);
		}
		
		delegate void setGroup_94_delegate(ushort actorGroup);
		
		
		
		
		
		
		private setGroup_94_delegate setGroup_94_delegatefield;
		
		/// <summary>Retrieves the value set with setGroup(). </summary>
		public virtual ushort getGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getGroup_virtual()
		{
			return getGroup();
		}
		
		delegate ushort getGroup_95_delegate();
		
		
		
		
		
		
		private getGroup_95_delegate getGroup_95_delegatefield;
		
		/// <summary>Assigns dynamic actors a dominance group identifier. </summary>
		public virtual void setDominanceGroup(ushort dominanceGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setDominanceGroup_INVOKE(ClassPointer, doSetFunctionPointers, dominanceGroup);
		}
		
		private void setDominanceGroup_virtual(ushort dominanceGroup)
		{
			setDominanceGroup(dominanceGroup);
		}
		
		delegate void setDominanceGroup_96_delegate(ushort dominanceGroup);
		
		
		
		
		
		
		private setDominanceGroup_96_delegate setDominanceGroup_96_delegatefield;
		
		/// <summary>Retrieves the value set with setDominanceGroup(). </summary>
		public virtual ushort getDominanceGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getDominanceGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getDominanceGroup_virtual()
		{
			return getDominanceGroup();
		}
		
		delegate ushort getDominanceGroup_97_delegate();
		
		
		
		
		
		
		private getDominanceGroup_97_delegate getDominanceGroup_97_delegatefield;
		
		/// <summary>Raises a particular actor flag. </summary>
		/// <param name="actorFlag">The actor flag to raise(set). See NxActorFlag.</param>
		public virtual void raiseActorFlag(NxActorFlag actorFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_raiseActorFlag_INVOKE(ClassPointer, doSetFunctionPointers, actorFlag);
		}
		
		private void raiseActorFlag_virtual(NxActorFlag actorFlag)
		{
			raiseActorFlag(actorFlag);
		}
		
		delegate void raiseActorFlag_98_delegate(NxActorFlag actorFlag);
		
		
		
		
		
		
		private raiseActorFlag_98_delegate raiseActorFlag_98_delegatefield;
		
		/// <summary>Clears a particular actor flag. </summary>
		/// <param name="actorFlag">The actor flag to clear. See NxActorFlag.</param>
		public virtual void clearActorFlag(NxActorFlag actorFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_clearActorFlag_INVOKE(ClassPointer, doSetFunctionPointers, actorFlag);
		}
		
		private void clearActorFlag_virtual(NxActorFlag actorFlag)
		{
			clearActorFlag(actorFlag);
		}
		
		delegate void clearActorFlag_99_delegate(NxActorFlag actorFlag);
		
		
		
		
		
		
		private clearActorFlag_99_delegate clearActorFlag_99_delegatefield;
		
		/// <summary>Reads a particular actor flag. </summary>
		/// <param name="actorFlag">The actor flag to retrieve. See NxActorFlag.</param>
		public virtual bool readActorFlag(NxActorFlag actorFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_readActorFlag_INVOKE(ClassPointer, doSetFunctionPointers, actorFlag);
		}
		
		private bool readActorFlag_virtual(NxActorFlag actorFlag)
		{
			return readActorFlag(actorFlag);
		}
		
		delegate bool readActorFlag_100_delegate(NxActorFlag actorFlag);
		
		
		
		
		
		
		private readActorFlag_100_delegate readActorFlag_100_delegatefield;
		
		/// <summary>Reset the user actor pair filtering state for this actor. This will cause filtering callbacks to be called again for any pairs involving this actor. Use this method when you wish to change the filtering policy of an actor that may already be in contact with other actors. </summary>
		public virtual void resetUserActorPairFiltering()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_resetUserActorPairFiltering_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void resetUserActorPairFiltering_virtual()
		{
			resetUserActorPairFiltering();
		}
		
		delegate void resetUserActorPairFiltering_101_delegate();
		
		
		
		
		
		
		private resetUserActorPairFiltering_101_delegate resetUserActorPairFiltering_101_delegatefield;
		
		/// <summary>Returns true if the actor is dynamic. </summary>
		public virtual bool isDynamic()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_isDynamic_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isDynamic_virtual()
		{
			return isDynamic();
		}
		
		delegate bool isDynamic_102_delegate();
		
		
		
		
		
		
		private isDynamic_102_delegate isDynamic_102_delegatefield;
		
		/// <summary>Computes the total kinetic (rotational and translational) energy of the object. </summary>
		public virtual float computeKineticEnergy()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_computeKineticEnergy_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float computeKineticEnergy_virtual()
		{
			return computeKineticEnergy();
		}
		
		delegate float computeKineticEnergy_103_delegate();
		
		
		
		
		
		
		private computeKineticEnergy_103_delegate computeKineticEnergy_103_delegatefield;
		
		/// <summary>Raises a particular body flag. </summary>
		/// <param name="bodyFlag">Body flag to raise(set). See NxBodyFlag.</param>
		public virtual void raiseBodyFlag(NxBodyFlag bodyFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_raiseBodyFlag_INVOKE(ClassPointer, doSetFunctionPointers, bodyFlag);
		}
		
		private void raiseBodyFlag_virtual(NxBodyFlag bodyFlag)
		{
			raiseBodyFlag(bodyFlag);
		}
		
		delegate void raiseBodyFlag_104_delegate(NxBodyFlag bodyFlag);
		
		
		
		
		
		
		private raiseBodyFlag_104_delegate raiseBodyFlag_104_delegatefield;
		
		/// <summary>Clears a particular body flag. </summary>
		/// <param name="bodyFlag">Body flag to clear. See NxBodyFlag.</param>
		public virtual void clearBodyFlag(NxBodyFlag bodyFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_clearBodyFlag_INVOKE(ClassPointer, doSetFunctionPointers, bodyFlag);
		}
		
		private void clearBodyFlag_virtual(NxBodyFlag bodyFlag)
		{
			clearBodyFlag(bodyFlag);
		}
		
		delegate void clearBodyFlag_105_delegate(NxBodyFlag bodyFlag);
		
		
		
		
		
		
		private clearBodyFlag_105_delegate clearBodyFlag_105_delegatefield;
		
		/// <summary>Reads a particular body flag. </summary>
		/// <param name="bodyFlag">Body flag to retrieve. See NxBodyFlag. </param>
		public virtual bool readBodyFlag(NxBodyFlag bodyFlag)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_readBodyFlag_INVOKE(ClassPointer, doSetFunctionPointers, bodyFlag);
		}
		
		private bool readBodyFlag_virtual(NxBodyFlag bodyFlag)
		{
			return readBodyFlag(bodyFlag);
		}
		
		delegate bool readBodyFlag_106_delegate(NxBodyFlag bodyFlag);
		
		
		
		
		
		
		private readBodyFlag_106_delegate readBodyFlag_106_delegatefield;
		
		/// <summary>Saves the body information of a dynamic actor to the passed body descriptor. </summary>
		/// <param name="bodyDesc">Descriptor to save the state of the body to. </param>
		public virtual bool saveBodyToDesc(NxBodyDesc bodyDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_saveBodyToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (bodyDesc!=null ? bodyDesc.ClassPointer : NullRef));
		}
		
		private bool saveBodyToDesc_virtual(IntPtr bodyDesc)
		{
			return saveBodyToDesc(NxBodyDesc.GetClass(bodyDesc));
		}
		
		delegate bool saveBodyToDesc_107_delegate(IntPtr bodyDesc);
		
		
		
		
		
		
		private saveBodyToDesc_107_delegate saveBodyToDesc_107_delegatefield;
		
		/// <summary>Sets the solver iteration count for the body. </summary>
		/// <param name="iterCount">Number of iterations the solver should perform for this body. Range: [1,255]</param>
		public virtual void setSolverIterationCount(uint iterCount)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setSolverIterationCount_INVOKE(ClassPointer, doSetFunctionPointers, iterCount);
		}
		
		private void setSolverIterationCount_virtual(uint iterCount)
		{
			setSolverIterationCount(iterCount);
		}
		
		delegate void setSolverIterationCount_108_delegate(uint iterCount);
		
		
		
		
		
		
		private setSolverIterationCount_108_delegate setSolverIterationCount_108_delegatefield;
		
		/// <summary>Retrieves the solver iteration count. </summary>
		public virtual uint getSolverIterationCount()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getSolverIterationCount_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getSolverIterationCount_virtual()
		{
			return getSolverIterationCount();
		}
		
		delegate uint getSolverIterationCount_109_delegate();
		
		
		
		
		
		
		private getSolverIterationCount_109_delegate getSolverIterationCount_109_delegatefield;
		
		/// <summary>Retrieves the force threshold for contact reports. </summary>
		public virtual float getContactReportThreshold()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getContactReportThreshold_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getContactReportThreshold_virtual()
		{
			return getContactReportThreshold();
		}
		
		delegate float getContactReportThreshold_110_delegate();
		
		
		
		
		
		
		private getContactReportThreshold_110_delegate getContactReportThreshold_110_delegatefield;
		
		/// <summary>Sets the force threshold for contact reports. </summary>
		/// <param name="threshold">Force threshold for contact reports. Range: (0,inf)</param>
		public virtual void setContactReportThreshold(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setContactReportThreshold_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setContactReportThreshold_virtual(float threshold)
		{
			setContactReportThreshold(threshold);
		}
		
		delegate void setContactReportThreshold_111_delegate(float threshold);
		
		
		
		
		
		
		private setContactReportThreshold_111_delegate setContactReportThreshold_111_delegatefield;
		
		/// <summary>Retrieves the actor's contact report flags. </summary>
		public virtual uint getContactReportFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getContactReportFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getContactReportFlags_virtual()
		{
			return getContactReportFlags();
		}
		
		delegate uint getContactReportFlags_112_delegate();
		
		
		
		
		
		
		private getContactReportFlags_112_delegate getContactReportFlags_112_delegatefield;
		
		/// <summary>Sets the actor's contact report flags. </summary>
		/// <param name="flags">Flags to control contact reporting. See NxContactPairFlag.</param>
		public virtual void setContactReportFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setContactReportFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setContactReportFlags_virtual(uint flags)
		{
			setContactReportFlags(flags);
		}
		
		delegate void setContactReportFlags_113_delegate(uint flags);
		
		
		
		
		
		
		private setContactReportFlags_113_delegate setContactReportFlags_113_delegatefield;
		
		/// <summary>Performs a linear sweep through space with the actor. </summary>
		/// <param name="motion">Length and direction of the sweep </param>
		/// <param name="flags">Flags controlling the mode of the sweep </param>
		/// <param name="userData">User data to impart to the returned data struct </param>
		/// <param name="nbShapes">Maximum number of shapes to report Range: [1,NX_MAX_U32] </param>
		/// <param name="shapes">Pointer to buffer for reported shapes </param>
		/// <param name="callback">Callback function invoked on the closest hit (if any) </param>
		/// <param name="sweepCache">Sweep cache to use with the query</param>
		public virtual uint linearSweep(ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, NxSweepQueryHit shapes, NxUserEntityReport callback, NxSweepCache sweepCache)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_linearSweep_INVOKE(ClassPointer, doSetFunctionPointers, ref motion, flags, userData, nbShapes, (shapes!=null ? shapes.ClassPointer : NullRef), (callback!=null ? callback.ClassPointer : NullRef), (sweepCache!=null ? sweepCache.ClassPointer : NullRef));
		}
		
		private uint linearSweep_virtual([In()] ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, IntPtr shapes, IntPtr callback, IntPtr sweepCache)
		{
			return linearSweep(ref motion, flags, userData, nbShapes, NxSweepQueryHit.GetClass(shapes), NxUserEntityReport.GetClass(callback), NxSweepCache.GetClass(sweepCache));
		}
		
		delegate uint linearSweep_114_delegate([In()] ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, IntPtr shapes, IntPtr callback, IntPtr sweepCache);
		
		
		
		
		
		
		private linearSweep_114_delegate linearSweep_114_delegatefield;
		
		/// <summary>Performs a linear sweep through space with the actor. </summary>
		/// <param name="motion">Length and direction of the sweep </param>
		/// <param name="flags">Flags controlling the mode of the sweep </param>
		/// <param name="userData">User data to impart to the returned data struct </param>
		/// <param name="nbShapes">Maximum number of shapes to report Range: [1,NX_MAX_U32] </param>
		/// <param name="shapes">Pointer to buffer for reported shapes </param>
		/// <param name="callback">Callback function invoked on the closest hit (if any) </param>
		/// <param name="sweepCache">Sweep cache to use with the query</param>
		public virtual uint linearSweep(ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, NxSweepQueryHit shapes, NxUserEntityReport callback)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_linearSweep_1_INVOKE(ClassPointer, doSetFunctionPointers, ref motion, flags, userData, nbShapes, (shapes!=null ? shapes.ClassPointer : NullRef), (callback!=null ? callback.ClassPointer : NullRef));
		}
		
		private uint linearSweep_virtual([In()] ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, IntPtr shapes, IntPtr callback)
		{
			return linearSweep(ref motion, flags, userData, nbShapes, NxSweepQueryHit.GetClass(shapes), NxUserEntityReport.GetClass(callback));
		}
		
		delegate uint linearSweep_115_delegate([In()] ref NxVec3 motion, uint flags, System.IntPtr userData, uint nbShapes, IntPtr shapes, IntPtr callback);
		
		
		
		
		
		
		private linearSweep_115_delegate linearSweep_115_delegatefield;
		
		/// <summary>Retrieves the actor's simulation compartment, if any. </summary>
		public virtual NxCompartment getCompartment()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment.GetClass(NxActor_getCompartment_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getCompartment_virtual()
		{
			return getCompartment().ClassPointer.Handle;
		}
		
		delegate IntPtr getCompartment_116_delegate();
		
		
		
		
		
		
		private getCompartment_116_delegate getCompartment_116_delegatefield;
		
		/// <summary>Retrieves the actor's force field material index, default index is 0. </summary>
		public virtual ushort getForceFieldMaterial()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor_getForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getForceFieldMaterial_virtual()
		{
			return getForceFieldMaterial();
		}
		
		delegate ushort getForceFieldMaterial_117_delegate();
		
		
		
		
		
		
		private getForceFieldMaterial_117_delegate getForceFieldMaterial_117_delegatefield;
		
		/// <summary>Sets the actor's force field material index, default index is 0. </summary>
		public virtual void setForceFieldMaterial(ushort unknown2)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxActor_setForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers, unknown2);
		}
		
		private void setForceFieldMaterial_virtual(ushort unknown2)
		{
			setForceFieldMaterial(unknown2);
		}
		
		delegate void setForceFieldMaterial_118_delegate(ushort unknown2);
		
		
		
		
		
		
		private setForceFieldMaterial_118_delegate setForceFieldMaterial_118_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setGlobalPose")]
        private extern static void NxActor_setGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setGlobalPosition")]
        private extern static void NxActor_setGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setGlobalOrientation")]
        private extern static void NxActor_setGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setGlobalOrientationQuat")]
        private extern static void NxActor_setGlobalOrientationQuat_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxQuat mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalPose")]
        private extern static NxMat34 NxActor_getGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalPosition")]
        private extern static NxVec3 NxActor_getGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalOrientation")]
        private extern static NxMat33 NxActor_getGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalOrientationQuat")]
        private extern static NxQuat NxActor_getGlobalOrientationQuat_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_moveGlobalPose")]
        private extern static void NxActor_moveGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_moveGlobalPosition")]
        private extern static void NxActor_moveGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_moveGlobalOrientation")]
        private extern static void NxActor_moveGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_moveGlobalOrientationQuat")]
        private extern static void NxActor_moveGlobalOrientationQuat_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxQuat quat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_createShape")]
        private extern static IntPtr NxActor_createShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_releaseShape")]
        private extern static void NxActor_releaseShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getNbShapes")]
        private extern static System.UInt32 NxActor_getNbShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getShapes")]
        private extern static IntPtr[] NxActor_getShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetLocalPose")]
        private extern static void NxActor_setCMassOffsetLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetLocalPosition")]
        private extern static void NxActor_setCMassOffsetLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetLocalOrientation")]
        private extern static void NxActor_setCMassOffsetLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetGlobalPose")]
        private extern static void NxActor_setCMassOffsetGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetGlobalPosition")]
        private extern static void NxActor_setCMassOffsetGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassOffsetGlobalOrientation")]
        private extern static void NxActor_setCMassOffsetGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassGlobalPose")]
        private extern static void NxActor_setCMassGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassGlobalPosition")]
        private extern static void NxActor_setCMassGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCMassGlobalOrientation")]
        private extern static void NxActor_setCMassGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 mat);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassLocalPose")]
        private extern static NxMat34 NxActor_getCMassLocalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassLocalPosition")]
        private extern static NxVec3 NxActor_getCMassLocalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassLocalOrientation")]
        private extern static NxMat33 NxActor_getCMassLocalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassGlobalPose")]
        private extern static NxMat34 NxActor_getCMassGlobalPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassGlobalPosition")]
        private extern static NxVec3 NxActor_getCMassGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCMassGlobalOrientation")]
        private extern static NxMat33 NxActor_getCMassGlobalOrientation_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setMass")]
        private extern static void NxActor_setMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single mass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getMass")]
        private extern static System.Single NxActor_getMass_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setMassSpaceInertiaTensor")]
        private extern static void NxActor_setMassSpaceInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 m);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getMassSpaceInertiaTensor")]
        private extern static NxVec3 NxActor_getMassSpaceInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalInertiaTensor")]
        private extern static NxMat33 NxActor_getGlobalInertiaTensor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGlobalInertiaTensorInverse")]
        private extern static NxMat33 NxActor_getGlobalInertiaTensorInverse_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_updateMassFromShapes")]
        private extern static System.Boolean NxActor_updateMassFromShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single density, System.Single totalMass);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setLinearDamping")]
        private extern static void NxActor_setLinearDamping_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single linDamp);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getLinearDamping")]
        private extern static System.Single NxActor_getLinearDamping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setAngularDamping")]
        private extern static void NxActor_setAngularDamping_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single angDamp);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getAngularDamping")]
        private extern static System.Single NxActor_getAngularDamping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setLinearVelocity")]
        private extern static void NxActor_setLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 linVel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setAngularVelocity")]
        private extern static void NxActor_setAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 angVel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getLinearVelocity")]
        private extern static NxVec3 NxActor_getLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getAngularVelocity")]
        private extern static NxVec3 NxActor_getAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setMaxAngularVelocity")]
        private extern static void NxActor_setMaxAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single maxAngVel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getMaxAngularVelocity")]
        private extern static System.Single NxActor_getMaxAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setCCDMotionThreshold")]
        private extern static void NxActor_setCCDMotionThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single thresh);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCCDMotionThreshold")]
        private extern static System.Single NxActor_getCCDMotionThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setLinearMomentum")]
        private extern static void NxActor_setLinearMomentum_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 linMoment);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setAngularMomentum")]
        private extern static void NxActor_setAngularMomentum_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 angMoment);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getLinearMomentum")]
        private extern static NxVec3 NxActor_getLinearMomentum_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getAngularMomentum")]
        private extern static NxVec3 NxActor_getAngularMomentum_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtPos")]
        private extern static void NxActor_addForceAtPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtPos_1")]
        private extern static void NxActor_addForceAtPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtPos_2")]
        private extern static void NxActor_addForceAtPos_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtLocalPos")]
        private extern static void NxActor_addForceAtLocalPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtLocalPos_1")]
        private extern static void NxActor_addForceAtLocalPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForceAtLocalPos_2")]
        private extern static void NxActor_addForceAtLocalPos_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtPos")]
        private extern static void NxActor_addLocalForceAtPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtPos_1")]
        private extern static void NxActor_addLocalForceAtPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtPos_2")]
        private extern static void NxActor_addLocalForceAtPos_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtLocalPos")]
        private extern static void NxActor_addLocalForceAtLocalPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtLocalPos_1")]
        private extern static void NxActor_addLocalForceAtLocalPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForceAtLocalPos_2")]
        private extern static void NxActor_addLocalForceAtLocalPos_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForce")]
        private extern static void NxActor_addForce_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForce_1")]
        private extern static void NxActor_addForce_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addForce_2")]
        private extern static void NxActor_addForce_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForce")]
        private extern static void NxActor_addLocalForce_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForce_1")]
        private extern static void NxActor_addLocalForce_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalForce_2")]
        private extern static void NxActor_addLocalForce_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addTorque")]
        private extern static void NxActor_addTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addTorque_1")]
        private extern static void NxActor_addTorque_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addTorque_2")]
        private extern static void NxActor_addTorque_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalTorque")]
        private extern static void NxActor_addLocalTorque_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque, NxForceMode mode, System.Boolean wakeup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalTorque_1")]
        private extern static void NxActor_addLocalTorque_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_addLocalTorque_2")]
        private extern static void NxActor_addLocalTorque_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 torque);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getPointVelocity")]
        private extern static NxVec3 NxActor_getPointVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 point);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getLocalPointVelocity")]
        private extern static NxVec3 NxActor_getLocalPointVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 point);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_isGroupSleeping")]
        private extern static System.Boolean NxActor_isGroupSleeping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_isSleeping")]
        private extern static System.Boolean NxActor_isSleeping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getSleepLinearVelocity")]
        private extern static System.Single NxActor_getSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setSleepLinearVelocity")]
        private extern static void NxActor_setSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getSleepAngularVelocity")]
        private extern static System.Single NxActor_getSleepAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setSleepAngularVelocity")]
        private extern static void NxActor_setSleepAngularVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getSleepEnergyThreshold")]
        private extern static System.Single NxActor_getSleepEnergyThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setSleepEnergyThreshold")]
        private extern static void NxActor_setSleepEnergyThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_wakeUp")]
        private extern static void NxActor_wakeUp_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single wakeCounterValue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_putToSleep")]
        private extern static void NxActor_putToSleep_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxActor_userData")]
        private extern static void set_NxActor_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxActor_userData")]
        private extern static System.IntPtr get_NxActor_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxActor")]
        private extern static IntPtr new_NxActor_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getScene")]
        private extern static IntPtr NxActor_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_saveToDesc")]
        private extern static void NxActor_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setName")]
        private extern static void NxActor_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getName")]
        private extern static System.String NxActor_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setGroup")]
        private extern static void NxActor_setGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 actorGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getGroup")]
        private extern static System.UInt16 NxActor_getGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setDominanceGroup")]
        private extern static void NxActor_setDominanceGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 dominanceGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getDominanceGroup")]
        private extern static System.UInt16 NxActor_getDominanceGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_raiseActorFlag")]
        private extern static void NxActor_raiseActorFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxActorFlag actorFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_clearActorFlag")]
        private extern static void NxActor_clearActorFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxActorFlag actorFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_readActorFlag")]
        private extern static System.Boolean NxActor_readActorFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxActorFlag actorFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_resetUserActorPairFiltering")]
        private extern static void NxActor_resetUserActorPairFiltering_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_isDynamic")]
        private extern static System.Boolean NxActor_isDynamic_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_computeKineticEnergy")]
        private extern static System.Single NxActor_computeKineticEnergy_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_raiseBodyFlag")]
        private extern static void NxActor_raiseBodyFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxBodyFlag bodyFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_clearBodyFlag")]
        private extern static void NxActor_clearBodyFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxBodyFlag bodyFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_readBodyFlag")]
        private extern static System.Boolean NxActor_readBodyFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxBodyFlag bodyFlag);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_saveBodyToDesc")]
        private extern static System.Boolean NxActor_saveBodyToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bodyDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setSolverIterationCount")]
        private extern static void NxActor_setSolverIterationCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 iterCount);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getSolverIterationCount")]
        private extern static System.UInt32 NxActor_getSolverIterationCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getContactReportThreshold")]
        private extern static System.Single NxActor_getContactReportThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setContactReportThreshold")]
        private extern static void NxActor_setContactReportThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getContactReportFlags")]
        private extern static System.UInt32 NxActor_getContactReportFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setContactReportFlags")]
        private extern static void NxActor_setContactReportFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_linearSweep")]
        private extern static System.UInt32 NxActor_linearSweep_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 motion, System.UInt32 flags, System.IntPtr userData, System.UInt32 nbShapes, HandleRef shapes, HandleRef callback, HandleRef sweepCache);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_linearSweep_1")]
        private extern static System.UInt32 NxActor_linearSweep_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 motion, System.UInt32 flags, System.IntPtr userData, System.UInt32 nbShapes, HandleRef shapes, HandleRef callback);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getCompartment")]
        private extern static IntPtr NxActor_getCompartment_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_getForceFieldMaterial")]
        private extern static System.UInt16 NxActor_getForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxActor_setForceFieldMaterial")]
        private extern static void NxActor_setForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown2);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxActor GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxActor)(obj.Target));
				}
			}
			return new NxActor(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setGlobalPose_0_delegatefield = new setGlobalPose_0_delegate(this.setGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPose_0_delegatefield));
			setGlobalPosition_1_delegatefield = new setGlobalPosition_1_delegate(this.setGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalPosition_1_delegatefield));
			setGlobalOrientation_2_delegatefield = new setGlobalOrientation_2_delegate(this.setGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalOrientation_2_delegatefield));
			setGlobalOrientationQuat_3_delegatefield = new setGlobalOrientationQuat_3_delegate(this.setGlobalOrientationQuat_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGlobalOrientationQuat_3_delegatefield));
			getGlobalPose_4_delegatefield = new getGlobalPose_4_delegate(this.getGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalPose_4_delegatefield));
			getGlobalPosition_5_delegatefield = new getGlobalPosition_5_delegate(this.getGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalPosition_5_delegatefield));
			getGlobalOrientation_6_delegatefield = new getGlobalOrientation_6_delegate(this.getGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalOrientation_6_delegatefield));
			getGlobalOrientationQuat_7_delegatefield = new getGlobalOrientationQuat_7_delegate(this.getGlobalOrientationQuat_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalOrientationQuat_7_delegatefield));
			moveGlobalPose_8_delegatefield = new moveGlobalPose_8_delegate(this.moveGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(moveGlobalPose_8_delegatefield));
			moveGlobalPosition_9_delegatefield = new moveGlobalPosition_9_delegate(this.moveGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(moveGlobalPosition_9_delegatefield));
			moveGlobalOrientation_10_delegatefield = new moveGlobalOrientation_10_delegate(this.moveGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(moveGlobalOrientation_10_delegatefield));
			moveGlobalOrientationQuat_11_delegatefield = new moveGlobalOrientationQuat_11_delegate(this.moveGlobalOrientationQuat_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(moveGlobalOrientationQuat_11_delegatefield));
			createShape_12_delegatefield = new createShape_12_delegate(this.createShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createShape_12_delegatefield));
			releaseShape_13_delegatefield = new releaseShape_13_delegate(this.releaseShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseShape_13_delegatefield));
			getNbShapes_14_delegatefield = new getNbShapes_14_delegate(this.getNbShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbShapes_14_delegatefield));
			getShapes_15_delegatefield = new getShapes_15_delegate(this.getShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShapes_15_delegatefield));
			setCMassOffsetLocalPose_16_delegatefield = new setCMassOffsetLocalPose_16_delegate(this.setCMassOffsetLocalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetLocalPose_16_delegatefield));
			setCMassOffsetLocalPosition_17_delegatefield = new setCMassOffsetLocalPosition_17_delegate(this.setCMassOffsetLocalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetLocalPosition_17_delegatefield));
			setCMassOffsetLocalOrientation_18_delegatefield = new setCMassOffsetLocalOrientation_18_delegate(this.setCMassOffsetLocalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetLocalOrientation_18_delegatefield));
			setCMassOffsetGlobalPose_19_delegatefield = new setCMassOffsetGlobalPose_19_delegate(this.setCMassOffsetGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetGlobalPose_19_delegatefield));
			setCMassOffsetGlobalPosition_20_delegatefield = new setCMassOffsetGlobalPosition_20_delegate(this.setCMassOffsetGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetGlobalPosition_20_delegatefield));
			setCMassOffsetGlobalOrientation_21_delegatefield = new setCMassOffsetGlobalOrientation_21_delegate(this.setCMassOffsetGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassOffsetGlobalOrientation_21_delegatefield));
			setCMassGlobalPose_22_delegatefield = new setCMassGlobalPose_22_delegate(this.setCMassGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassGlobalPose_22_delegatefield));
			setCMassGlobalPosition_23_delegatefield = new setCMassGlobalPosition_23_delegate(this.setCMassGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassGlobalPosition_23_delegatefield));
			setCMassGlobalOrientation_24_delegatefield = new setCMassGlobalOrientation_24_delegate(this.setCMassGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCMassGlobalOrientation_24_delegatefield));
			getCMassLocalPose_25_delegatefield = new getCMassLocalPose_25_delegate(this.getCMassLocalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassLocalPose_25_delegatefield));
			getCMassLocalPosition_26_delegatefield = new getCMassLocalPosition_26_delegate(this.getCMassLocalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassLocalPosition_26_delegatefield));
			getCMassLocalOrientation_27_delegatefield = new getCMassLocalOrientation_27_delegate(this.getCMassLocalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassLocalOrientation_27_delegatefield));
			getCMassGlobalPose_28_delegatefield = new getCMassGlobalPose_28_delegate(this.getCMassGlobalPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassGlobalPose_28_delegatefield));
			getCMassGlobalPosition_29_delegatefield = new getCMassGlobalPosition_29_delegate(this.getCMassGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassGlobalPosition_29_delegatefield));
			getCMassGlobalOrientation_30_delegatefield = new getCMassGlobalOrientation_30_delegate(this.getCMassGlobalOrientation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCMassGlobalOrientation_30_delegatefield));
			setMass_31_delegatefield = new setMass_31_delegate(this.setMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMass_31_delegatefield));
			getMass_32_delegatefield = new getMass_32_delegate(this.getMass_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMass_32_delegatefield));
			setMassSpaceInertiaTensor_33_delegatefield = new setMassSpaceInertiaTensor_33_delegate(this.setMassSpaceInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMassSpaceInertiaTensor_33_delegatefield));
			getMassSpaceInertiaTensor_34_delegatefield = new getMassSpaceInertiaTensor_34_delegate(this.getMassSpaceInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMassSpaceInertiaTensor_34_delegatefield));
			getGlobalInertiaTensor_35_delegatefield = new getGlobalInertiaTensor_35_delegate(this.getGlobalInertiaTensor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalInertiaTensor_35_delegatefield));
			getGlobalInertiaTensorInverse_36_delegatefield = new getGlobalInertiaTensorInverse_36_delegate(this.getGlobalInertiaTensorInverse_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGlobalInertiaTensorInverse_36_delegatefield));
			updateMassFromShapes_37_delegatefield = new updateMassFromShapes_37_delegate(this.updateMassFromShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(updateMassFromShapes_37_delegatefield));
			setLinearDamping_38_delegatefield = new setLinearDamping_38_delegate(this.setLinearDamping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLinearDamping_38_delegatefield));
			getLinearDamping_39_delegatefield = new getLinearDamping_39_delegate(this.getLinearDamping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLinearDamping_39_delegatefield));
			setAngularDamping_40_delegatefield = new setAngularDamping_40_delegate(this.setAngularDamping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAngularDamping_40_delegatefield));
			getAngularDamping_41_delegatefield = new getAngularDamping_41_delegate(this.getAngularDamping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAngularDamping_41_delegatefield));
			setLinearVelocity_42_delegatefield = new setLinearVelocity_42_delegate(this.setLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLinearVelocity_42_delegatefield));
			setAngularVelocity_43_delegatefield = new setAngularVelocity_43_delegate(this.setAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAngularVelocity_43_delegatefield));
			getLinearVelocity_44_delegatefield = new getLinearVelocity_44_delegate(this.getLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLinearVelocity_44_delegatefield));
			getAngularVelocity_45_delegatefield = new getAngularVelocity_45_delegate(this.getAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAngularVelocity_45_delegatefield));
			setMaxAngularVelocity_46_delegatefield = new setMaxAngularVelocity_46_delegate(this.setMaxAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMaxAngularVelocity_46_delegatefield));
			getMaxAngularVelocity_47_delegatefield = new getMaxAngularVelocity_47_delegate(this.getMaxAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMaxAngularVelocity_47_delegatefield));
			setCCDMotionThreshold_48_delegatefield = new setCCDMotionThreshold_48_delegate(this.setCCDMotionThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCCDMotionThreshold_48_delegatefield));
			getCCDMotionThreshold_49_delegatefield = new getCCDMotionThreshold_49_delegate(this.getCCDMotionThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCCDMotionThreshold_49_delegatefield));
			setLinearMomentum_50_delegatefield = new setLinearMomentum_50_delegate(this.setLinearMomentum_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLinearMomentum_50_delegatefield));
			setAngularMomentum_51_delegatefield = new setAngularMomentum_51_delegate(this.setAngularMomentum_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAngularMomentum_51_delegatefield));
			getLinearMomentum_52_delegatefield = new getLinearMomentum_52_delegate(this.getLinearMomentum_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLinearMomentum_52_delegatefield));
			getAngularMomentum_53_delegatefield = new getAngularMomentum_53_delegate(this.getAngularMomentum_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAngularMomentum_53_delegatefield));
			addForceAtPos_54_delegatefield = new addForceAtPos_54_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_54_delegatefield));
			addForceAtPos_55_delegatefield = new addForceAtPos_55_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_55_delegatefield));
			addForceAtPos_56_delegatefield = new addForceAtPos_56_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_56_delegatefield));
			addForceAtLocalPos_57_delegatefield = new addForceAtLocalPos_57_delegate(this.addForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtLocalPos_57_delegatefield));
			addForceAtLocalPos_58_delegatefield = new addForceAtLocalPos_58_delegate(this.addForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtLocalPos_58_delegatefield));
			addForceAtLocalPos_59_delegatefield = new addForceAtLocalPos_59_delegate(this.addForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtLocalPos_59_delegatefield));
			addLocalForceAtPos_60_delegatefield = new addLocalForceAtPos_60_delegate(this.addLocalForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtPos_60_delegatefield));
			addLocalForceAtPos_61_delegatefield = new addLocalForceAtPos_61_delegate(this.addLocalForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtPos_61_delegatefield));
			addLocalForceAtPos_62_delegatefield = new addLocalForceAtPos_62_delegate(this.addLocalForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtPos_62_delegatefield));
			addLocalForceAtLocalPos_63_delegatefield = new addLocalForceAtLocalPos_63_delegate(this.addLocalForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtLocalPos_63_delegatefield));
			addLocalForceAtLocalPos_64_delegatefield = new addLocalForceAtLocalPos_64_delegate(this.addLocalForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtLocalPos_64_delegatefield));
			addLocalForceAtLocalPos_65_delegatefield = new addLocalForceAtLocalPos_65_delegate(this.addLocalForceAtLocalPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForceAtLocalPos_65_delegatefield));
			addForce_66_delegatefield = new addForce_66_delegate(this.addForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForce_66_delegatefield));
			addForce_67_delegatefield = new addForce_67_delegate(this.addForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForce_67_delegatefield));
			addForce_68_delegatefield = new addForce_68_delegate(this.addForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForce_68_delegatefield));
			addLocalForce_69_delegatefield = new addLocalForce_69_delegate(this.addLocalForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForce_69_delegatefield));
			addLocalForce_70_delegatefield = new addLocalForce_70_delegate(this.addLocalForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForce_70_delegatefield));
			addLocalForce_71_delegatefield = new addLocalForce_71_delegate(this.addLocalForce_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalForce_71_delegatefield));
			addTorque_72_delegatefield = new addTorque_72_delegate(this.addTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addTorque_72_delegatefield));
			addTorque_73_delegatefield = new addTorque_73_delegate(this.addTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addTorque_73_delegatefield));
			addTorque_74_delegatefield = new addTorque_74_delegate(this.addTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addTorque_74_delegatefield));
			addLocalTorque_75_delegatefield = new addLocalTorque_75_delegate(this.addLocalTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalTorque_75_delegatefield));
			addLocalTorque_76_delegatefield = new addLocalTorque_76_delegate(this.addLocalTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalTorque_76_delegatefield));
			addLocalTorque_77_delegatefield = new addLocalTorque_77_delegate(this.addLocalTorque_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addLocalTorque_77_delegatefield));
			getPointVelocity_78_delegatefield = new getPointVelocity_78_delegate(this.getPointVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPointVelocity_78_delegatefield));
			getLocalPointVelocity_79_delegatefield = new getLocalPointVelocity_79_delegate(this.getLocalPointVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLocalPointVelocity_79_delegatefield));
			isGroupSleeping_80_delegatefield = new isGroupSleeping_80_delegate(this.isGroupSleeping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isGroupSleeping_80_delegatefield));
			isSleeping_81_delegatefield = new isSleeping_81_delegate(this.isSleeping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isSleeping_81_delegatefield));
			getSleepLinearVelocity_82_delegatefield = new getSleepLinearVelocity_82_delegate(this.getSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSleepLinearVelocity_82_delegatefield));
			setSleepLinearVelocity_83_delegatefield = new setSleepLinearVelocity_83_delegate(this.setSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSleepLinearVelocity_83_delegatefield));
			getSleepAngularVelocity_84_delegatefield = new getSleepAngularVelocity_84_delegate(this.getSleepAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSleepAngularVelocity_84_delegatefield));
			setSleepAngularVelocity_85_delegatefield = new setSleepAngularVelocity_85_delegate(this.setSleepAngularVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSleepAngularVelocity_85_delegatefield));
			getSleepEnergyThreshold_86_delegatefield = new getSleepEnergyThreshold_86_delegate(this.getSleepEnergyThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSleepEnergyThreshold_86_delegatefield));
			setSleepEnergyThreshold_87_delegatefield = new setSleepEnergyThreshold_87_delegate(this.setSleepEnergyThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSleepEnergyThreshold_87_delegatefield));
			wakeUp_88_delegatefield = new wakeUp_88_delegate(this.wakeUp_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(wakeUp_88_delegatefield));
			putToSleep_89_delegatefield = new putToSleep_89_delegate(this.putToSleep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(putToSleep_89_delegatefield));
			getScene_90_delegatefield = new getScene_90_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_90_delegatefield));
			saveToDesc_91_delegatefield = new saveToDesc_91_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_91_delegatefield));
			setName_92_delegatefield = new setName_92_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_92_delegatefield));
			getName_93_delegatefield = new getName_93_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_93_delegatefield));
			setGroup_94_delegatefield = new setGroup_94_delegate(this.setGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroup_94_delegatefield));
			getGroup_95_delegatefield = new getGroup_95_delegate(this.getGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroup_95_delegatefield));
			setDominanceGroup_96_delegatefield = new setDominanceGroup_96_delegate(this.setDominanceGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDominanceGroup_96_delegatefield));
			getDominanceGroup_97_delegatefield = new getDominanceGroup_97_delegate(this.getDominanceGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDominanceGroup_97_delegatefield));
			raiseActorFlag_98_delegatefield = new raiseActorFlag_98_delegate(this.raiseActorFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raiseActorFlag_98_delegatefield));
			clearActorFlag_99_delegatefield = new clearActorFlag_99_delegate(this.clearActorFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(clearActorFlag_99_delegatefield));
			readActorFlag_100_delegatefield = new readActorFlag_100_delegate(this.readActorFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(readActorFlag_100_delegatefield));
			resetUserActorPairFiltering_101_delegatefield = new resetUserActorPairFiltering_101_delegate(this.resetUserActorPairFiltering_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetUserActorPairFiltering_101_delegatefield));
			isDynamic_102_delegatefield = new isDynamic_102_delegate(this.isDynamic_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isDynamic_102_delegatefield));
			computeKineticEnergy_103_delegatefield = new computeKineticEnergy_103_delegate(this.computeKineticEnergy_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(computeKineticEnergy_103_delegatefield));
			raiseBodyFlag_104_delegatefield = new raiseBodyFlag_104_delegate(this.raiseBodyFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raiseBodyFlag_104_delegatefield));
			clearBodyFlag_105_delegatefield = new clearBodyFlag_105_delegate(this.clearBodyFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(clearBodyFlag_105_delegatefield));
			readBodyFlag_106_delegatefield = new readBodyFlag_106_delegate(this.readBodyFlag_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(readBodyFlag_106_delegatefield));
			saveBodyToDesc_107_delegatefield = new saveBodyToDesc_107_delegate(this.saveBodyToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveBodyToDesc_107_delegatefield));
			setSolverIterationCount_108_delegatefield = new setSolverIterationCount_108_delegate(this.setSolverIterationCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSolverIterationCount_108_delegatefield));
			getSolverIterationCount_109_delegatefield = new getSolverIterationCount_109_delegate(this.getSolverIterationCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSolverIterationCount_109_delegatefield));
			getContactReportThreshold_110_delegatefield = new getContactReportThreshold_110_delegate(this.getContactReportThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getContactReportThreshold_110_delegatefield));
			setContactReportThreshold_111_delegatefield = new setContactReportThreshold_111_delegate(this.setContactReportThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setContactReportThreshold_111_delegatefield));
			getContactReportFlags_112_delegatefield = new getContactReportFlags_112_delegate(this.getContactReportFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getContactReportFlags_112_delegatefield));
			setContactReportFlags_113_delegatefield = new setContactReportFlags_113_delegate(this.setContactReportFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setContactReportFlags_113_delegatefield));
			linearSweep_114_delegatefield = new linearSweep_114_delegate(this.linearSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearSweep_114_delegatefield));
			linearSweep_115_delegatefield = new linearSweep_115_delegate(this.linearSweep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(linearSweep_115_delegatefield));
			getCompartment_116_delegatefield = new getCompartment_116_delegate(this.getCompartment_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCompartment_116_delegatefield));
			getForceFieldMaterial_117_delegatefield = new getForceFieldMaterial_117_delegate(this.getForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceFieldMaterial_117_delegatefield));
			setForceFieldMaterial_118_delegatefield = new setForceFieldMaterial_118_delegate(this.setForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setForceFieldMaterial_118_delegatefield));
			return list;
		}
	}
}
