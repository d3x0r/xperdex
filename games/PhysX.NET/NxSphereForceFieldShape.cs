//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSphereForceFieldShape : NxForceFieldShape
	{
		
		internal NxSphereForceFieldShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Sets the sphere radius. </summary>
		/// <param name="radius">The new radius for the sphere. Range: (0,inf)</param>
		public virtual void setRadius(float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphereForceFieldShape_setRadius_INVOKE(ClassPointer, doSetFunctionPointers, radius);
		}
		
		private void setRadius_virtual(float radius)
		{
			setRadius(radius);
		}
		
		delegate void setRadius_0_delegate(float radius);
		
		
		
		
		
		
		private setRadius_0_delegate setRadius_0_delegatefield;
		
		/// <summary>Retrieves the radius of the sphere. </summary>
		public virtual float getRadius()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSphereForceFieldShape_getRadius_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRadius_virtual()
		{
			return getRadius();
		}
		
		delegate float getRadius_1_delegate();
		
		
		
		
		
		
		private getRadius_1_delegate getRadius_1_delegatefield;
		
		/// <summary>Saves the state of the shape object to a descriptor. </summary>
		/// <param name="desc">Descriptor to save to.</param>
		public virtual void saveToDesc(NxSphereForceFieldShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphereForceFieldShape_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxSphereForceFieldShapeDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_2_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_2_delegate saveToDesc_2_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphereForceFieldShape_setRadius")]
        private extern static void NxSphereForceFieldShape_setRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphereForceFieldShape_getRadius")]
        private extern static System.Single NxSphereForceFieldShape_getRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphereForceFieldShape_saveToDesc")]
        private extern static void NxSphereForceFieldShape_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSphereForceFieldShape")]
        private extern static IntPtr new_NxSphereForceFieldShape_INVOKE (bool do_override);

		
		protected NxSphereForceFieldShape() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxSphereForceFieldShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSphereForceFieldShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSphereForceFieldShape_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSphereForceFieldShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSphereForceFieldShape)(obj.Target));
				}
			}
			return new NxSphereForceFieldShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setRadius_0_delegatefield = new setRadius_0_delegate(this.setRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRadius_0_delegatefield));
			getRadius_1_delegatefield = new getRadius_1_delegate(this.getRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRadius_1_delegatefield));
			saveToDesc_2_delegatefield = new saveToDesc_2_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_2_delegatefield));
			return list;
		}
	}
}
