//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserControllerHitReport : DoxyBindObject
	{
		
		internal NxUserControllerHitReport(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Called when current controller hits a shape. </summary>
		/// <param name="hit">Provides information about the contact with the touched shape. </param>
		public virtual NxControllerAction onShapeHit(NxControllerShapeHit hit)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserControllerHitReport_onShapeHit_INVOKE(ClassPointer, doSetFunctionPointers, (hit!=null ? hit.ClassPointer : NullRef));
		}
		
		private NxControllerAction onShapeHit_virtual(IntPtr hit)
		{
			return onShapeHit(NxControllerShapeHit.GetClass(hit));
		}
		
		delegate NxControllerAction onShapeHit_0_delegate(IntPtr hit);
		
		
		
		
		
		
		private onShapeHit_0_delegate onShapeHit_0_delegatefield;
		
		/// <summary>Called when current controller hits another controller. </summary>
		/// <param name="hit">Provides information about the touched controller. </param>
		public virtual NxControllerAction onControllerHit(NxControllersHit hit)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserControllerHitReport_onControllerHit_INVOKE(ClassPointer, doSetFunctionPointers, (hit!=null ? hit.ClassPointer : NullRef));
		}
		
		private NxControllerAction onControllerHit_virtual(IntPtr hit)
		{
			return onControllerHit(NxControllersHit.GetClass(hit));
		}
		
		delegate NxControllerAction onControllerHit_1_delegate(IntPtr hit);
		
		
		
		
		
		
		private onControllerHit_1_delegate onControllerHit_1_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserControllerHitReport_onShapeHit")]
        private extern static NxControllerAction NxUserControllerHitReport_onShapeHit_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef hit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserControllerHitReport_onControllerHit")]
        private extern static NxControllerAction NxUserControllerHitReport_onControllerHit_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef hit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserControllerHitReport")]
        private extern static IntPtr new_NxUserControllerHitReport_INVOKE (bool do_override);

		
		protected NxUserControllerHitReport() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserControllerHitReport)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserControllerHitReport_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserControllerHitReport_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserControllerHitReport GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserControllerHitReport)(obj.Target));
				}
			}
			return new NxUserControllerHitReport(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onShapeHit_0_delegatefield = new onShapeHit_0_delegate(this.onShapeHit_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onShapeHit_0_delegatefield));
			onControllerHit_1_delegatefield = new onControllerHit_1_delegate(this.onControllerHit_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onControllerHit_1_delegatefield));
			return list;
		}
	}
}
