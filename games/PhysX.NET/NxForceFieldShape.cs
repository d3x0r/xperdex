//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxForceFieldShape : DoxyBindObject
	{
		
		internal NxForceFieldShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxForceFieldShape_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldShape_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>used internally, do not change. </summary>
		public System.IntPtr appData
		{
			get
			{
				System.IntPtr value = get_NxForceFieldShape_appData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldShape_appData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxForceFieldShape() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxForceFieldShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxForceFieldShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxForceFieldShape_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Retrieves the force field shape's transform. </summary>
		public virtual NxMat34 getPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShape_getPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getPose_virtual()
		{
			return getPose();
		}
		
		delegate NxMat34 getPose_0_delegate();
		
		
		
		
		
		
		private getPose_0_delegate getPose_0_delegatefield;
		
		/// <summary>Sets the force field shape's transform. </summary>
		public virtual void setPose(ref NxMat34 unknown6)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShape_setPose_INVOKE(ClassPointer, doSetFunctionPointers, ref unknown6);
		}
		
		private void setPose_virtual([In()] ref NxMat34 unknown6)
		{
			setPose(ref unknown6);
		}
		
		delegate void setPose_1_delegate([In()] ref NxMat34 unknown6);
		
		
		
		
		
		
		private setPose_1_delegate setPose_1_delegatefield;
		
		/// <summary>Returns the owning force field if this is a shape of an include group, else NULL will be returned. </summary>
		public virtual NxForceField getForceField()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField.GetClass(NxForceFieldShape_getForceField_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getForceField_virtual()
		{
			return getForceField().ClassPointer.Handle;
		}
		
		delegate IntPtr getForceField_2_delegate();
		
		
		
		
		
		
		private getForceField_2_delegate getForceField_2_delegatefield;
		
		/// <summary>Returns the owning force field shape group. </summary>
		public virtual NxForceFieldShapeGroup getShapeGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup.GetClass(NxForceFieldShape_getShapeGroup_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getShapeGroup_virtual()
		{
			return getShapeGroup().ClassPointer.Handle;
		}
		
		delegate IntPtr getShapeGroup_3_delegate();
		
		
		
		
		
		
		private getShapeGroup_3_delegate getShapeGroup_3_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceFieldShape_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_4_delegate(string name);
		
		
		
		
		
		
		private setName_4_delegate setName_4_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShape_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_5_delegate();
		
		
		
		
		
		
		private getName_5_delegate getName_5_delegatefield;
		
		/// <summary>Retrieve the type of this force field shape. </summary>
		public virtual NxShapeType getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShape_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxShapeType getType_virtual()
		{
			return getType();
		}
		
		delegate NxShapeType getType_6_delegate();
		
		
		
		
		
		
		private getType_6_delegate getType_6_delegatefield;
		
		/// <summary>Type casting operator. The result may be cast to the desired subclass type. </summary>
		/// <param name="type">Used to query for a specific effector type. </param>
		public System.IntPtr @is(NxShapeType type)
		{
			return NxForceFieldShape_is_INVOKE(ClassPointer, doSetFunctionPointers, type);
		}
				
		/// <summary>Attempts to perform a downcast to the type returned. </summary>
		public NxSphereForceFieldShape isSphere()
		{
			return NxSphereForceFieldShape.GetClass(NxForceFieldShape_isSphere_INVOKE(ClassPointer, doSetFunctionPointers));
		}
						
		/// <summary>Attempts to perform a downcast to the type returned. </summary>
		public NxBoxForceFieldShape isBox()
		{
			return NxBoxForceFieldShape.GetClass(NxForceFieldShape_isBox_1_INVOKE(ClassPointer, doSetFunctionPointers));
		}
				
		/// <summary>Attempts to perform a downcast to the type returned. </summary>
		public NxCapsuleForceFieldShape isCapsule()
		{
			return NxCapsuleForceFieldShape.GetClass(NxForceFieldShape_isCapsule_1_INVOKE(ClassPointer, doSetFunctionPointers));
		}
				
		/// <summary>Attempts to perform a downcast to the type returned. </summary>
		public NxConvexForceFieldShape isConvex()
		{
			return NxConvexForceFieldShape.GetClass(NxForceFieldShape_isConvex_1_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldShape_userData")]
        private extern static void set_NxForceFieldShape_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldShape_userData")]
        private extern static System.IntPtr get_NxForceFieldShape_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldShape_appData")]
        private extern static void set_NxForceFieldShape_appData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldShape_appData")]
        private extern static System.IntPtr get_NxForceFieldShape_appData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxForceFieldShape")]
        private extern static IntPtr new_NxForceFieldShape_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_getPose")]
        private extern static NxMat34 NxForceFieldShape_getPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_setPose")]
        private extern static void NxForceFieldShape_setPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 unknown6);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_getForceField")]
        private extern static IntPtr NxForceFieldShape_getForceField_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_getShapeGroup")]
        private extern static IntPtr NxForceFieldShape_getShapeGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_setName")]
        private extern static void NxForceFieldShape_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_getName")]
        private extern static System.String NxForceFieldShape_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_getType")]
        private extern static NxShapeType NxForceFieldShape_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_is")]
        private extern static System.IntPtr NxForceFieldShape_is_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_is_1")]
        private extern static System.IntPtr NxForceFieldShape_is_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxShapeType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isSphere")]
        private extern static IntPtr NxForceFieldShape_isSphere_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isSphere_1")]
        private extern static IntPtr NxForceFieldShape_isSphere_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isBox")]
        private extern static IntPtr NxForceFieldShape_isBox_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isBox_1")]
        private extern static IntPtr NxForceFieldShape_isBox_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isCapsule")]
        private extern static IntPtr NxForceFieldShape_isCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isCapsule_1")]
        private extern static IntPtr NxForceFieldShape_isCapsule_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isConvex")]
        private extern static IntPtr NxForceFieldShape_isConvex_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldShape_isConvex_1")]
        private extern static IntPtr NxForceFieldShape_isConvex_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxForceFieldShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxForceFieldShape)(obj.Target));
				}
			}
			return new NxForceFieldShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getPose_0_delegatefield = new getPose_0_delegate(this.getPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPose_0_delegatefield));
			setPose_1_delegatefield = new setPose_1_delegate(this.setPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPose_1_delegatefield));
			getForceField_2_delegatefield = new getForceField_2_delegate(this.getForceField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceField_2_delegatefield));
			getShapeGroup_3_delegatefield = new getShapeGroup_3_delegate(this.getShapeGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShapeGroup_3_delegatefield));
			setName_4_delegatefield = new setName_4_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_4_delegatefield));
			getName_5_delegatefield = new getName_5_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_5_delegatefield));
			getType_6_delegatefield = new getType_6_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_6_delegatefield));
			return list;
		}
	}
}
