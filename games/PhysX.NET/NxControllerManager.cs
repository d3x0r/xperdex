//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxControllerManager : DoxyBindObject
	{
		
		internal NxControllerManager(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Returns the number of controllers that are being managed. </summary>
		public virtual uint getNbControllers()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxControllerManager_getNbControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbControllers_virtual()
		{
			return getNbControllers();
		}
		
		delegate uint getNbControllers_0_delegate();
		
		
		
		
		
		
		private getNbControllers_0_delegate getNbControllers_0_delegatefield;
		
		/// <summary>Retrieve one of the controllers in the manager. </summary>
		/// <param name="index">the index of the controller to return </param>
		public virtual NxController getController(uint index)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxController.GetClass(NxControllerManager_getController_INVOKE(ClassPointer, doSetFunctionPointers, index));
		}
		
		private IntPtr getController_virtual(uint index)
		{
			return getController(index).ClassPointer.Handle;
		}
		
		delegate IntPtr getController_1_delegate(uint index);
		
		
		
		
		
		
		private getController_1_delegate getController_1_delegatefield;
		
		/// <summary>Creates a new character controller. </summary>
		/// <param name="scene">The scene that the controller will belong to. </param>
		/// <param name="desc">The controllers descriptor </param>
		public virtual NxController createController(NxScene scene, NxControllerDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxController.GetClass(NxControllerManager_createController_INVOKE(ClassPointer, doSetFunctionPointers, (scene!=null ? scene.ClassPointer : NullRef), (desc!=null ? desc.ClassPointer : NullRef)));
		}
		
		private IntPtr createController_virtual(IntPtr scene, IntPtr desc)
		{
			return createController(NxScene.GetClass(scene), NxControllerDesc.GetClass(desc)).ClassPointer.Handle;
		}
		
		delegate IntPtr createController_2_delegate(IntPtr scene, IntPtr desc);
		
		
		
		
		
		
		private createController_2_delegate createController_2_delegatefield;
		
		/// <summary>Releases a controller. </summary>
		/// <param name="controller">The controller to release.</param>
		public virtual void releaseController(NxController controller)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxControllerManager_releaseController_INVOKE(ClassPointer, doSetFunctionPointers, (controller!=null ? controller.ClassPointer : NullRef));
		}
		
		private void releaseController_virtual(IntPtr controller)
		{
			releaseController(NxController.GetClass(controller));
		}
		
		delegate void releaseController_3_delegate(IntPtr controller);
		
		
		
		
		
		
		private releaseController_3_delegate releaseController_3_delegatefield;
		
		/// <summary>Releases all the controllers that are being managed. </summary>
		public virtual void purgeControllers()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxControllerManager_purgeControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void purgeControllers_virtual()
		{
			purgeControllers();
		}
		
		delegate void purgeControllers_4_delegate();
		
		
		
		
		
		
		private purgeControllers_4_delegate purgeControllers_4_delegatefield;
		
		/// <summary>Updates the exposed position from the filtered position of all controllers. </summary>
		public virtual void updateControllers()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxControllerManager_updateControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void updateControllers_virtual()
		{
			updateControllers();
		}
		
		delegate void updateControllers_5_delegate();
		
		
		
		
		
		
		private updateControllers_5_delegate updateControllers_5_delegatefield;
		
		/// <summary>Retrieves debug data. Note that debug rendering is not enabled until this method is called. </summary>
		public virtual NxDebugRenderable getDebugData()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxDebugRenderable.GetClass(NxControllerManager_getDebugData_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getDebugData_virtual()
		{
			return getDebugData().ClassPointer.Handle;
		}
		
		delegate IntPtr getDebugData_6_delegate();
		
		
		
		
		
		
		private getDebugData_6_delegate getDebugData_6_delegatefield;
		
		/// <summary>Resets debug data. </summary>
		public virtual void resetDebugData()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxControllerManager_resetDebugData_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void resetDebugData_virtual()
		{
			resetDebugData();
		}
		
		delegate void resetDebugData_7_delegate();
		
		
		
		
		
		
		private resetDebugData_7_delegate resetDebugData_7_delegatefield;
		
		/// <summary></summary>
		protected NxControllerManager() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxControllerManager)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxControllerManager_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxControllerManager_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		protected virtual void release()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			throw new System.NotImplementedException("Cannot call protected C++ member");
		}
		
		private void release_virtual()
		{
			release();
		}
		
		delegate void release_8_delegate();
		
		
		
		
		
		
		private release_8_delegate release_8_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_getNbControllers")]
        private extern static System.UInt32 NxControllerManager_getNbControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_getController")]
        private extern static IntPtr NxControllerManager_getController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 index);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_createController")]
        private extern static IntPtr NxControllerManager_createController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef scene, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_releaseController")]
        private extern static void NxControllerManager_releaseController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef controller);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_purgeControllers")]
        private extern static void NxControllerManager_purgeControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_updateControllers")]
        private extern static void NxControllerManager_updateControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_getDebugData")]
        private extern static IntPtr NxControllerManager_getDebugData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxControllerManager_resetDebugData")]
        private extern static void NxControllerManager_resetDebugData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxControllerManager")]
        private extern static IntPtr new_NxControllerManager_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxControllerManager GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxControllerManager)(obj.Target));
				}
			}
			return new NxControllerManager(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getNbControllers_0_delegatefield = new getNbControllers_0_delegate(this.getNbControllers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbControllers_0_delegatefield));
			getController_1_delegatefield = new getController_1_delegate(this.getController_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getController_1_delegatefield));
			createController_2_delegatefield = new createController_2_delegate(this.createController_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createController_2_delegatefield));
			releaseController_3_delegatefield = new releaseController_3_delegate(this.releaseController_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(releaseController_3_delegatefield));
			purgeControllers_4_delegatefield = new purgeControllers_4_delegate(this.purgeControllers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(purgeControllers_4_delegatefield));
			updateControllers_5_delegatefield = new updateControllers_5_delegate(this.updateControllers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(updateControllers_5_delegatefield));
			getDebugData_6_delegatefield = new getDebugData_6_delegate(this.getDebugData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDebugData_6_delegatefield));
			resetDebugData_7_delegatefield = new resetDebugData_7_delegate(this.resetDebugData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetDebugData_7_delegatefield));
			release_8_delegatefield = new release_8_delegate(this.release_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(release_8_delegatefield));
			return list;
		}
	}
}
