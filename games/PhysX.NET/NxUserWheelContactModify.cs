//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserWheelContactModify : DoxyBindObject
	{
		
		internal NxUserWheelContactModify(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>This callback is called once for each wheel and sub step before the wheel constraints are setup and fed to the SDK. The values passed in the parameters can be adjusted to affect the vehicle simulation. The most interesting values are contactPosition, contactPoint, and contactNormal. The contactPosition value specifies how far on the travel distance the contactPoint was found. If you want to simulate a bumpy road, then this is the main parameter to change. It is also good to adjust the contactPoint variable, so that the wheel forces are applied in the correct position. </summary>
		/// <param name="wheelShape">The WheelShape that is being processed. </param>
		/// <param name="contactPoint">The contact point (in world coordinates) that is being used for the wheel. </param>
		/// <param name="contactNormal">The normal of the geometry at the contact point. </param>
		/// <param name="contactPosition">The distance on the spring travel distance where the wheel would end up if it was resting on the contact point. </param>
		/// <param name="normalForce">The normal force on the wheel from the last simulation step. </param>
		/// <param name="otherShape">The shape with which the wheel is in contact. </param>
		/// <param name="otherShapeMaterialIndex">The material on the other shape in the position where the wheel is in contact. Currently has no effect on the simulation. </param>
		/// <param name="otherShapeFeatureIndex">The feature on the other shape in the position where the wheel is in contact.</param>
		public virtual bool onWheelContact(NxWheelShape wheelShape, ref NxVec3 contactPoint, ref NxVec3 contactNormal, ref float contactPosition, ref float normalForce, NxShape otherShape, ref ushort otherShapeMaterialIndex, uint otherShapeFeatureIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserWheelContactModify_onWheelContact_INVOKE(ClassPointer, doSetFunctionPointers, (wheelShape!=null ? wheelShape.ClassPointer : NullRef), ref contactPoint, ref contactNormal, ref contactPosition, ref normalForce, (otherShape!=null ? otherShape.ClassPointer : NullRef), ref otherShapeMaterialIndex, otherShapeFeatureIndex);
		}
		
		private bool onWheelContact_virtual(IntPtr wheelShape, [In()] [Out()] ref NxVec3 contactPoint, [In()] [Out()] ref NxVec3 contactNormal, [In()] [Out()] ref float contactPosition, [In()] [Out()] ref float normalForce, IntPtr otherShape, [In()] [Out()] ref ushort otherShapeMaterialIndex, uint otherShapeFeatureIndex)
		{
			return onWheelContact(NxWheelShape.GetClass(wheelShape), ref contactPoint, ref contactNormal, ref contactPosition, ref normalForce, NxShape.GetClass(otherShape), ref otherShapeMaterialIndex, otherShapeFeatureIndex);
		}
		
		delegate bool onWheelContact_0_delegate(IntPtr wheelShape, [In()] [Out()] ref NxVec3 contactPoint, [In()] [Out()] ref NxVec3 contactNormal, [In()] [Out()] ref float contactPosition, [In()] [Out()] ref float normalForce, IntPtr otherShape, [In()] [Out()] ref ushort otherShapeMaterialIndex, uint otherShapeFeatureIndex);
		
		
		
		
		
		
		private onWheelContact_0_delegate onWheelContact_0_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserWheelContactModify_onWheelContact")]
        private extern static System.Boolean NxUserWheelContactModify_onWheelContact_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef wheelShape, [In()] [Out()] ref NxVec3 contactPoint, [In()] [Out()] ref NxVec3 contactNormal, [In()] [Out()] ref System.Single contactPosition, [In()] [Out()] ref System.Single normalForce, HandleRef otherShape, [In()] [Out()] ref System.UInt16 otherShapeMaterialIndex, System.UInt32 otherShapeFeatureIndex);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserWheelContactModify")]
        private extern static IntPtr new_NxUserWheelContactModify_INVOKE (bool do_override);

		
		protected NxUserWheelContactModify() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserWheelContactModify)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserWheelContactModify_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserWheelContactModify_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserWheelContactModify GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserWheelContactModify)(obj.Target));
				}
			}
			return new NxUserWheelContactModify(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onWheelContact_0_delegatefield = new onWheelContact_0_delegate(this.onWheelContact_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onWheelContact_0_delegatefield));
			return list;
		}
	}
}
