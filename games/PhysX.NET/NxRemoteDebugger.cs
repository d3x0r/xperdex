//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxRemoteDebugger : DoxyBindObject
	{
		
		internal NxRemoteDebugger(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		/// <param name="host">The host name of the computer running the VRD, e.g. "localhost". </param>
		/// <param name="port">The port that the VRD is listening to. </param>
		/// <param name="eventMask">32 bit mask used to filter information sent to the debugger, constructed from NX_DBG_EVENTMASK_X macros. </param>
		public virtual void connect(string host, uint port, uint eventMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_connect_INVOKE(ClassPointer, doSetFunctionPointers, host, port, eventMask);
		}
		
		private void connect_virtual(string host, uint port, uint eventMask)
		{
			connect(host, port, eventMask);
		}
		
		delegate void connect_0_delegate(string host, uint port, uint eventMask);
		
		
		
		
		
		
		private connect_0_delegate connect_0_delegatefield;
		
		/// <summary></summary>
		/// <param name="host">The host name of the computer running the VRD, e.g. "localhost". </param>
		/// <param name="port">The port that the VRD is listening to. </param>
		/// <param name="eventMask">32 bit mask used to filter information sent to the debugger, constructed from NX_DBG_EVENTMASK_X macros. </param>
		public virtual void connect(string host, uint port)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_connect_1_INVOKE(ClassPointer, doSetFunctionPointers, host, port);
		}
		
		private void connect_virtual(string host, uint port)
		{
			connect(host, port);
		}
		
		delegate void connect_1_delegate(string host, uint port);
		
		
		
		
		
		
		private connect_1_delegate connect_1_delegatefield;
		
		/// <summary></summary>
		/// <param name="host">The host name of the computer running the VRD, e.g. "localhost". </param>
		/// <param name="port">The port that the VRD is listening to. </param>
		/// <param name="eventMask">32 bit mask used to filter information sent to the debugger, constructed from NX_DBG_EVENTMASK_X macros. </param>
		public virtual void connect(string host)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_connect_2_INVOKE(ClassPointer, doSetFunctionPointers, host);
		}
		
		private void connect_virtual(string host)
		{
			connect(host);
		}
		
		delegate void connect_2_delegate(string host);
		
		
		
		
		
		
		private connect_2_delegate connect_2_delegatefield;
		
		/// <summary></summary>
		public virtual void disconnect()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_disconnect_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void disconnect_virtual()
		{
			disconnect();
		}
		
		delegate void disconnect_3_delegate();
		
		
		
		
		
		
		private disconnect_3_delegate disconnect_3_delegatefield;
		
		/// <summary></summary>
		public virtual void flush()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_flush_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void flush_virtual()
		{
			flush();
		}
		
		delegate void flush_4_delegate();
		
		
		
		
		
		
		private flush_4_delegate flush_4_delegatefield;
		
		/// <summary></summary>
		public virtual bool isConnected()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRemoteDebugger_isConnected_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isConnected_virtual()
		{
			return isConnected();
		}
		
		delegate bool isConnected_5_delegate();
		
		
		
		
		
		
		private isConnected_5_delegate isConnected_5_delegatefield;
		
		/// <summary></summary>
		public virtual void frameBreak()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_frameBreak_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void frameBreak_virtual()
		{
			frameBreak();
		}
		
		delegate void frameBreak_6_delegate();
		
		
		
		
		
		
		private frameBreak_6_delegate frameBreak_6_delegatefield;
		
		/// <summary></summary>
		/// <param name="object">Object identifier, usually a pointer. </param>
		/// <param name="type">Type of object to create. </param>
		/// <param name="className">Class name of the object, e.g. "NxBox" or "PulseRifleBolt". </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void createObject(System.IntPtr _object, NxRemoteDebuggerObjectType type, string className, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_createObject_INVOKE(ClassPointer, doSetFunctionPointers, _object, type, className, mask);
		}
		
		private void createObject_virtual(System.IntPtr _object, NxRemoteDebuggerObjectType type, string className, uint mask)
		{
			createObject(_object, type, className, mask);
		}
		
		delegate void createObject_7_delegate(System.IntPtr _object, NxRemoteDebuggerObjectType type, string className, uint mask);
		
		
		
		
		
		
		private createObject_7_delegate createObject_7_delegatefield;
		
		/// <summary></summary>
		/// <param name="object">Object identifier of the object to remove. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void removeObject(System.IntPtr _object, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_removeObject_INVOKE(ClassPointer, doSetFunctionPointers, _object, mask);
		}
		
		private void removeObject_virtual(System.IntPtr _object, uint mask)
		{
			removeObject(_object, mask);
		}
		
		delegate void removeObject_8_delegate(System.IntPtr _object, uint mask);
		
		
		
		
		
		
		private removeObject_8_delegate removeObject_8_delegatefield;
		
		/// <summary></summary>
		/// <param name="object">Object identifier of the parent. </param>
		/// <param name="child">Object identifier of the child. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void addChild(System.IntPtr _object, System.IntPtr child, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_addChild_INVOKE(ClassPointer, doSetFunctionPointers, _object, child, mask);
		}
		
		private void addChild_virtual(System.IntPtr _object, System.IntPtr child, uint mask)
		{
			addChild(_object, child, mask);
		}
		
		delegate void addChild_9_delegate(System.IntPtr _object, System.IntPtr child, uint mask);
		
		
		
		
		
		
		private addChild_9_delegate addChild_9_delegatefield;
		
		/// <summary></summary>
		/// <param name="object">Object identifier of the parent. </param>
		/// <param name="child">Object identifier of the child. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void removeChild(System.IntPtr _object, System.IntPtr child, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_removeChild_INVOKE(ClassPointer, doSetFunctionPointers, _object, child, mask);
		}
		
		private void removeChild_virtual(System.IntPtr _object, System.IntPtr child, uint mask)
		{
			removeChild(_object, child, mask);
		}
		
		delegate void removeChild_10_delegate(System.IntPtr _object, System.IntPtr child, uint mask);
		
		
		
		
		
		
		private removeChild_10_delegate removeChild_10_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref float parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref float parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_11_delegate([In()] ref float parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_11_delegate writeParameter_11_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref uint parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_1_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref uint parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_12_delegate([In()] ref uint parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_12_delegate writeParameter_12_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref NxVec3 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_2_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref NxVec3 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_13_delegate([In()] ref NxVec3 parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_13_delegate writeParameter_13_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(NxPlane parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_3_INVOKE(ClassPointer, doSetFunctionPointers, (parameter!=null ? parameter.ClassPointer : NullRef), _object, create, name, mask);
		}
		
		private void writeParameter_virtual(IntPtr parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(NxPlane.GetClass(parameter), _object, create, name, mask);
		}
		
		delegate void writeParameter_14_delegate(IntPtr parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_14_delegate writeParameter_14_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref NxMat34 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_4_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref NxMat34 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_15_delegate([In()] ref NxMat34 parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_15_delegate writeParameter_15_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref NxMat33 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_5_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref NxMat33 parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_16_delegate([In()] ref NxMat33 parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_16_delegate writeParameter_16_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">Pointer to a binary chunk of data to write. The first 4 bytes must be an NxU32 containing the data size, including those 4 size bytes. The data is assumed to be of the same endianness as the output stream. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(byte[] parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_6_INVOKE(ClassPointer, doSetFunctionPointers, parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual(byte[] parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_17_delegate(byte[] parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_17_delegate writeParameter_17_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(string parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_7_INVOKE(ClassPointer, doSetFunctionPointers, parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual(string parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_18_delegate(string parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_18_delegate writeParameter_18_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(ref bool parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_8_INVOKE(ClassPointer, doSetFunctionPointers, ref parameter, _object, create, name, mask);
		}
		
		private void writeParameter_virtual([In()] ref bool parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			writeParameter(ref parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_19_delegate([In()] ref bool parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_19_delegate writeParameter_19_delegatefield;
		
		/// <summary></summary>
		/// <param name="parameter">The value to write. </param>
		/// <param name="object">The object to write a parameter to. </param>
		/// <param name="create">Must be true at parameter creation, and should be false for all consecutive writes of the same parameter for optimal stream size. </param>
		/// <param name="name">Name of the parameter. </param>
		/// <param name="mask">Event group mask that this event is contained in, e.g. NX_DBG_EVENTGROUP_JOINTS. </param>
		public virtual void writeParameter(System.IntPtr parameter, System.IntPtr _object, bool create, string name, uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_writeParameter_9_INVOKE(ClassPointer, doSetFunctionPointers, parameter, _object, create, name, mask);
		}
		
		delegate void writeParameter_20_delegate(System.IntPtr parameter, System.IntPtr _object, bool create, string name, uint mask);
		
		
		
		
		
		
		private writeParameter_20_delegate writeParameter_20_delegatefield;
		
		/// <summary></summary>
		public virtual void setMask(uint mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_setMask_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		private void setMask_virtual(uint mask)
		{
			setMask(mask);
		}
		
		delegate void setMask_21_delegate(uint mask);
		
		
		
		
		
		
		private setMask_21_delegate setMask_21_delegatefield;
		
		/// <summary></summary>
		public virtual uint getMask()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRemoteDebugger_getMask_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getMask_virtual()
		{
			return getMask();
		}
		
		delegate uint getMask_22_delegate();
		
		
		
		
		
		
		private getMask_22_delegate getMask_22_delegatefield;
		
		/// <summary></summary>
		public virtual System.IntPtr getPickedObject()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRemoteDebugger_getPickedObject_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private System.IntPtr getPickedObject_virtual()
		{
			return getPickedObject();
		}
		
		delegate System.IntPtr getPickedObject_23_delegate();
		
		
		
		
		
		
		private getPickedObject_23_delegate getPickedObject_23_delegatefield;
		
		/// <summary></summary>
		public virtual NxVec3 getPickPoint()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRemoteDebugger_getPickPoint_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getPickPoint_virtual()
		{
			return getPickPoint();
		}
		
		delegate NxVec3 getPickPoint_24_delegate();
		
		
		
		
		
		
		private getPickPoint_24_delegate getPickPoint_24_delegatefield;
		
		/// <summary></summary>
		/// <param name="eventListener">The event listener to register. </param>
		public virtual void registerEventListener(NxRemoteDebuggerEventListener eventListener)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_registerEventListener_INVOKE(ClassPointer, doSetFunctionPointers, (eventListener!=null ? eventListener.ClassPointer : NullRef));
		}
		
		private void registerEventListener_virtual(IntPtr eventListener)
		{
			registerEventListener(NxRemoteDebuggerEventListener.GetClass(eventListener));
		}
		
		delegate void registerEventListener_25_delegate(IntPtr eventListener);
		
		
		
		
		
		
		private registerEventListener_25_delegate registerEventListener_25_delegatefield;
		
		/// <summary></summary>
		/// <param name="eventListener">The event listener to unregister. </param>
		public virtual void unregisterEventListener(NxRemoteDebuggerEventListener eventListener)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRemoteDebugger_unregisterEventListener_INVOKE(ClassPointer, doSetFunctionPointers, (eventListener!=null ? eventListener.ClassPointer : NullRef));
		}
		
		private void unregisterEventListener_virtual(IntPtr eventListener)
		{
			unregisterEventListener(NxRemoteDebuggerEventListener.GetClass(eventListener));
		}
		
		delegate void unregisterEventListener_26_delegate(IntPtr eventListener);
		
		
		
		
		
		
		private unregisterEventListener_26_delegate unregisterEventListener_26_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_connect")]
        private extern static void NxRemoteDebugger_connect_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String host, System.UInt32 port, System.UInt32 eventMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_connect_1")]
        private extern static void NxRemoteDebugger_connect_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String host, System.UInt32 port);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_connect_2")]
        private extern static void NxRemoteDebugger_connect_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String host);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_disconnect")]
        private extern static void NxRemoteDebugger_disconnect_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_flush")]
        private extern static void NxRemoteDebugger_flush_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_isConnected")]
        private extern static System.Boolean NxRemoteDebugger_isConnected_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_frameBreak")]
        private extern static void NxRemoteDebugger_frameBreak_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_createObject")]
        private extern static void NxRemoteDebugger_createObject_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr _object, NxRemoteDebuggerObjectType type, System.String className, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_removeObject")]
        private extern static void NxRemoteDebugger_removeObject_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr _object, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_addChild")]
        private extern static void NxRemoteDebugger_addChild_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr _object, System.IntPtr child, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_removeChild")]
        private extern static void NxRemoteDebugger_removeChild_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr _object, System.IntPtr child, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter")]
        private extern static void NxRemoteDebugger_writeParameter_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.Single parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_1")]
        private extern static void NxRemoteDebugger_writeParameter_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.UInt32 parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_2")]
        private extern static void NxRemoteDebugger_writeParameter_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_3")]
        private extern static void NxRemoteDebugger_writeParameter_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_4")]
        private extern static void NxRemoteDebugger_writeParameter_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_5")]
        private extern static void NxRemoteDebugger_writeParameter_5_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_6")]
        private extern static void NxRemoteDebugger_writeParameter_6_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Byte[] parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_7")]
        private extern static void NxRemoteDebugger_writeParameter_7_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_8")]
        private extern static void NxRemoteDebugger_writeParameter_8_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref System.Boolean parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_writeParameter_9")]
        private extern static void NxRemoteDebugger_writeParameter_9_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr parameter, System.IntPtr _object, System.Boolean create, System.String name, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_setMask")]
        private extern static void NxRemoteDebugger_setMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_getMask")]
        private extern static System.UInt32 NxRemoteDebugger_getMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_getPickedObject")]
        private extern static System.IntPtr NxRemoteDebugger_getPickedObject_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_getPickPoint")]
        private extern static NxVec3 NxRemoteDebugger_getPickPoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_registerEventListener")]
        private extern static void NxRemoteDebugger_registerEventListener_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef eventListener);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebugger_unregisterEventListener")]
        private extern static void NxRemoteDebugger_unregisterEventListener_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef eventListener);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxRemoteDebugger")]
        private extern static IntPtr new_NxRemoteDebugger_INVOKE (bool do_override);

		
		protected NxRemoteDebugger() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxRemoteDebugger)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxRemoteDebugger_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxRemoteDebugger_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxRemoteDebugger GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxRemoteDebugger)(obj.Target));
				}
			}
			return new NxRemoteDebugger(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			connect_0_delegatefield = new connect_0_delegate(this.connect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(connect_0_delegatefield));
			connect_1_delegatefield = new connect_1_delegate(this.connect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(connect_1_delegatefield));
			connect_2_delegatefield = new connect_2_delegate(this.connect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(connect_2_delegatefield));
			disconnect_3_delegatefield = new disconnect_3_delegate(this.disconnect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(disconnect_3_delegatefield));
			flush_4_delegatefield = new flush_4_delegate(this.flush_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(flush_4_delegatefield));
			isConnected_5_delegatefield = new isConnected_5_delegate(this.isConnected_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isConnected_5_delegatefield));
			frameBreak_6_delegatefield = new frameBreak_6_delegate(this.frameBreak_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(frameBreak_6_delegatefield));
			createObject_7_delegatefield = new createObject_7_delegate(this.createObject_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(createObject_7_delegatefield));
			removeObject_8_delegatefield = new removeObject_8_delegate(this.removeObject_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(removeObject_8_delegatefield));
			addChild_9_delegatefield = new addChild_9_delegate(this.addChild_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addChild_9_delegatefield));
			removeChild_10_delegatefield = new removeChild_10_delegate(this.removeChild_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(removeChild_10_delegatefield));
			writeParameter_11_delegatefield = new writeParameter_11_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_11_delegatefield));
			writeParameter_12_delegatefield = new writeParameter_12_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_12_delegatefield));
			writeParameter_13_delegatefield = new writeParameter_13_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_13_delegatefield));
			writeParameter_14_delegatefield = new writeParameter_14_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_14_delegatefield));
			writeParameter_15_delegatefield = new writeParameter_15_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_15_delegatefield));
			writeParameter_16_delegatefield = new writeParameter_16_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_16_delegatefield));
			writeParameter_17_delegatefield = new writeParameter_17_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_17_delegatefield));
			writeParameter_18_delegatefield = new writeParameter_18_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_18_delegatefield));
			writeParameter_19_delegatefield = new writeParameter_19_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_19_delegatefield));
			writeParameter_20_delegatefield = new writeParameter_20_delegate(this.writeParameter_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(writeParameter_20_delegatefield));
			setMask_21_delegatefield = new setMask_21_delegate(this.setMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMask_21_delegatefield));
			getMask_22_delegatefield = new getMask_22_delegate(this.getMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMask_22_delegatefield));
			getPickedObject_23_delegatefield = new getPickedObject_23_delegate(this.getPickedObject_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPickedObject_23_delegatefield));
			getPickPoint_24_delegatefield = new getPickPoint_24_delegate(this.getPickPoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPickPoint_24_delegatefield));
			registerEventListener_25_delegatefield = new registerEventListener_25_delegate(this.registerEventListener_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(registerEventListener_25_delegatefield));
			unregisterEventListener_26_delegatefield = new unregisterEventListener_26_delegate(this.unregisterEventListener_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(unregisterEventListener_26_delegatefield));
			return list;
		}
	}
}
