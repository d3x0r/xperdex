//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxMaterial : DoxyBindObject
	{
		
		internal NxMaterial(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxMaterial_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterial_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxMaterial() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxMaterial)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxMaterial_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxMaterial_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>The ID of the material can be retrieved using this function. </summary>
		public virtual ushort getMaterialIndex()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getMaterialIndex_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getMaterialIndex_virtual()
		{
			return getMaterialIndex();
		}
		
		delegate ushort getMaterialIndex_0_delegate();
		
		
		
		
		
		
		private getMaterialIndex_0_delegate getMaterialIndex_0_delegatefield;
		
		/// <summary>Loads the entire state of the material from a descriptor with a single call. </summary>
		/// <param name="desc">The descriptor used to set this objects state.</param>
		public virtual void loadFromDesc(NxMaterialDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_loadFromDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void loadFromDesc_virtual(IntPtr desc)
		{
			loadFromDesc(NxMaterialDesc.GetClass(desc));
		}
		
		delegate void loadFromDesc_1_delegate(IntPtr desc);
		
		
		
		
		
		
		private loadFromDesc_1_delegate loadFromDesc_1_delegatefield;
		
		/// <summary>Saves the state of the material into a descriptor. </summary>
		/// <param name="desc">The descriptor used to retrieve this objects state.</param>
		public virtual void saveToDesc(NxMaterialDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxMaterialDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_2_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_2_delegate saveToDesc_2_delegatefield;
		
		/// <summary>retrieves owner scene </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxMaterial_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_3_delegate();
		
		
		
		
		
		
		private getScene_3_delegate getScene_3_delegatefield;
		
		/// <summary>Sets the coefficient of dynamic friction. </summary>
		/// <param name="coef">Coefficient of dynamic friction. Range: [0, +inf]</param>
		public virtual void setDynamicFriction(float coef)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setDynamicFriction_INVOKE(ClassPointer, doSetFunctionPointers, coef);
		}
		
		private void setDynamicFriction_virtual(float coef)
		{
			setDynamicFriction(coef);
		}
		
		delegate void setDynamicFriction_4_delegate(float coef);
		
		
		
		
		
		
		private setDynamicFriction_4_delegate setDynamicFriction_4_delegatefield;
		
		/// <summary>Retrieves the DynamicFriction value. </summary>
		public virtual float getDynamicFriction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getDynamicFriction_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDynamicFriction_virtual()
		{
			return getDynamicFriction();
		}
		
		delegate float getDynamicFriction_5_delegate();
		
		
		
		
		
		
		private getDynamicFriction_5_delegate getDynamicFriction_5_delegatefield;
		
		/// <summary>Sets the coefficient of static friction. </summary>
		/// <param name="coef">Coefficient of static friction. Range: [0,inf]</param>
		public virtual void setStaticFriction(float coef)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setStaticFriction_INVOKE(ClassPointer, doSetFunctionPointers, coef);
		}
		
		private void setStaticFriction_virtual(float coef)
		{
			setStaticFriction(coef);
		}
		
		delegate void setStaticFriction_6_delegate(float coef);
		
		
		
		
		
		
		private setStaticFriction_6_delegate setStaticFriction_6_delegatefield;
		
		/// <summary>Retrieves the coefficient of static friction. </summary>
		public virtual float getStaticFriction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getStaticFriction_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getStaticFriction_virtual()
		{
			return getStaticFriction();
		}
		
		delegate float getStaticFriction_7_delegate();
		
		
		
		
		
		
		private getStaticFriction_7_delegate getStaticFriction_7_delegatefield;
		
		/// <summary>Sets the coefficient of restitution. </summary>
		/// <param name="rest">Coefficient of restitution. Range: [0,1]</param>
		public virtual void setRestitution(float rest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setRestitution_INVOKE(ClassPointer, doSetFunctionPointers, rest);
		}
		
		private void setRestitution_virtual(float rest)
		{
			setRestitution(rest);
		}
		
		delegate void setRestitution_8_delegate(float rest);
		
		
		
		
		
		
		private setRestitution_8_delegate setRestitution_8_delegatefield;
		
		/// <summary>Retrieves the coefficient of restitution. </summary>
		public virtual float getRestitution()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getRestitution_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRestitution_virtual()
		{
			return getRestitution();
		}
		
		delegate float getRestitution_9_delegate();
		
		
		
		
		
		
		private getRestitution_9_delegate getRestitution_9_delegatefield;
		
		/// <summary>Sets the dynamic friction coefficient along the secondary (V) axis. </summary>
		/// <param name="coef">Coefficient of dynamic friction in the V axis. Range: [0, +inf]</param>
		public virtual void setDynamicFrictionV(float coef)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setDynamicFrictionV_INVOKE(ClassPointer, doSetFunctionPointers, coef);
		}
		
		private void setDynamicFrictionV_virtual(float coef)
		{
			setDynamicFrictionV(coef);
		}
		
		delegate void setDynamicFrictionV_10_delegate(float coef);
		
		
		
		
		
		
		private setDynamicFrictionV_10_delegate setDynamicFrictionV_10_delegatefield;
		
		/// <summary>Retrieves the dynamic friction coefficient for the V direction. </summary>
		public virtual float getDynamicFrictionV()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getDynamicFrictionV_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDynamicFrictionV_virtual()
		{
			return getDynamicFrictionV();
		}
		
		delegate float getDynamicFrictionV_11_delegate();
		
		
		
		
		
		
		private getDynamicFrictionV_11_delegate getDynamicFrictionV_11_delegatefield;
		
		/// <summary>Sets the static friction coefficient along the secondary (V) axis. </summary>
		/// <param name="coef">Coefficient of static friction in the V axis. Range: [0,inf]</param>
		public virtual void setStaticFrictionV(float coef)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setStaticFrictionV_INVOKE(ClassPointer, doSetFunctionPointers, coef);
		}
		
		private void setStaticFrictionV_virtual(float coef)
		{
			setStaticFrictionV(coef);
		}
		
		delegate void setStaticFrictionV_12_delegate(float coef);
		
		
		
		
		
		
		private setStaticFrictionV_12_delegate setStaticFrictionV_12_delegatefield;
		
		/// <summary>Retrieves the static friction coefficient for the V direction. </summary>
		public virtual float getStaticFrictionV()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getStaticFrictionV_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getStaticFrictionV_virtual()
		{
			return getStaticFrictionV();
		}
		
		delegate float getStaticFrictionV_13_delegate();
		
		
		
		
		
		
		private getStaticFrictionV_13_delegate getStaticFrictionV_13_delegatefield;
		
		/// <summary>Sets the shape space direction (unit vector) of anisotropy. </summary>
		/// <param name="vec">Shape space direction of anisotropy. Range: direction vector</param>
		public virtual void setDirOfAnisotropy(ref NxVec3 vec)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setDirOfAnisotropy_INVOKE(ClassPointer, doSetFunctionPointers, ref vec);
		}
		
		private void setDirOfAnisotropy_virtual([In()] ref NxVec3 vec)
		{
			setDirOfAnisotropy(ref vec);
		}
		
		delegate void setDirOfAnisotropy_14_delegate([In()] ref NxVec3 vec);
		
		
		
		
		
		
		private setDirOfAnisotropy_14_delegate setDirOfAnisotropy_14_delegatefield;
		
		/// <summary>Retrieves the direction of anisotropy value. </summary>
		public virtual NxVec3 getDirOfAnisotropy()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getDirOfAnisotropy_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getDirOfAnisotropy_virtual()
		{
			return getDirOfAnisotropy();
		}
		
		delegate NxVec3 getDirOfAnisotropy_15_delegate();
		
		
		
		
		
		
		private getDirOfAnisotropy_15_delegate getDirOfAnisotropy_15_delegatefield;
		
		/// <summary>Sets the flags, a combination of the bits defined by the enum NxMaterialFlag . </summary>
		/// <param name="flags">NxMaterialFlag combination.</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_16_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_16_delegate setFlags_16_delegatefield;
		
		/// <summary>Retrieves the flags. See NxMaterialFlag. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_17_delegate();
		
		
		
		
		
		
		private getFlags_17_delegate getFlags_17_delegatefield;
		
		/// <summary>Sets the friction combine mode. </summary>
		/// <param name="combMode">Friction combine mode to set for this material. See NxCombineMode.</param>
		public virtual void setFrictionCombineMode(NxCombineMode combMode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setFrictionCombineMode_INVOKE(ClassPointer, doSetFunctionPointers, combMode);
		}
		
		private void setFrictionCombineMode_virtual(NxCombineMode combMode)
		{
			setFrictionCombineMode(combMode);
		}
		
		delegate void setFrictionCombineMode_18_delegate(NxCombineMode combMode);
		
		
		
		
		
		
		private setFrictionCombineMode_18_delegate setFrictionCombineMode_18_delegatefield;
		
		/// <summary>Retrieves the friction combine mode. </summary>
		public virtual NxCombineMode getFrictionCombineMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getFrictionCombineMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxCombineMode getFrictionCombineMode_virtual()
		{
			return getFrictionCombineMode();
		}
		
		delegate NxCombineMode getFrictionCombineMode_19_delegate();
		
		
		
		
		
		
		private getFrictionCombineMode_19_delegate getFrictionCombineMode_19_delegatefield;
		
		/// <summary>Sets the restitution combine mode. </summary>
		/// <param name="combMode">Restitution combine mode for this material. See NxCombineMode.</param>
		public virtual void setRestitutionCombineMode(NxCombineMode combMode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxMaterial_setRestitutionCombineMode_INVOKE(ClassPointer, doSetFunctionPointers, combMode);
		}
		
		private void setRestitutionCombineMode_virtual(NxCombineMode combMode)
		{
			setRestitutionCombineMode(combMode);
		}
		
		delegate void setRestitutionCombineMode_20_delegate(NxCombineMode combMode);
		
		
		
		
		
		
		private setRestitutionCombineMode_20_delegate setRestitutionCombineMode_20_delegatefield;
		
		/// <summary>Retrieves the restitution combine mode. </summary>
		public virtual NxCombineMode getRestitutionCombineMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMaterial_getRestitutionCombineMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxCombineMode getRestitutionCombineMode_virtual()
		{
			return getRestitutionCombineMode();
		}
		
		delegate NxCombineMode getRestitutionCombineMode_21_delegate();
		
		
		
		
		
		
		private getRestitutionCombineMode_21_delegate getRestitutionCombineMode_21_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterial_userData")]
        private extern static void set_NxMaterial_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterial_userData")]
        private extern static System.IntPtr get_NxMaterial_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMaterial")]
        private extern static IntPtr new_NxMaterial_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getMaterialIndex")]
        private extern static System.UInt16 NxMaterial_getMaterialIndex_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_loadFromDesc")]
        private extern static void NxMaterial_loadFromDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_saveToDesc")]
        private extern static void NxMaterial_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getScene")]
        private extern static IntPtr NxMaterial_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setDynamicFriction")]
        private extern static void NxMaterial_setDynamicFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coef);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getDynamicFriction")]
        private extern static System.Single NxMaterial_getDynamicFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setStaticFriction")]
        private extern static void NxMaterial_setStaticFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coef);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getStaticFriction")]
        private extern static System.Single NxMaterial_getStaticFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setRestitution")]
        private extern static void NxMaterial_setRestitution_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single rest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getRestitution")]
        private extern static System.Single NxMaterial_getRestitution_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setDynamicFrictionV")]
        private extern static void NxMaterial_setDynamicFrictionV_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coef);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getDynamicFrictionV")]
        private extern static System.Single NxMaterial_getDynamicFrictionV_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setStaticFrictionV")]
        private extern static void NxMaterial_setStaticFrictionV_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coef);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getStaticFrictionV")]
        private extern static System.Single NxMaterial_getStaticFrictionV_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setDirOfAnisotropy")]
        private extern static void NxMaterial_setDirOfAnisotropy_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 vec);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getDirOfAnisotropy")]
        private extern static NxVec3 NxMaterial_getDirOfAnisotropy_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setFlags")]
        private extern static void NxMaterial_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getFlags")]
        private extern static System.UInt32 NxMaterial_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setFrictionCombineMode")]
        private extern static void NxMaterial_setFrictionCombineMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxCombineMode combMode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getFrictionCombineMode")]
        private extern static NxCombineMode NxMaterial_getFrictionCombineMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_setRestitutionCombineMode")]
        private extern static void NxMaterial_setRestitutionCombineMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxCombineMode combMode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterial_getRestitutionCombineMode")]
        private extern static NxCombineMode NxMaterial_getRestitutionCombineMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxMaterial GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxMaterial)(obj.Target));
				}
			}
			return new NxMaterial(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getMaterialIndex_0_delegatefield = new getMaterialIndex_0_delegate(this.getMaterialIndex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMaterialIndex_0_delegatefield));
			loadFromDesc_1_delegatefield = new loadFromDesc_1_delegate(this.loadFromDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadFromDesc_1_delegatefield));
			saveToDesc_2_delegatefield = new saveToDesc_2_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_2_delegatefield));
			getScene_3_delegatefield = new getScene_3_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_3_delegatefield));
			setDynamicFriction_4_delegatefield = new setDynamicFriction_4_delegate(this.setDynamicFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDynamicFriction_4_delegatefield));
			getDynamicFriction_5_delegatefield = new getDynamicFriction_5_delegate(this.getDynamicFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDynamicFriction_5_delegatefield));
			setStaticFriction_6_delegatefield = new setStaticFriction_6_delegate(this.setStaticFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStaticFriction_6_delegatefield));
			getStaticFriction_7_delegatefield = new getStaticFriction_7_delegate(this.getStaticFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStaticFriction_7_delegatefield));
			setRestitution_8_delegatefield = new setRestitution_8_delegate(this.setRestitution_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRestitution_8_delegatefield));
			getRestitution_9_delegatefield = new getRestitution_9_delegate(this.getRestitution_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRestitution_9_delegatefield));
			setDynamicFrictionV_10_delegatefield = new setDynamicFrictionV_10_delegate(this.setDynamicFrictionV_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDynamicFrictionV_10_delegatefield));
			getDynamicFrictionV_11_delegatefield = new getDynamicFrictionV_11_delegate(this.getDynamicFrictionV_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDynamicFrictionV_11_delegatefield));
			setStaticFrictionV_12_delegatefield = new setStaticFrictionV_12_delegate(this.setStaticFrictionV_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStaticFrictionV_12_delegatefield));
			getStaticFrictionV_13_delegatefield = new getStaticFrictionV_13_delegate(this.getStaticFrictionV_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStaticFrictionV_13_delegatefield));
			setDirOfAnisotropy_14_delegatefield = new setDirOfAnisotropy_14_delegate(this.setDirOfAnisotropy_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDirOfAnisotropy_14_delegatefield));
			getDirOfAnisotropy_15_delegatefield = new getDirOfAnisotropy_15_delegate(this.getDirOfAnisotropy_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDirOfAnisotropy_15_delegatefield));
			setFlags_16_delegatefield = new setFlags_16_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_16_delegatefield));
			getFlags_17_delegatefield = new getFlags_17_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_17_delegatefield));
			setFrictionCombineMode_18_delegatefield = new setFrictionCombineMode_18_delegate(this.setFrictionCombineMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFrictionCombineMode_18_delegatefield));
			getFrictionCombineMode_19_delegatefield = new getFrictionCombineMode_19_delegate(this.getFrictionCombineMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFrictionCombineMode_19_delegatefield));
			setRestitutionCombineMode_20_delegatefield = new setRestitutionCombineMode_20_delegate(this.setRestitutionCombineMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRestitutionCombineMode_20_delegatefield));
			getRestitutionCombineMode_21_delegatefield = new getRestitutionCombineMode_21_delegate(this.getRestitutionCombineMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRestitutionCombineMode_21_delegatefield));
			return list;
		}
	}
}
