//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSpringAndDamperEffector : NxEffector
	{
		
		internal NxSpringAndDamperEffector(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Writes all of the effector's spring attributes to the description, as well as setting the 2 actor connection points. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the effector.</param>
		public virtual void saveToDesc(NxSpringAndDamperEffectorDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxSpringAndDamperEffectorDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Sets the two bodies which are connected by the element. </summary>
		/// <param name="body1">First Body. </param>
		/// <param name="global1">Attachment point for spring in the global frame. Range: position vector </param>
		/// <param name="body2">Second Body </param>
		/// <param name="global2">Attachment point for spring in the global frame. Range: position vector</param>
		public virtual void setBodies(NxActor body1, ref NxVec3 global1, NxActor body2, ref NxVec3 global2)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_setBodies_INVOKE(ClassPointer, doSetFunctionPointers, (body1!=null ? body1.ClassPointer : NullRef), ref global1, (body2!=null ? body2.ClassPointer : NullRef), ref global2);
		}
		
		private void setBodies_virtual(IntPtr body1, [In()] ref NxVec3 global1, IntPtr body2, [In()] ref NxVec3 global2)
		{
			setBodies(NxActor.GetClass(body1), ref global1, NxActor.GetClass(body2), ref global2);
		}
		
		delegate void setBodies_1_delegate(IntPtr body1, [In()] ref NxVec3 global1, IntPtr body2, [In()] ref NxVec3 global2);
		
		
		
		
		
		
		private setBodies_1_delegate setBodies_1_delegatefield;
		
		/// <summary>Sets the properties of the linear spring. </summary>
		/// <param name="distCompressSaturate">is the distance at which the repulsive spring force magnitude no longer increases, but stays constant. Range: [0,springDistRelaxed]</param>
		/// <param name="distRelaxed">is the distance at which the spring is relaxed, and there is no spring force applied. Range: [springDistCompressSaturate,springDistStretchSaturate]</param>
		/// <param name="distStretchSaturate">is the distance at which the attractive spring force magnitude no longer increases, but stays constant. Range: [springDistCompressSaturate,inf)</param>
		/// <param name="maxCompressForce">is the force applied when distCompressSaturate is reached. The force ramps up linearly until this value, starting at zero at distRelaxed. Range: [0,inf)</param>
		/// <param name="maxStretchForce">is the force applied when distStretchSaturate is reached. The force ramps up linearly until this value, starting at zero at distRelaxed. Range: [0,inf)</param>
		public virtual void setLinearSpring(float distCompressSaturate, float distRelaxed, float distStretchSaturate, float maxCompressForce, float maxStretchForce)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_setLinearSpring_INVOKE(ClassPointer, doSetFunctionPointers, distCompressSaturate, distRelaxed, distStretchSaturate, maxCompressForce, maxStretchForce);
		}
		
		private void setLinearSpring_virtual(float distCompressSaturate, float distRelaxed, float distStretchSaturate, float maxCompressForce, float maxStretchForce)
		{
			setLinearSpring(distCompressSaturate, distRelaxed, distStretchSaturate, maxCompressForce, maxStretchForce);
		}
		
		delegate void setLinearSpring_2_delegate(float distCompressSaturate, float distRelaxed, float distStretchSaturate, float maxCompressForce, float maxStretchForce);
		
		
		
		
		
		
		private setLinearSpring_2_delegate setLinearSpring_2_delegatefield;
		
		/// <summary>Retrieves the spring properties. See setLinearSpring. </summary>
		/// <param name="distCompressSaturate">is the distance at which the repulsive spring force magnitude no longer increases, but stays constant. </param>
		/// <param name="distRelaxed">is the distance at which the spring is relaxed, and there is no spring force applied. </param>
		/// <param name="distStretchSaturate">is the distance at which the attractive spring force magnitude no longer increases, but stays constant.</param>
		/// <param name="maxCompressForce">is the force applied when distCompressSaturate is reached. The force ramps up linearly until this value, starting at zero at distRelaxed. </param>
		/// <param name="maxStretchForce">is the force applied when distStretchSaturate is reached. The force ramps up linearly until this value, starting at zero at distRelaxed.</param>
		public virtual void getLinearSpring(ref float distCompressSaturate, ref float distRelaxed, ref float distStretchSaturate, ref float maxCompressForce, ref float maxStretchForce)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_getLinearSpring_INVOKE(ClassPointer, doSetFunctionPointers, ref distCompressSaturate, ref distRelaxed, ref distStretchSaturate, ref maxCompressForce, ref maxStretchForce);
		}
		
		private void getLinearSpring_virtual([In()] [Out()] ref float distCompressSaturate, [In()] [Out()] ref float distRelaxed, [In()] [Out()] ref float distStretchSaturate, [In()] [Out()] ref float maxCompressForce, [In()] [Out()] ref float maxStretchForce)
		{
			getLinearSpring(ref distCompressSaturate, ref distRelaxed, ref distStretchSaturate, ref maxCompressForce, ref maxStretchForce);
		}
		
		delegate void getLinearSpring_3_delegate([In()] [Out()] ref float distCompressSaturate, [In()] [Out()] ref float distRelaxed, [In()] [Out()] ref float distStretchSaturate, [In()] [Out()] ref float maxCompressForce, [In()] [Out()] ref float maxStretchForce);
		
		
		
		
		
		
		private getLinearSpring_3_delegate getLinearSpring_3_delegatefield;
		
		/// <summary>Sets the properties of the linear damper. </summary>
		/// <param name="velCompressSaturate">is the negative (compression direction) velocity where the damping force magnitude no longer increases, but stays constant. Range: (-inf,0]</param>
		/// <param name="velStretchSaturate">is the positive (stretch direction) velocity where the the damping force magnitude no longer increases, but stays constant. Range: [0,inf)</param>
		/// <param name="maxCompressForce">is the force applied when velCompressSaturate is reached. The force ramps up linearly until this value, starting at zero at vrel == 0. Range: [0,inf)</param>
		/// <param name="maxStretchForce">is the force applied when velStretchSaturate is reached. The force ramps up linearly until this value, starting at zero at vrel == 0. Range: [0,inf)</param>
		public virtual void setLinearDamper(float velCompressSaturate, float velStretchSaturate, float maxCompressForce, float maxStretchForce)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_setLinearDamper_INVOKE(ClassPointer, doSetFunctionPointers, velCompressSaturate, velStretchSaturate, maxCompressForce, maxStretchForce);
		}
		
		private void setLinearDamper_virtual(float velCompressSaturate, float velStretchSaturate, float maxCompressForce, float maxStretchForce)
		{
			setLinearDamper(velCompressSaturate, velStretchSaturate, maxCompressForce, maxStretchForce);
		}
		
		delegate void setLinearDamper_4_delegate(float velCompressSaturate, float velStretchSaturate, float maxCompressForce, float maxStretchForce);
		
		
		
		
		
		
		private setLinearDamper_4_delegate setLinearDamper_4_delegatefield;
		
		/// <summary>Retrieves the damper properties. </summary>
		/// <param name="velCompressSaturate">is the negative (compression direction) velocity where the damping force magnitude no longer increases, but stays constant. </param>
		/// <param name="velStretchSaturate">is the positive (stretch direction) velocity where the the damping force magnitude no longer increases, but stays constant.</param>
		/// <param name="maxCompressForce">is the force applied when velCompressSaturate is reached. The force ramps up linearly until this value, starting at zero at vrel == 0. </param>
		/// <param name="maxStretchForce">is the force applied when velStretchSaturate is reached. The force ramps up linearly until this value, starting at zero at vrel == 0.</param>
		public virtual void getLinearDamper(ref float velCompressSaturate, ref float velStretchSaturate, ref float maxCompressForce, ref float maxStretchForce)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSpringAndDamperEffector_getLinearDamper_INVOKE(ClassPointer, doSetFunctionPointers, ref velCompressSaturate, ref velStretchSaturate, ref maxCompressForce, ref maxStretchForce);
		}
		
		private void getLinearDamper_virtual([In()] [Out()] ref float velCompressSaturate, [In()] [Out()] ref float velStretchSaturate, [In()] [Out()] ref float maxCompressForce, [In()] [Out()] ref float maxStretchForce)
		{
			getLinearDamper(ref velCompressSaturate, ref velStretchSaturate, ref maxCompressForce, ref maxStretchForce);
		}
		
		delegate void getLinearDamper_5_delegate([In()] [Out()] ref float velCompressSaturate, [In()] [Out()] ref float velStretchSaturate, [In()] [Out()] ref float maxCompressForce, [In()] [Out()] ref float maxStretchForce);
		
		
		
		
		
		
		private getLinearDamper_5_delegate getLinearDamper_5_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_saveToDesc")]
        private extern static void NxSpringAndDamperEffector_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_setBodies")]
        private extern static void NxSpringAndDamperEffector_setBodies_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef body1, [In()] ref NxVec3 global1, HandleRef body2, [In()] ref NxVec3 global2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_setLinearSpring")]
        private extern static void NxSpringAndDamperEffector_setLinearSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single distCompressSaturate, System.Single distRelaxed, System.Single distStretchSaturate, System.Single maxCompressForce, System.Single maxStretchForce);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_getLinearSpring")]
        private extern static void NxSpringAndDamperEffector_getLinearSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single distCompressSaturate, [In()] [Out()] ref System.Single distRelaxed, [In()] [Out()] ref System.Single distStretchSaturate, [In()] [Out()] ref System.Single maxCompressForce, [In()] [Out()] ref System.Single maxStretchForce);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_setLinearDamper")]
        private extern static void NxSpringAndDamperEffector_setLinearDamper_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single velCompressSaturate, System.Single velStretchSaturate, System.Single maxCompressForce, System.Single maxStretchForce);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSpringAndDamperEffector_getLinearDamper")]
        private extern static void NxSpringAndDamperEffector_getLinearDamper_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single velCompressSaturate, [In()] [Out()] ref System.Single velStretchSaturate, [In()] [Out()] ref System.Single maxCompressForce, [In()] [Out()] ref System.Single maxStretchForce);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSpringAndDamperEffector")]
        private extern static IntPtr new_NxSpringAndDamperEffector_INVOKE (bool do_override);

		
		protected NxSpringAndDamperEffector() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxSpringAndDamperEffector)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSpringAndDamperEffector_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSpringAndDamperEffector_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSpringAndDamperEffector GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSpringAndDamperEffector)(obj.Target));
				}
			}
			return new NxSpringAndDamperEffector(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			setBodies_1_delegatefield = new setBodies_1_delegate(this.setBodies_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setBodies_1_delegatefield));
			setLinearSpring_2_delegatefield = new setLinearSpring_2_delegate(this.setLinearSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLinearSpring_2_delegatefield));
			getLinearSpring_3_delegatefield = new getLinearSpring_3_delegate(this.getLinearSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLinearSpring_3_delegatefield));
			setLinearDamper_4_delegatefield = new setLinearDamper_4_delegate(this.setLinearDamper_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLinearDamper_4_delegatefield));
			getLinearDamper_5_delegatefield = new getLinearDamper_5_delegate(this.getLinearDamper_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLinearDamper_5_delegatefield));
			return list;
		}
	}
}
