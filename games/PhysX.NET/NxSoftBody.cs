//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSoftBody : DoxyBindObject
	{
		
		internal NxSoftBody(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxSoftBody_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBody_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxSoftBody() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxSoftBody)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSoftBody_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSoftBody_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Saves the soft body descriptor. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object. </param>
		public virtual bool saveToDesc(NxSoftBodyDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxSoftBodyDesc.GetClass(desc));
		}
		
		delegate bool saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Returns a pointer to the corresponding soft body mesh. </summary>
		public virtual NxSoftBodyMesh getSoftBodyMesh()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBodyMesh.GetClass(NxSoftBody_getSoftBodyMesh_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getSoftBodyMesh_virtual()
		{
			return getSoftBodyMesh().ClassPointer.Handle;
		}
		
		delegate IntPtr getSoftBodyMesh_1_delegate();
		
		
		
		
		
		
		private getSoftBodyMesh_1_delegate getSoftBodyMesh_1_delegatefield;
		
		/// <summary>Sets the soft body volume stiffness in the range from 0 to 1. </summary>
		/// <param name="stiffness">The volume stiffness of this soft body.</param>
		public virtual void setVolumeStiffness(float stiffness)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setVolumeStiffness_INVOKE(ClassPointer, doSetFunctionPointers, stiffness);
		}
		
		private void setVolumeStiffness_virtual(float stiffness)
		{
			setVolumeStiffness(stiffness);
		}
		
		delegate void setVolumeStiffness_2_delegate(float stiffness);
		
		
		
		
		
		
		private setVolumeStiffness_2_delegate setVolumeStiffness_2_delegatefield;
		
		/// <summary>Retrieves the soft body volume stiffness. </summary>
		public virtual float getVolumeStiffness()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getVolumeStiffness_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getVolumeStiffness_virtual()
		{
			return getVolumeStiffness();
		}
		
		delegate float getVolumeStiffness_3_delegate();
		
		
		
		
		
		
		private getVolumeStiffness_3_delegate getVolumeStiffness_3_delegatefield;
		
		/// <summary>Sets the soft body stretching stiffness in the range from 0 to 1. </summary>
		/// <param name="stiffness">Stiffness of the soft body.</param>
		public virtual void setStretchingStiffness(float stiffness)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setStretchingStiffness_INVOKE(ClassPointer, doSetFunctionPointers, stiffness);
		}
		
		private void setStretchingStiffness_virtual(float stiffness)
		{
			setStretchingStiffness(stiffness);
		}
		
		delegate void setStretchingStiffness_4_delegate(float stiffness);
		
		
		
		
		
		
		private setStretchingStiffness_4_delegate setStretchingStiffness_4_delegatefield;
		
		/// <summary>Retrieves the soft body stretching stiffness. </summary>
		public virtual float getStretchingStiffness()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getStretchingStiffness_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getStretchingStiffness_virtual()
		{
			return getStretchingStiffness();
		}
		
		delegate float getStretchingStiffness_5_delegate();
		
		
		
		
		
		
		private getStretchingStiffness_5_delegate getStretchingStiffness_5_delegatefield;
		
		/// <summary>Sets the damping coefficient in the range from 0 to 1. </summary>
		/// <param name="dampingCoefficient">damping coefficient of the soft body.</param>
		public virtual void setDampingCoefficient(float dampingCoefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setDampingCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, dampingCoefficient);
		}
		
		private void setDampingCoefficient_virtual(float dampingCoefficient)
		{
			setDampingCoefficient(dampingCoefficient);
		}
		
		delegate void setDampingCoefficient_6_delegate(float dampingCoefficient);
		
		
		
		
		
		
		private setDampingCoefficient_6_delegate setDampingCoefficient_6_delegatefield;
		
		/// <summary>Retrieves the damping coefficient. </summary>
		public virtual float getDampingCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getDampingCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDampingCoefficient_virtual()
		{
			return getDampingCoefficient();
		}
		
		delegate float getDampingCoefficient_7_delegate();
		
		
		
		
		
		
		private getDampingCoefficient_7_delegate getDampingCoefficient_7_delegatefield;
		
		/// <summary>Sets the soft body friction coefficient in the range from 0 to 1. </summary>
		/// <param name="friction">The friction of the soft body.</param>
		public virtual void setFriction(float friction)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setFriction_INVOKE(ClassPointer, doSetFunctionPointers, friction);
		}
		
		private void setFriction_virtual(float friction)
		{
			setFriction(friction);
		}
		
		delegate void setFriction_8_delegate(float friction);
		
		
		
		
		
		
		private setFriction_8_delegate setFriction_8_delegatefield;
		
		/// <summary>Retrieves the soft body friction coefficient. </summary>
		public virtual float getFriction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getFriction_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getFriction_virtual()
		{
			return getFriction();
		}
		
		delegate float getFriction_9_delegate();
		
		
		
		
		
		
		private getFriction_9_delegate getFriction_9_delegatefield;
		
		/// <summary>Sets the soft body tear factor (must be larger than one). </summary>
		/// <param name="factor">The tear factor for the soft body</param>
		public virtual void setTearFactor(float factor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setTearFactor_INVOKE(ClassPointer, doSetFunctionPointers, factor);
		}
		
		private void setTearFactor_virtual(float factor)
		{
			setTearFactor(factor);
		}
		
		delegate void setTearFactor_10_delegate(float factor);
		
		
		
		
		
		
		private setTearFactor_10_delegate setTearFactor_10_delegatefield;
		
		/// <summary>Retrieves the soft body tear factor. </summary>
		public virtual float getTearFactor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getTearFactor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getTearFactor_virtual()
		{
			return getTearFactor();
		}
		
		delegate float getTearFactor_11_delegate();
		
		
		
		
		
		
		private getTearFactor_11_delegate getTearFactor_11_delegatefield;
		
		/// <summary>Sets the soft body attachment tear factor (must be larger than one). </summary>
		/// <param name="factor">The attachment tear factor for the soft body</param>
		public virtual void setAttachmentTearFactor(float factor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setAttachmentTearFactor_INVOKE(ClassPointer, doSetFunctionPointers, factor);
		}
		
		private void setAttachmentTearFactor_virtual(float factor)
		{
			setAttachmentTearFactor(factor);
		}
		
		delegate void setAttachmentTearFactor_12_delegate(float factor);
		
		
		
		
		
		
		private setAttachmentTearFactor_12_delegate setAttachmentTearFactor_12_delegatefield;
		
		/// <summary>Retrieves the attachment soft body tear factor. </summary>
		public virtual float getAttachmentTearFactor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getAttachmentTearFactor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAttachmentTearFactor_virtual()
		{
			return getAttachmentTearFactor();
		}
		
		delegate float getAttachmentTearFactor_13_delegate();
		
		
		
		
		
		
		private getAttachmentTearFactor_13_delegate getAttachmentTearFactor_13_delegatefield;
		
		/// <summary>Sets the soft body particle radius (must be positive). </summary>
		/// <param name="particleRadius">The particle radius of the soft body.</param>
		public virtual void setParticleRadius(float particleRadius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setParticleRadius_INVOKE(ClassPointer, doSetFunctionPointers, particleRadius);
		}
		
		private void setParticleRadius_virtual(float particleRadius)
		{
			setParticleRadius(particleRadius);
		}
		
		delegate void setParticleRadius_14_delegate(float particleRadius);
		
		
		
		
		
		
		private setParticleRadius_14_delegate setParticleRadius_14_delegatefield;
		
		/// <summary>Gets the soft body particle radius. </summary>
		public virtual float getParticleRadius()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getParticleRadius_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getParticleRadius_virtual()
		{
			return getParticleRadius();
		}
		
		delegate float getParticleRadius_15_delegate();
		
		
		
		
		
		
		private getParticleRadius_15_delegate getParticleRadius_15_delegatefield;
		
		/// <summary>Gets the soft body density. </summary>
		public virtual float getDensity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getDensity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDensity_virtual()
		{
			return getDensity();
		}
		
		delegate float getDensity_16_delegate();
		
		
		
		
		
		
		private getDensity_16_delegate getDensity_16_delegatefield;
		
		/// <summary>Gets the relative grid spacing for the broad phase. The soft body is represented by a set of world aligned cubical cells in broad phase. The size of these cells is determined by multiplying the length of the diagonal of the AABB of the initial soft body size with this constant. </summary>
		public virtual float getRelativeGridSpacing()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getRelativeGridSpacing_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRelativeGridSpacing_virtual()
		{
			return getRelativeGridSpacing();
		}
		
		delegate float getRelativeGridSpacing_17_delegate();
		
		
		
		
		
		
		private getRelativeGridSpacing_17_delegate getRelativeGridSpacing_17_delegatefield;
		
		/// <summary>Retrieves the soft body solver iterations. </summary>
		public virtual uint getSolverIterations()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getSolverIterations_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getSolverIterations_virtual()
		{
			return getSolverIterations();
		}
		
		delegate uint getSolverIterations_18_delegate();
		
		
		
		
		
		
		private getSolverIterations_18_delegate getSolverIterations_18_delegatefield;
		
		/// <summary>Sets the soft body solver iterations. </summary>
		/// <param name="iterations">The new solver iteration count for the soft body.</param>
		public virtual void setSolverIterations(uint iterations)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setSolverIterations_INVOKE(ClassPointer, doSetFunctionPointers, iterations);
		}
		
		private void setSolverIterations_virtual(uint iterations)
		{
			setSolverIterations(iterations);
		}
		
		delegate void setSolverIterations_19_delegate(uint iterations);
		
		
		
		
		
		
		private setSolverIterations_19_delegate setSolverIterations_19_delegatefield;
		
		/// <summary>Returns a world space AABB enclosing all soft body particles. </summary>
		/// <param name="bounds">Retrieves the world space bounds.</param>
		public virtual void getWorldBounds(NxBounds3 bounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getWorldBounds_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef));
		}
		
		private void getWorldBounds_virtual(IntPtr bounds)
		{
			getWorldBounds(NxBounds3.GetClass(bounds));
		}
		
		delegate void getWorldBounds_20_delegate(IntPtr bounds);
		
		
		
		
		
		
		private getWorldBounds_20_delegate getWorldBounds_20_delegatefield;
		
		/// <summary>Attaches the soft body to a shape. All soft body vertices currently inside the shape are attached. </summary>
		/// <param name="shape">Shape to which the soft body should be attached to. </param>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachToShape(NxShape shape, uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_attachToShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef), attachmentFlags);
		}
		
		private void attachToShape_virtual(IntPtr shape, uint attachmentFlags)
		{
			attachToShape(NxShape.GetClass(shape), attachmentFlags);
		}
		
		delegate void attachToShape_21_delegate(IntPtr shape, uint attachmentFlags);
		
		
		
		
		
		
		private attachToShape_21_delegate attachToShape_21_delegatefield;
		
		/// <summary>Attaches the soft body to all shapes, currently colliding. </summary>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachToCollidingShapes(uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_attachToCollidingShapes_INVOKE(ClassPointer, doSetFunctionPointers, attachmentFlags);
		}
		
		private void attachToCollidingShapes_virtual(uint attachmentFlags)
		{
			attachToCollidingShapes(attachmentFlags);
		}
		
		delegate void attachToCollidingShapes_22_delegate(uint attachmentFlags);
		
		
		
		
		
		
		private attachToCollidingShapes_22_delegate attachToCollidingShapes_22_delegatefield;
		
		/// <summary>Detaches the soft body from a shape it has been attached to before. </summary>
		/// <param name="shape">Shape from which the soft body should be detached.</param>
		public virtual void detachFromShape(NxShape shape)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_detachFromShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef));
		}
		
		private void detachFromShape_virtual(IntPtr shape)
		{
			detachFromShape(NxShape.GetClass(shape));
		}
		
		delegate void detachFromShape_23_delegate(IntPtr shape);
		
		
		
		
		
		
		private detachFromShape_23_delegate detachFromShape_23_delegatefield;
		
		/// <summary>Attaches a soft body vertex to a local position within a shape. </summary>
		/// <param name="vertexId">Index of the vertex to attach. </param>
		/// <param name="shape">Shape to attach the vertex to. </param>
		/// <param name="localPos">The position relative to the pose of the shape. </param>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachVertexToShape(uint vertexId, NxShape shape, ref NxVec3 localPos, uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_attachVertexToShape_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, (shape!=null ? shape.ClassPointer : NullRef), ref localPos, attachmentFlags);
		}
		
		private void attachVertexToShape_virtual(uint vertexId, IntPtr shape, [In()] ref NxVec3 localPos, uint attachmentFlags)
		{
			attachVertexToShape(vertexId, NxShape.GetClass(shape), ref localPos, attachmentFlags);
		}
		
		delegate void attachVertexToShape_24_delegate(uint vertexId, IntPtr shape, [In()] ref NxVec3 localPos, uint attachmentFlags);
		
		
		
		
		
		
		private attachVertexToShape_24_delegate attachVertexToShape_24_delegatefield;
		
		/// <summary>Attaches a soft body vertex to a position in world space. </summary>
		/// <param name="vertexId">Index of the vertex to attach. </param>
		/// <param name="pos">The position in world space.</param>
		public virtual void attachVertexToGlobalPosition(uint vertexId, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_attachVertexToGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, ref pos);
		}
		
		private void attachVertexToGlobalPosition_virtual(uint vertexId, [In()] ref NxVec3 pos)
		{
			attachVertexToGlobalPosition(vertexId, ref pos);
		}
		
		delegate void attachVertexToGlobalPosition_25_delegate(uint vertexId, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private attachVertexToGlobalPosition_25_delegate attachVertexToGlobalPosition_25_delegatefield;
		
		/// <summary>Frees a previously attached soft body vertex. </summary>
		/// <param name="vertexId">Index of the vertex to free.</param>
		public virtual void freeVertex(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_freeVertex_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private void freeVertex_virtual(uint vertexId)
		{
			freeVertex(vertexId);
		}
		
		delegate void freeVertex_26_delegate(uint vertexId);
		
		
		
		
		
		
		private freeVertex_26_delegate freeVertex_26_delegatefield;
		
		/// <summary>[Experimental] Tears the soft body at a given vertex. </summary>
		/// <param name="vertexId">Index of the vertex to tear. </param>
		/// <param name="normal">The normal of the split plane. </param>
		public virtual bool tearVertex(uint vertexId, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_tearVertex_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, ref normal);
		}
		
		private bool tearVertex_virtual(uint vertexId, [In()] ref NxVec3 normal)
		{
			return tearVertex(vertexId, ref normal);
		}
		
		delegate bool tearVertex_27_delegate(uint vertexId, [In()] ref NxVec3 normal);
		
		
		
		
		
		
		private tearVertex_27_delegate tearVertex_27_delegatefield;
		
		/// <summary>Executes a raycast against the soft body. </summary>
		/// <param name="worldRay">The ray in world space. </param>
		/// <param name="hit">The hit position. </param>
		/// <param name="vertexId">Index to the nearest vertex hit by the raycast.</param>
		public virtual bool raycast(NxRay worldRay, ref NxVec3 hit, ref uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_raycast_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), ref hit, ref vertexId);
		}
		
		private bool raycast_virtual(IntPtr worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref uint vertexId)
		{
			return raycast(NxRay.GetClass(worldRay), ref hit, ref vertexId);
		}
		
		delegate bool raycast_28_delegate(IntPtr worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref uint vertexId);
		
		
		
		
		
		
		private raycast_28_delegate raycast_28_delegatefield;
		
		/// <summary>Sets which collision group this soft body is part of. </summary>
		/// <param name="collisionGroup">The collision group for this soft body.</param>
		public virtual void setGroup(ushort collisionGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setGroup_INVOKE(ClassPointer, doSetFunctionPointers, collisionGroup);
		}
		
		private void setGroup_virtual(ushort collisionGroup)
		{
			setGroup(collisionGroup);
		}
		
		delegate void setGroup_29_delegate(ushort collisionGroup);
		
		
		
		
		
		
		private setGroup_29_delegate setGroup_29_delegatefield;
		
		/// <summary>Retrieves the value set with setGroup(). </summary>
		public virtual ushort getGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getGroup_virtual()
		{
			return getGroup();
		}
		
		delegate ushort getGroup_30_delegate();
		
		
		
		
		
		
		private getGroup_30_delegate getGroup_30_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. </summary>
		/// <param name="groupsMask">The group mask to set for the soft body.</param>
		public virtual void setGroupsMask(NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private void setGroupsMask_virtual(IntPtr groupsMask)
		{
			setGroupsMask(NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate void setGroupsMask_31_delegate(IntPtr groupsMask);
		
		
		
		
		
		
		private setGroupsMask_31_delegate setGroupsMask_31_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. </summary>
		public virtual NxGroupsMask getGroupsMask()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxGroupsMask.GetClass(NxSoftBody_getGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getGroupsMask_virtual()
		{
			return getGroupsMask().ClassPointer.Handle;
		}
		
		delegate IntPtr getGroupsMask_32_delegate();
		
		
		
		
		
		
		private getGroupsMask_32_delegate getGroupsMask_32_delegatefield;
		
		/// <summary>Sets the user buffer wrapper for the soft body mesh. </summary>
		/// <param name="meshData">User buffer wrapper.</param>
		public virtual void setMeshData(NxMeshData meshData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setMeshData_INVOKE(ClassPointer, doSetFunctionPointers, (meshData!=null ? meshData.ClassPointer : NullRef));
		}
		
		private void setMeshData_virtual(IntPtr meshData)
		{
			setMeshData(NxMeshData.GetClass(meshData));
		}
		
		delegate void setMeshData_33_delegate(IntPtr meshData);
		
		
		
		
		
		
		private setMeshData_33_delegate setMeshData_33_delegatefield;
		
		/// <summary>Returns a copy of the user buffer wrapper for the soft body mesh. </summary>
		public virtual NxMeshData getMeshData()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMeshData.GetClass(NxSoftBody_getMeshData_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getMeshData_virtual()
		{
			return getMeshData().ClassPointer.Handle;
		}
		
		delegate IntPtr getMeshData_34_delegate();
		
		
		
		
		
		
		private getMeshData_34_delegate getMeshData_34_delegatefield;
		
		/// <summary>Sets the user buffer wrapper for the soft body split pairs. </summary>
		/// <param name="splitPairData">User buffer wrapper.</param>
		public virtual void setSplitPairData(NxSoftBodySplitPairData splitPairData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setSplitPairData_INVOKE(ClassPointer, doSetFunctionPointers, (splitPairData!=null ? splitPairData.ClassPointer : NullRef));
		}
		
		private void setSplitPairData_virtual(IntPtr splitPairData)
		{
			setSplitPairData(NxSoftBodySplitPairData.GetClass(splitPairData));
		}
		
		delegate void setSplitPairData_35_delegate(IntPtr splitPairData);
		
		
		
		
		
		
		private setSplitPairData_35_delegate setSplitPairData_35_delegatefield;
		
		/// <summary>Returns a copy of the user buffer wrapper for the soft body split pairs. </summary>
		public virtual NxSoftBodySplitPairData getSplitPairData()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBodySplitPairData.GetClass(NxSoftBody_getSplitPairData_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getSplitPairData_virtual()
		{
			return getSplitPairData().ClassPointer.Handle;
		}
		
		delegate IntPtr getSplitPairData_36_delegate();
		
		
		
		
		
		
		private getSplitPairData_36_delegate getSplitPairData_36_delegatefield;
		
		/// <summary>Sets the valid bounds of the soft body in world space. </summary>
		/// <param name="validBounds">The valid bounds.</param>
		public virtual void setValidBounds(NxBounds3 validBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setValidBounds_INVOKE(ClassPointer, doSetFunctionPointers, (validBounds!=null ? validBounds.ClassPointer : NullRef));
		}
		
		private void setValidBounds_virtual(IntPtr validBounds)
		{
			setValidBounds(NxBounds3.GetClass(validBounds));
		}
		
		delegate void setValidBounds_37_delegate(IntPtr validBounds);
		
		
		
		
		
		
		private setValidBounds_37_delegate setValidBounds_37_delegatefield;
		
		/// <summary>Returns the valid bounds of the soft body in world space. </summary>
		/// <param name="validBounds">The valid bounds.</param>
		public virtual void getValidBounds(NxBounds3 validBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getValidBounds_INVOKE(ClassPointer, doSetFunctionPointers, (validBounds!=null ? validBounds.ClassPointer : NullRef));
		}
		
		private void getValidBounds_virtual(IntPtr validBounds)
		{
			getValidBounds(NxBounds3.GetClass(validBounds));
		}
		
		delegate void getValidBounds_38_delegate(IntPtr validBounds);
		
		
		
		
		
		
		private getValidBounds_38_delegate getValidBounds_38_delegatefield;
		
		/// <summary>Sets the position of a particular vertex of the soft body. </summary>
		/// <param name="position">New position of the vertex. </param>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual void setPosition(ref NxVec3 position, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref position, vertexId);
		}
		
		private void setPosition_virtual([In()] ref NxVec3 position, uint vertexId)
		{
			setPosition(ref position, vertexId);
		}
		
		delegate void setPosition_39_delegate([In()] ref NxVec3 position, uint vertexId);
		
		
		
		
		
		
		private setPosition_39_delegate setPosition_39_delegatefield;
		
		/// <summary>Sets the positions of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer containing all positions for the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setPositions(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setPositions_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void setPositions_virtual(System.IntPtr buffer, uint byteStride)
		{
			setPositions(buffer, byteStride);
		}
		
		delegate void setPositions_40_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private setPositions_40_delegate setPositions_40_delegatefield;
		
		/// <summary>Sets the positions of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer containing all positions for the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setPositions(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setPositions_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void setPositions_virtual(System.IntPtr buffer)
		{
			setPositions(buffer);
		}
		
		delegate void setPositions_41_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private setPositions_41_delegate setPositions_41_delegatefield;
		
		/// <summary>Gets the position of a particular vertex of the soft body. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxVec3 getPosition(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getPosition_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxVec3 getPosition_virtual(uint vertexId)
		{
			return getPosition(vertexId);
		}
		
		delegate NxVec3 getPosition_42_delegate(uint vertexId);
		
		
		
		
		
		
		private getPosition_42_delegate getPosition_42_delegatefield;
		
		/// <summary>Gets the positions of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer to hold all positions of the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getPositions(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getPositions_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void getPositions_virtual(System.IntPtr buffer, uint byteStride)
		{
			getPositions(buffer, byteStride);
		}
		
		delegate void getPositions_43_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private getPositions_43_delegate getPositions_43_delegatefield;
		
		/// <summary>Gets the positions of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer to hold all positions of the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getPositions(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getPositions_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void getPositions_virtual(System.IntPtr buffer)
		{
			getPositions(buffer);
		}
		
		delegate void getPositions_44_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private getPositions_44_delegate getPositions_44_delegatefield;
		
		/// <summary>Sets the velocity of a particular vertex of the soft body. </summary>
		/// <param name="position">New velocity of the vertex. </param>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual void setVelocity(ref NxVec3 velocity, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref velocity, vertexId);
		}
		
		private void setVelocity_virtual([In()] ref NxVec3 velocity, uint vertexId)
		{
			setVelocity(ref velocity, vertexId);
		}
		
		delegate void setVelocity_45_delegate([In()] ref NxVec3 velocity, uint vertexId);
		
		
		
		
		
		
		private setVelocity_45_delegate setVelocity_45_delegatefield;
		
		/// <summary>Sets the velocities of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer containing all velocities for the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setVelocities(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setVelocities_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void setVelocities_virtual(System.IntPtr buffer, uint byteStride)
		{
			setVelocities(buffer, byteStride);
		}
		
		delegate void setVelocities_46_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private setVelocities_46_delegate setVelocities_46_delegatefield;
		
		/// <summary>Sets the velocities of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer containing all velocities for the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setVelocities(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setVelocities_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void setVelocities_virtual(System.IntPtr buffer)
		{
			setVelocities(buffer);
		}
		
		delegate void setVelocities_47_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private setVelocities_47_delegate setVelocities_47_delegatefield;
		
		/// <summary>Gets the velocity of a particular vertex of the soft body. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxVec3 getVelocity(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getVelocity_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxVec3 getVelocity_virtual(uint vertexId)
		{
			return getVelocity(vertexId);
		}
		
		delegate NxVec3 getVelocity_48_delegate(uint vertexId);
		
		
		
		
		
		
		private getVelocity_48_delegate getVelocity_48_delegatefield;
		
		/// <summary>Gets the velocities of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer to hold all velocities of the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getVelocities(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getVelocities_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void getVelocities_virtual(System.IntPtr buffer, uint byteStride)
		{
			getVelocities(buffer, byteStride);
		}
		
		delegate void getVelocities_49_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private getVelocities_49_delegate getVelocities_49_delegatefield;
		
		/// <summary>Gets the velocities of the soft body. </summary>
		/// <param name="buffer">The user supplied buffer to hold all velocities of the soft body. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getVelocities(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getVelocities_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void getVelocities_virtual(System.IntPtr buffer)
		{
			getVelocities(buffer);
		}
		
		delegate void getVelocities_50_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private getVelocities_50_delegate getVelocities_50_delegatefield;
		
		/// <summary>Gets the number of soft body particles. </summary>
		public virtual uint getNumberOfParticles()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getNumberOfParticles_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNumberOfParticles_virtual()
		{
			return getNumberOfParticles();
		}
		
		delegate uint getNumberOfParticles_51_delegate();
		
		
		
		
		
		
		private getNumberOfParticles_51_delegate getNumberOfParticles_51_delegatefield;
		
		/// <summary>Queries the soft body for the currently interacting shapes. Must be called prior to saveStateToStream in order for attachments and collisons to be saved. </summary>
		public virtual uint queryShapePointers()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_queryShapePointers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint queryShapePointers_virtual()
		{
			return queryShapePointers();
		}
		
		delegate uint queryShapePointers_52_delegate();
		
		
		
		
		
		
		private queryShapePointers_52_delegate queryShapePointers_52_delegatefield;
		
		/// <summary>Gets the byte size of the current soft body state. </summary>
		public virtual uint getStateByteSize()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getStateByteSize_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getStateByteSize_virtual()
		{
			return getStateByteSize();
		}
		
		delegate uint getStateByteSize_53_delegate();
		
		
		
		
		
		
		private getStateByteSize_53_delegate getStateByteSize_53_delegatefield;
		
		/// <summary>Saves pointers to the currently interacting shapes to memory. </summary>
		/// <param name="shapePointers">The user supplied array to hold the shape pointers. </param>
		/// <param name="flags">The optional user supplied array to hold the attachment shape flags for the various shapes.</param>
		public virtual void getShapePointers(DoxyBindArray<NxShape> shapePointers, uint[] flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_getShapePointers_INVOKE(ClassPointer, doSetFunctionPointers, shapePointers, flags);
		}
		
		private void getShapePointers_virtual(IntPtr[] shapePointers, uint[] flags)
		{
			getShapePointers(shapePointers, flags);
		}
		
		delegate void getShapePointers_54_delegate(IntPtr[] shapePointers, uint[] flags);
		
		
		
		
		
		
		private getShapePointers_54_delegate getShapePointers_54_delegatefield;
		
		/// <summary>Loads pointers to the currently interacting shapes from memory. </summary>
		/// <param name="shapePointers">The user supplied array that holds the shape pointers. Must be in the exact same order as the shapes were retrieved by getShapePointers. </param>
		/// <param name="numShapes">The size of the supplied array.</param>
		public virtual void setShapePointers(DoxyBindArray<NxShape> shapePointers, uint numShapes)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setShapePointers_INVOKE(ClassPointer, doSetFunctionPointers, shapePointers, numShapes);
		}
		
		private void setShapePointers_virtual(IntPtr[] shapePointers, uint numShapes)
		{
			setShapePointers(shapePointers, numShapes);
		}
		
		delegate void setShapePointers_55_delegate(IntPtr[] shapePointers, uint numShapes);
		
		
		
		
		
		
		private setShapePointers_55_delegate setShapePointers_55_delegatefield;
		
		/// <summary>Saves the current soft body state to a stream. </summary>
		/// <param name="stream">The user supplied stream to hold the soft body state. </param>
		/// <param name="permute">If true, the order of the vertices output will correspond to that of the associated NxSoftBodyMesh's saveToDesc mehod; if false (the default), it will correspond to the original NxSoftBodyMesh descriptor used to create the mesh. These may differ due to cooking.</param>
		public virtual void saveStateToStream(NxStream stream, bool permute)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_saveStateToStream_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef), permute);
		}
		
		private void saveStateToStream_virtual(IntPtr stream, bool permute)
		{
			saveStateToStream(NxStream.GetClass(stream), permute);
		}
		
		delegate void saveStateToStream_56_delegate(IntPtr stream, bool permute);
		
		
		
		
		
		
		private saveStateToStream_56_delegate saveStateToStream_56_delegatefield;
		
		/// <summary>Saves the current soft body state to a stream. </summary>
		/// <param name="stream">The user supplied stream to hold the soft body state. </param>
		/// <param name="permute">If true, the order of the vertices output will correspond to that of the associated NxSoftBodyMesh's saveToDesc mehod; if false (the default), it will correspond to the original NxSoftBodyMesh descriptor used to create the mesh. These may differ due to cooking.</param>
		public virtual void saveStateToStream(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_saveStateToStream_1_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private void saveStateToStream_virtual(IntPtr stream)
		{
			saveStateToStream(NxStream.GetClass(stream));
		}
		
		delegate void saveStateToStream_57_delegate(IntPtr stream);
		
		
		
		
		
		
		private saveStateToStream_57_delegate saveStateToStream_57_delegatefield;
		
		/// <summary>Loads the current soft body state from a stream. </summary>
		/// <param name="stream">The user supplied stream that holds the soft body state.</param>
		public virtual void loadStateFromStream(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_loadStateFromStream_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private void loadStateFromStream_virtual(IntPtr stream)
		{
			loadStateFromStream(NxStream.GetClass(stream));
		}
		
		delegate void loadStateFromStream_58_delegate(IntPtr stream);
		
		
		
		
		
		
		private loadStateFromStream_58_delegate loadStateFromStream_58_delegatefield;
		
		/// <summary>Sets the collision response coefficient. </summary>
		/// <param name="coefficient">The collision response coefficient (0 or greater).</param>
		public virtual void setCollisionResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setCollisionResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setCollisionResponseCoefficient_virtual(float coefficient)
		{
			setCollisionResponseCoefficient(coefficient);
		}
		
		delegate void setCollisionResponseCoefficient_59_delegate(float coefficient);
		
		
		
		
		
		
		private setCollisionResponseCoefficient_59_delegate setCollisionResponseCoefficient_59_delegatefield;
		
		/// <summary>Retrieves the collision response coefficient. </summary>
		public virtual float getCollisionResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getCollisionResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getCollisionResponseCoefficient_virtual()
		{
			return getCollisionResponseCoefficient();
		}
		
		delegate float getCollisionResponseCoefficient_60_delegate();
		
		
		
		
		
		
		private getCollisionResponseCoefficient_60_delegate getCollisionResponseCoefficient_60_delegatefield;
		
		/// <summary>Sets the attachment response coefficient. </summary>
		/// <param name="coefficient">The attachment response coefficient in the range from 0 to 1.</param>
		public virtual void setAttachmentResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setAttachmentResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setAttachmentResponseCoefficient_virtual(float coefficient)
		{
			setAttachmentResponseCoefficient(coefficient);
		}
		
		delegate void setAttachmentResponseCoefficient_61_delegate(float coefficient);
		
		
		
		
		
		
		private setAttachmentResponseCoefficient_61_delegate setAttachmentResponseCoefficient_61_delegatefield;
		
		/// <summary>Retrieves the attachment response coefficient. </summary>
		public virtual float getAttachmentResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getAttachmentResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAttachmentResponseCoefficient_virtual()
		{
			return getAttachmentResponseCoefficient();
		}
		
		delegate float getAttachmentResponseCoefficient_62_delegate();
		
		
		
		
		
		
		private getAttachmentResponseCoefficient_62_delegate getAttachmentResponseCoefficient_62_delegatefield;
		
		/// <summary>Sets the response coefficient for collisions from fluids to this soft body. </summary>
		/// <param name="coefficient">The response coefficient</param>
		public virtual void setFromFluidResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setFromFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setFromFluidResponseCoefficient_virtual(float coefficient)
		{
			setFromFluidResponseCoefficient(coefficient);
		}
		
		delegate void setFromFluidResponseCoefficient_63_delegate(float coefficient);
		
		
		
		
		
		
		private setFromFluidResponseCoefficient_63_delegate setFromFluidResponseCoefficient_63_delegatefield;
		
		/// <summary>Retrieves response coefficient for collisions from fluids to this soft body. </summary>
		public virtual float getFromFluidResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getFromFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getFromFluidResponseCoefficient_virtual()
		{
			return getFromFluidResponseCoefficient();
		}
		
		delegate float getFromFluidResponseCoefficient_64_delegate();
		
		
		
		
		
		
		private getFromFluidResponseCoefficient_64_delegate getFromFluidResponseCoefficient_64_delegatefield;
		
		/// <summary>Sets the response coefficient for collisions from this soft body to fluids. </summary>
		/// <param name="coefficient">The response coefficient</param>
		public virtual void setToFluidResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setToFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setToFluidResponseCoefficient_virtual(float coefficient)
		{
			setToFluidResponseCoefficient(coefficient);
		}
		
		delegate void setToFluidResponseCoefficient_65_delegate(float coefficient);
		
		
		
		
		
		
		private setToFluidResponseCoefficient_65_delegate setToFluidResponseCoefficient_65_delegatefield;
		
		/// <summary>Retrieves response coefficient for collisions from this soft body to fluids. </summary>
		public virtual float getToFluidResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getToFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getToFluidResponseCoefficient_virtual()
		{
			return getToFluidResponseCoefficient();
		}
		
		delegate float getToFluidResponseCoefficient_66_delegate();
		
		
		
		
		
		
		private getToFluidResponseCoefficient_66_delegate getToFluidResponseCoefficient_66_delegatefield;
		
		/// <summary>Sets an external acceleration which affects all non attached particles of the soft body. </summary>
		/// <param name="acceleration">The acceleration vector (unit length / s^2)</param>
		public virtual void setExternalAcceleration(NxVec3 acceleration)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setExternalAcceleration_INVOKE(ClassPointer, doSetFunctionPointers, acceleration);
		}
		
		private void setExternalAcceleration_virtual(NxVec3 acceleration)
		{
			setExternalAcceleration(acceleration);
		}
		
		delegate void setExternalAcceleration_67_delegate(NxVec3 acceleration);
		
		
		
		
		
		
		private setExternalAcceleration_67_delegate setExternalAcceleration_67_delegatefield;
		
		/// <summary>Retrieves the external acceleration which affects all non attached particles of the soft body. </summary>
		public virtual NxVec3 getExternalAcceleration()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getExternalAcceleration_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getExternalAcceleration_virtual()
		{
			return getExternalAcceleration();
		}
		
		delegate NxVec3 getExternalAcceleration_68_delegate();
		
		
		
		
		
		
		private getExternalAcceleration_68_delegate getExternalAcceleration_68_delegatefield;
		
		/// <summary>If the NX_SBF_ADHERE flag is set the soft body moves partially in the frame of the attached actor. </summary>
		/// <param name="velocity">The minimal velocity for the soft body to adhere (unit length / s)</param>
		public virtual void setMinAdhereVelocity(float velocity)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setMinAdhereVelocity_INVOKE(ClassPointer, doSetFunctionPointers, velocity);
		}
		
		private void setMinAdhereVelocity_virtual(float velocity)
		{
			setMinAdhereVelocity(velocity);
		}
		
		delegate void setMinAdhereVelocity_69_delegate(float velocity);
		
		
		
		
		
		
		private setMinAdhereVelocity_69_delegate setMinAdhereVelocity_69_delegatefield;
		
		/// <summary>If the NX_SBF_ADHERE flag is set the soft body moves partially in the frame of the attached actor. </summary>
		public virtual float getMinAdhereVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getMinAdhereVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getMinAdhereVelocity_virtual()
		{
			return getMinAdhereVelocity();
		}
		
		delegate float getMinAdhereVelocity_70_delegate();
		
		
		
		
		
		
		private getMinAdhereVelocity_70_delegate getMinAdhereVelocity_70_delegatefield;
		
		/// <summary>Returns true if this soft body is sleeping. </summary>
		public virtual bool isSleeping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_isSleeping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isSleeping_virtual()
		{
			return isSleeping();
		}
		
		delegate bool isSleeping_71_delegate();
		
		
		
		
		
		
		private isSleeping_71_delegate isSleeping_71_delegatefield;
		
		/// <summary>Returns the linear velocity below which a soft body may go to sleep. </summary>
		public virtual float getSleepLinearVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSleepLinearVelocity_virtual()
		{
			return getSleepLinearVelocity();
		}
		
		delegate float getSleepLinearVelocity_72_delegate();
		
		
		
		
		
		
		private getSleepLinearVelocity_72_delegate getSleepLinearVelocity_72_delegatefield;
		
		/// <summary>Sets the linear velocity below which a soft body may go to sleep. </summary>
		/// <param name="threshold">Linear velocity below which a soft body may sleep. Range: (0,inf]</param>
		public virtual void setSleepLinearVelocity(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setSleepLinearVelocity_virtual(float threshold)
		{
			setSleepLinearVelocity(threshold);
		}
		
		delegate void setSleepLinearVelocity_73_delegate(float threshold);
		
		
		
		
		
		
		private setSleepLinearVelocity_73_delegate setSleepLinearVelocity_73_delegatefield;
		
		/// <summary>Wakes up the soft body if it is sleeping. </summary>
		/// <param name="wakeCounterValue">New sleep counter value. Range: [0,inf]</param>
		public virtual void wakeUp(float wakeCounterValue)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_wakeUp_INVOKE(ClassPointer, doSetFunctionPointers, wakeCounterValue);
		}
		
		private void wakeUp_virtual(float wakeCounterValue)
		{
			wakeUp(wakeCounterValue);
		}
		
		delegate void wakeUp_74_delegate(float wakeCounterValue);
		
		
		
		
		
		
		private wakeUp_74_delegate wakeUp_74_delegatefield;
		
		/// <summary>Forces the soft body to sleep. </summary>
		public virtual void putToSleep()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_putToSleep_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void putToSleep_virtual()
		{
			putToSleep();
		}
		
		delegate void putToSleep_75_delegate();
		
		
		
		
		
		
		private putToSleep_75_delegate putToSleep_75_delegatefield;
		
		/// <summary>Sets the flags, a combination of the bits defined by the enum NxSoftBodyFlag. </summary>
		/// <param name="flags">NxSoftBodyFlag combination.</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_76_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_76_delegate setFlags_76_delegatefield;
		
		/// <summary>Retrieves the flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_77_delegate();
		
		
		
		
		
		
		private getFlags_77_delegate getFlags_77_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_78_delegate(string name);
		
		
		
		
		
		
		private setName_78_delegate setName_78_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, to a particular vertex of the soft body. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="vertexId">Number of the vertex to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE)</param>
		public virtual void addForceAtVertex(ref NxVec3 force, uint vertexId, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_addForceAtVertex_INVOKE(ClassPointer, doSetFunctionPointers, ref force, vertexId, mode);
		}
		
		private void addForceAtVertex_virtual([In()] ref NxVec3 force, uint vertexId, NxForceMode mode)
		{
			addForceAtVertex(ref force, vertexId, mode);
		}
		
		delegate void addForceAtVertex_79_delegate([In()] ref NxVec3 force, uint vertexId, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtVertex_79_delegate addForceAtVertex_79_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, to a particular vertex of the soft body. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="vertexId">Number of the vertex to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE)</param>
		public virtual void addForceAtVertex(ref NxVec3 force, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_addForceAtVertex_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, vertexId);
		}
		
		private void addForceAtVertex_virtual([In()] ref NxVec3 force, uint vertexId)
		{
			addForceAtVertex(ref force, vertexId);
		}
		
		delegate void addForceAtVertex_80_delegate([In()] ref NxVec3 force, uint vertexId);
		
		
		
		
		
		
		private addForceAtVertex_80_delegate addForceAtVertex_80_delegatefield;
		
		/// <summary>Applies a radial force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="magnitude">Magnitude of the force/impulse to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addForceAtPos(ref NxVec3 position, float magnitude, float radius, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_addForceAtPos_INVOKE(ClassPointer, doSetFunctionPointers, ref position, magnitude, radius, mode);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 position, float magnitude, float radius, NxForceMode mode)
		{
			addForceAtPos(ref position, magnitude, radius, mode);
		}
		
		delegate void addForceAtPos_81_delegate([In()] ref NxVec3 position, float magnitude, float radius, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtPos_81_delegate addForceAtPos_81_delegatefield;
		
		/// <summary>Applies a radial force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="magnitude">Magnitude of the force/impulse to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addForceAtPos(ref NxVec3 position, float magnitude, float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_addForceAtPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref position, magnitude, radius);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 position, float magnitude, float radius)
		{
			addForceAtPos(ref position, magnitude, radius);
		}
		
		delegate void addForceAtPos_82_delegate([In()] ref NxVec3 position, float magnitude, float radius);
		
		
		
		
		
		
		private addForceAtPos_82_delegate addForceAtPos_82_delegatefield;
		
		/// <summary>Finds tetrahedra touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against in world space. Range: See NxBounds3</param>
		/// <param name="nb">Retrieves the number of tetrahedral indices touching the AABB. </param>
		/// <param name="indices">Returns an array of touching tetrahedra indices. The tetrahedral indices correspond to the tetrahedra referenced to by NxSoftBodyDesc.meshdata (NxMeshData). Tetrahedron i has the vertices 4i, 4i+1, 4i+2 and 4i+3 in the array NxMeshData.indicesBegin. </param>
		public virtual bool overlapAABBTetrahedra(NxBounds3 bounds, ref uint nb, ref uint[] indices)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_overlapAABBTetrahedra_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), ref nb, ref indices);
		}
		
		private bool overlapAABBTetrahedra_virtual(IntPtr bounds, [In()] [Out()] ref uint nb, [In()] ref uint[] indices)
		{
			return overlapAABBTetrahedra(NxBounds3.GetClass(bounds), ref nb, ref indices);
		}
		
		delegate bool overlapAABBTetrahedra_83_delegate(IntPtr bounds, [In()] [Out()] ref uint nb, [In()] ref uint[] indices);
		
		
		
		
		
		
		private overlapAABBTetrahedra_83_delegate overlapAABBTetrahedra_83_delegatefield;
		
		/// <summary>Retrieves the scene which this soft body belongs to. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxSoftBody_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_84_delegate();
		
		
		
		
		
		
		private getScene_84_delegate getScene_84_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_85_delegate();
		
		
		
		
		
		
		private getName_85_delegate getName_85_delegatefield;
		
		/// <summary>Retrieves the soft body's simulation compartment, as specified by the user at creation time. </summary>
		public virtual NxCompartment getCompartment()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment.GetClass(NxSoftBody_getCompartment_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getCompartment_virtual()
		{
			return getCompartment().ClassPointer.Handle;
		}
		
		delegate IntPtr getCompartment_86_delegate();
		
		
		
		
		
		
		private getCompartment_86_delegate getCompartment_86_delegatefield;
		
		/// <summary>Retrieves the actor's force field material index, default index is 0. </summary>
		public virtual ushort getForceFieldMaterial()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSoftBody_getForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getForceFieldMaterial_virtual()
		{
			return getForceFieldMaterial();
		}
		
		delegate ushort getForceFieldMaterial_87_delegate();
		
		
		
		
		
		
		private getForceFieldMaterial_87_delegate getForceFieldMaterial_87_delegatefield;
		
		/// <summary>Sets the actor's force field material index, default index is 0. </summary>
		public virtual void setForceFieldMaterial(ushort unknown95)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSoftBody_setForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers, unknown95);
		}
		
		private void setForceFieldMaterial_virtual(ushort unknown95)
		{
			setForceFieldMaterial(unknown95);
		}
		
		delegate void setForceFieldMaterial_88_delegate(ushort unknown95);
		
		
		
		
		
		
		private setForceFieldMaterial_88_delegate setForceFieldMaterial_88_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBody_userData")]
        private extern static void set_NxSoftBody_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBody_userData")]
        private extern static System.IntPtr get_NxSoftBody_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSoftBody")]
        private extern static IntPtr new_NxSoftBody_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_saveToDesc")]
        private extern static System.Boolean NxSoftBody_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getSoftBodyMesh")]
        private extern static IntPtr NxSoftBody_getSoftBodyMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setVolumeStiffness")]
        private extern static void NxSoftBody_setVolumeStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single stiffness);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getVolumeStiffness")]
        private extern static System.Single NxSoftBody_getVolumeStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setStretchingStiffness")]
        private extern static void NxSoftBody_setStretchingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single stiffness);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getStretchingStiffness")]
        private extern static System.Single NxSoftBody_getStretchingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setDampingCoefficient")]
        private extern static void NxSoftBody_setDampingCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single dampingCoefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getDampingCoefficient")]
        private extern static System.Single NxSoftBody_getDampingCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setFriction")]
        private extern static void NxSoftBody_setFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single friction);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getFriction")]
        private extern static System.Single NxSoftBody_getFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setTearFactor")]
        private extern static void NxSoftBody_setTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single factor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getTearFactor")]
        private extern static System.Single NxSoftBody_getTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setAttachmentTearFactor")]
        private extern static void NxSoftBody_setAttachmentTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single factor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getAttachmentTearFactor")]
        private extern static System.Single NxSoftBody_getAttachmentTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setParticleRadius")]
        private extern static void NxSoftBody_setParticleRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single particleRadius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getParticleRadius")]
        private extern static System.Single NxSoftBody_getParticleRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getDensity")]
        private extern static System.Single NxSoftBody_getDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getRelativeGridSpacing")]
        private extern static System.Single NxSoftBody_getRelativeGridSpacing_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getSolverIterations")]
        private extern static System.UInt32 NxSoftBody_getSolverIterations_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setSolverIterations")]
        private extern static void NxSoftBody_setSolverIterations_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 iterations);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getWorldBounds")]
        private extern static void NxSoftBody_getWorldBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_attachToShape")]
        private extern static void NxSoftBody_attachToShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_attachToCollidingShapes")]
        private extern static void NxSoftBody_attachToCollidingShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_detachFromShape")]
        private extern static void NxSoftBody_detachFromShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_attachVertexToShape")]
        private extern static void NxSoftBody_attachVertexToShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, HandleRef shape, [In()] ref NxVec3 localPos, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_attachVertexToGlobalPosition")]
        private extern static void NxSoftBody_attachVertexToGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_freeVertex")]
        private extern static void NxSoftBody_freeVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_tearVertex")]
        private extern static System.Boolean NxSoftBody_tearVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, [In()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_raycast")]
        private extern static System.Boolean NxSoftBody_raycast_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setGroup")]
        private extern static void NxSoftBody_setGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 collisionGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getGroup")]
        private extern static System.UInt16 NxSoftBody_getGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setGroupsMask")]
        private extern static void NxSoftBody_setGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getGroupsMask")]
        private extern static IntPtr NxSoftBody_getGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setMeshData")]
        private extern static void NxSoftBody_setMeshData_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef meshData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getMeshData")]
        private extern static IntPtr NxSoftBody_getMeshData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setSplitPairData")]
        private extern static void NxSoftBody_setSplitPairData_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef splitPairData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getSplitPairData")]
        private extern static IntPtr NxSoftBody_getSplitPairData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setValidBounds")]
        private extern static void NxSoftBody_setValidBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef validBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getValidBounds")]
        private extern static void NxSoftBody_getValidBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef validBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setPosition")]
        private extern static void NxSoftBody_setPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setPositions")]
        private extern static void NxSoftBody_setPositions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setPositions_1")]
        private extern static void NxSoftBody_setPositions_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getPosition")]
        private extern static NxVec3 NxSoftBody_getPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getPositions")]
        private extern static void NxSoftBody_getPositions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getPositions_1")]
        private extern static void NxSoftBody_getPositions_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setVelocity")]
        private extern static void NxSoftBody_setVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 velocity, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setVelocities")]
        private extern static void NxSoftBody_setVelocities_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setVelocities_1")]
        private extern static void NxSoftBody_setVelocities_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getVelocity")]
        private extern static NxVec3 NxSoftBody_getVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getVelocities")]
        private extern static void NxSoftBody_getVelocities_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getVelocities_1")]
        private extern static void NxSoftBody_getVelocities_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getNumberOfParticles")]
        private extern static System.UInt32 NxSoftBody_getNumberOfParticles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_queryShapePointers")]
        private extern static System.UInt32 NxSoftBody_queryShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getStateByteSize")]
        private extern static System.UInt32 NxSoftBody_getStateByteSize_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getShapePointers")]
        private extern static void NxSoftBody_getShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] shapePointers, System.UInt32[] flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setShapePointers")]
        private extern static void NxSoftBody_setShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] shapePointers, System.UInt32 numShapes);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_saveStateToStream")]
        private extern static void NxSoftBody_saveStateToStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream, System.Boolean permute);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_saveStateToStream_1")]
        private extern static void NxSoftBody_saveStateToStream_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_loadStateFromStream")]
        private extern static void NxSoftBody_loadStateFromStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setCollisionResponseCoefficient")]
        private extern static void NxSoftBody_setCollisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getCollisionResponseCoefficient")]
        private extern static System.Single NxSoftBody_getCollisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setAttachmentResponseCoefficient")]
        private extern static void NxSoftBody_setAttachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getAttachmentResponseCoefficient")]
        private extern static System.Single NxSoftBody_getAttachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setFromFluidResponseCoefficient")]
        private extern static void NxSoftBody_setFromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getFromFluidResponseCoefficient")]
        private extern static System.Single NxSoftBody_getFromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setToFluidResponseCoefficient")]
        private extern static void NxSoftBody_setToFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getToFluidResponseCoefficient")]
        private extern static System.Single NxSoftBody_getToFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setExternalAcceleration")]
        private extern static void NxSoftBody_setExternalAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxVec3 acceleration);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getExternalAcceleration")]
        private extern static NxVec3 NxSoftBody_getExternalAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setMinAdhereVelocity")]
        private extern static void NxSoftBody_setMinAdhereVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single velocity);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getMinAdhereVelocity")]
        private extern static System.Single NxSoftBody_getMinAdhereVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_isSleeping")]
        private extern static System.Boolean NxSoftBody_isSleeping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getSleepLinearVelocity")]
        private extern static System.Single NxSoftBody_getSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setSleepLinearVelocity")]
        private extern static void NxSoftBody_setSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_wakeUp")]
        private extern static void NxSoftBody_wakeUp_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single wakeCounterValue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_putToSleep")]
        private extern static void NxSoftBody_putToSleep_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setFlags")]
        private extern static void NxSoftBody_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getFlags")]
        private extern static System.UInt32 NxSoftBody_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setName")]
        private extern static void NxSoftBody_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_addForceAtVertex")]
        private extern static void NxSoftBody_addForceAtVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, System.UInt32 vertexId, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_addForceAtVertex_1")]
        private extern static void NxSoftBody_addForceAtVertex_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_addForceAtPos")]
        private extern static void NxSoftBody_addForceAtPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.Single magnitude, System.Single radius, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_addForceAtPos_1")]
        private extern static void NxSoftBody_addForceAtPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.Single magnitude, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_overlapAABBTetrahedra")]
        private extern static System.Boolean NxSoftBody_overlapAABBTetrahedra_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getScene")]
        private extern static IntPtr NxSoftBody_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getName")]
        private extern static System.String NxSoftBody_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getCompartment")]
        private extern static IntPtr NxSoftBody_getCompartment_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_getForceFieldMaterial")]
        private extern static System.UInt16 NxSoftBody_getForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBody_setForceFieldMaterial")]
        private extern static void NxSoftBody_setForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown95);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSoftBody GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSoftBody)(obj.Target));
				}
			}
			return new NxSoftBody(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getSoftBodyMesh_1_delegatefield = new getSoftBodyMesh_1_delegate(this.getSoftBodyMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSoftBodyMesh_1_delegatefield));
			setVolumeStiffness_2_delegatefield = new setVolumeStiffness_2_delegate(this.setVolumeStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVolumeStiffness_2_delegatefield));
			getVolumeStiffness_3_delegatefield = new getVolumeStiffness_3_delegate(this.getVolumeStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVolumeStiffness_3_delegatefield));
			setStretchingStiffness_4_delegatefield = new setStretchingStiffness_4_delegate(this.setStretchingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStretchingStiffness_4_delegatefield));
			getStretchingStiffness_5_delegatefield = new getStretchingStiffness_5_delegate(this.getStretchingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStretchingStiffness_5_delegatefield));
			setDampingCoefficient_6_delegatefield = new setDampingCoefficient_6_delegate(this.setDampingCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDampingCoefficient_6_delegatefield));
			getDampingCoefficient_7_delegatefield = new getDampingCoefficient_7_delegate(this.getDampingCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDampingCoefficient_7_delegatefield));
			setFriction_8_delegatefield = new setFriction_8_delegate(this.setFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFriction_8_delegatefield));
			getFriction_9_delegatefield = new getFriction_9_delegate(this.getFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFriction_9_delegatefield));
			setTearFactor_10_delegatefield = new setTearFactor_10_delegate(this.setTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTearFactor_10_delegatefield));
			getTearFactor_11_delegatefield = new getTearFactor_11_delegate(this.getTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTearFactor_11_delegatefield));
			setAttachmentTearFactor_12_delegatefield = new setAttachmentTearFactor_12_delegate(this.setAttachmentTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAttachmentTearFactor_12_delegatefield));
			getAttachmentTearFactor_13_delegatefield = new getAttachmentTearFactor_13_delegate(this.getAttachmentTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAttachmentTearFactor_13_delegatefield));
			setParticleRadius_14_delegatefield = new setParticleRadius_14_delegate(this.setParticleRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setParticleRadius_14_delegatefield));
			getParticleRadius_15_delegatefield = new getParticleRadius_15_delegate(this.getParticleRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getParticleRadius_15_delegatefield));
			getDensity_16_delegatefield = new getDensity_16_delegate(this.getDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDensity_16_delegatefield));
			getRelativeGridSpacing_17_delegatefield = new getRelativeGridSpacing_17_delegate(this.getRelativeGridSpacing_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRelativeGridSpacing_17_delegatefield));
			getSolverIterations_18_delegatefield = new getSolverIterations_18_delegate(this.getSolverIterations_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSolverIterations_18_delegatefield));
			setSolverIterations_19_delegatefield = new setSolverIterations_19_delegate(this.setSolverIterations_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSolverIterations_19_delegatefield));
			getWorldBounds_20_delegatefield = new getWorldBounds_20_delegate(this.getWorldBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWorldBounds_20_delegatefield));
			attachToShape_21_delegatefield = new attachToShape_21_delegate(this.attachToShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToShape_21_delegatefield));
			attachToCollidingShapes_22_delegatefield = new attachToCollidingShapes_22_delegate(this.attachToCollidingShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToCollidingShapes_22_delegatefield));
			detachFromShape_23_delegatefield = new detachFromShape_23_delegate(this.detachFromShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(detachFromShape_23_delegatefield));
			attachVertexToShape_24_delegatefield = new attachVertexToShape_24_delegate(this.attachVertexToShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachVertexToShape_24_delegatefield));
			attachVertexToGlobalPosition_25_delegatefield = new attachVertexToGlobalPosition_25_delegate(this.attachVertexToGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachVertexToGlobalPosition_25_delegatefield));
			freeVertex_26_delegatefield = new freeVertex_26_delegate(this.freeVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(freeVertex_26_delegatefield));
			tearVertex_27_delegatefield = new tearVertex_27_delegate(this.tearVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(tearVertex_27_delegatefield));
			raycast_28_delegatefield = new raycast_28_delegate(this.raycast_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycast_28_delegatefield));
			setGroup_29_delegatefield = new setGroup_29_delegate(this.setGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroup_29_delegatefield));
			getGroup_30_delegatefield = new getGroup_30_delegate(this.getGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroup_30_delegatefield));
			setGroupsMask_31_delegatefield = new setGroupsMask_31_delegate(this.setGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroupsMask_31_delegatefield));
			getGroupsMask_32_delegatefield = new getGroupsMask_32_delegate(this.getGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroupsMask_32_delegatefield));
			setMeshData_33_delegatefield = new setMeshData_33_delegate(this.setMeshData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMeshData_33_delegatefield));
			getMeshData_34_delegatefield = new getMeshData_34_delegate(this.getMeshData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMeshData_34_delegatefield));
			setSplitPairData_35_delegatefield = new setSplitPairData_35_delegate(this.setSplitPairData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSplitPairData_35_delegatefield));
			getSplitPairData_36_delegatefield = new getSplitPairData_36_delegate(this.getSplitPairData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSplitPairData_36_delegatefield));
			setValidBounds_37_delegatefield = new setValidBounds_37_delegate(this.setValidBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setValidBounds_37_delegatefield));
			getValidBounds_38_delegatefield = new getValidBounds_38_delegate(this.getValidBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getValidBounds_38_delegatefield));
			setPosition_39_delegatefield = new setPosition_39_delegate(this.setPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPosition_39_delegatefield));
			setPositions_40_delegatefield = new setPositions_40_delegate(this.setPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPositions_40_delegatefield));
			setPositions_41_delegatefield = new setPositions_41_delegate(this.setPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPositions_41_delegatefield));
			getPosition_42_delegatefield = new getPosition_42_delegate(this.getPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPosition_42_delegatefield));
			getPositions_43_delegatefield = new getPositions_43_delegate(this.getPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPositions_43_delegatefield));
			getPositions_44_delegatefield = new getPositions_44_delegate(this.getPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPositions_44_delegatefield));
			setVelocity_45_delegatefield = new setVelocity_45_delegate(this.setVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocity_45_delegatefield));
			setVelocities_46_delegatefield = new setVelocities_46_delegate(this.setVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocities_46_delegatefield));
			setVelocities_47_delegatefield = new setVelocities_47_delegate(this.setVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocities_47_delegatefield));
			getVelocity_48_delegatefield = new getVelocity_48_delegate(this.getVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocity_48_delegatefield));
			getVelocities_49_delegatefield = new getVelocities_49_delegate(this.getVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocities_49_delegatefield));
			getVelocities_50_delegatefield = new getVelocities_50_delegate(this.getVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocities_50_delegatefield));
			getNumberOfParticles_51_delegatefield = new getNumberOfParticles_51_delegate(this.getNumberOfParticles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNumberOfParticles_51_delegatefield));
			queryShapePointers_52_delegatefield = new queryShapePointers_52_delegate(this.queryShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(queryShapePointers_52_delegatefield));
			getStateByteSize_53_delegatefield = new getStateByteSize_53_delegate(this.getStateByteSize_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStateByteSize_53_delegatefield));
			getShapePointers_54_delegatefield = new getShapePointers_54_delegate(this.getShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShapePointers_54_delegatefield));
			setShapePointers_55_delegatefield = new setShapePointers_55_delegate(this.setShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setShapePointers_55_delegatefield));
			saveStateToStream_56_delegatefield = new saveStateToStream_56_delegate(this.saveStateToStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveStateToStream_56_delegatefield));
			saveStateToStream_57_delegatefield = new saveStateToStream_57_delegate(this.saveStateToStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveStateToStream_57_delegatefield));
			loadStateFromStream_58_delegatefield = new loadStateFromStream_58_delegate(this.loadStateFromStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadStateFromStream_58_delegatefield));
			setCollisionResponseCoefficient_59_delegatefield = new setCollisionResponseCoefficient_59_delegate(this.setCollisionResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCollisionResponseCoefficient_59_delegatefield));
			getCollisionResponseCoefficient_60_delegatefield = new getCollisionResponseCoefficient_60_delegate(this.getCollisionResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCollisionResponseCoefficient_60_delegatefield));
			setAttachmentResponseCoefficient_61_delegatefield = new setAttachmentResponseCoefficient_61_delegate(this.setAttachmentResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAttachmentResponseCoefficient_61_delegatefield));
			getAttachmentResponseCoefficient_62_delegatefield = new getAttachmentResponseCoefficient_62_delegate(this.getAttachmentResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAttachmentResponseCoefficient_62_delegatefield));
			setFromFluidResponseCoefficient_63_delegatefield = new setFromFluidResponseCoefficient_63_delegate(this.setFromFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFromFluidResponseCoefficient_63_delegatefield));
			getFromFluidResponseCoefficient_64_delegatefield = new getFromFluidResponseCoefficient_64_delegate(this.getFromFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFromFluidResponseCoefficient_64_delegatefield));
			setToFluidResponseCoefficient_65_delegatefield = new setToFluidResponseCoefficient_65_delegate(this.setToFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToFluidResponseCoefficient_65_delegatefield));
			getToFluidResponseCoefficient_66_delegatefield = new getToFluidResponseCoefficient_66_delegate(this.getToFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getToFluidResponseCoefficient_66_delegatefield));
			setExternalAcceleration_67_delegatefield = new setExternalAcceleration_67_delegate(this.setExternalAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setExternalAcceleration_67_delegatefield));
			getExternalAcceleration_68_delegatefield = new getExternalAcceleration_68_delegate(this.getExternalAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getExternalAcceleration_68_delegatefield));
			setMinAdhereVelocity_69_delegatefield = new setMinAdhereVelocity_69_delegate(this.setMinAdhereVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMinAdhereVelocity_69_delegatefield));
			getMinAdhereVelocity_70_delegatefield = new getMinAdhereVelocity_70_delegate(this.getMinAdhereVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMinAdhereVelocity_70_delegatefield));
			isSleeping_71_delegatefield = new isSleeping_71_delegate(this.isSleeping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isSleeping_71_delegatefield));
			getSleepLinearVelocity_72_delegatefield = new getSleepLinearVelocity_72_delegate(this.getSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSleepLinearVelocity_72_delegatefield));
			setSleepLinearVelocity_73_delegatefield = new setSleepLinearVelocity_73_delegate(this.setSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSleepLinearVelocity_73_delegatefield));
			wakeUp_74_delegatefield = new wakeUp_74_delegate(this.wakeUp_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(wakeUp_74_delegatefield));
			putToSleep_75_delegatefield = new putToSleep_75_delegate(this.putToSleep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(putToSleep_75_delegatefield));
			setFlags_76_delegatefield = new setFlags_76_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_76_delegatefield));
			getFlags_77_delegatefield = new getFlags_77_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_77_delegatefield));
			setName_78_delegatefield = new setName_78_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_78_delegatefield));
			addForceAtVertex_79_delegatefield = new addForceAtVertex_79_delegate(this.addForceAtVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtVertex_79_delegatefield));
			addForceAtVertex_80_delegatefield = new addForceAtVertex_80_delegate(this.addForceAtVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtVertex_80_delegatefield));
			addForceAtPos_81_delegatefield = new addForceAtPos_81_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_81_delegatefield));
			addForceAtPos_82_delegatefield = new addForceAtPos_82_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_82_delegatefield));
			overlapAABBTetrahedra_83_delegatefield = new overlapAABBTetrahedra_83_delegate(this.overlapAABBTetrahedra_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTetrahedra_83_delegatefield));
			getScene_84_delegatefield = new getScene_84_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_84_delegatefield));
			getName_85_delegatefield = new getName_85_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_85_delegatefield));
			getCompartment_86_delegatefield = new getCompartment_86_delegate(this.getCompartment_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCompartment_86_delegatefield));
			getForceFieldMaterial_87_delegatefield = new getForceFieldMaterial_87_delegate(this.getForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceFieldMaterial_87_delegatefield));
			setForceFieldMaterial_88_delegatefield = new setForceFieldMaterial_88_delegate(this.setForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setForceFieldMaterial_88_delegatefield));
			return list;
		}
	}
}
