//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxClothDesc : DoxyBindObject
	{
		
		internal NxClothDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The cooked cloth mesh. </summary>
		public NxClothMesh clothMesh
		{
			get
			{
				return NxClothMesh.GetClass(get_NxClothDesc_clothMesh_INVOKE(ClassPointer));
			}
			set
			{
				set_NxClothDesc_clothMesh_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>The global pose of the cloth in the world. </summary>
		public NxMat34 globalPose
		{
			get
			{
				NxMat34 value = get_NxClothDesc_globalPose_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_globalPose_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Thickness of the cloth. </summary>
		public float thickness
		{
			get
			{
				float value = get_NxClothDesc_thickness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_thickness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Density of the cloth (mass per area). </summary>
		public float density
		{
			get
			{
				float value = get_NxClothDesc_density_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_density_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Bending stiffness of the cloth in the range 0 to 1. </summary>
		public float bendingStiffness
		{
			get
			{
				float value = get_NxClothDesc_bendingStiffness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_bendingStiffness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Stretching stiffness of the cloth in the range 0 to 1. </summary>
		public float stretchingStiffness
		{
			get
			{
				float value = get_NxClothDesc_stretchingStiffness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_stretchingStiffness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Spring damping of the cloth in the range 0 to 1. </summary>
		public float dampingCoefficient
		{
			get
			{
				float value = get_NxClothDesc_dampingCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_dampingCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Friction coefficient in the range 0 to 1. </summary>
		public float friction
		{
			get
			{
				float value = get_NxClothDesc_friction_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_friction_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_CLF_PRESSURE is set, this variable defines the volume of air inside the mesh as volume = pressure * restVolume. </summary>
		public float pressure
		{
			get
			{
				float value = get_NxClothDesc_pressure_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_pressure_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_CLF_TEARABLE is set, this variable defines the elongation factor that causes the cloth to tear. </summary>
		public float tearFactor
		{
			get
			{
				float value = get_NxClothDesc_tearFactor_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_tearFactor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from cloth to colliding rigid bodies. </summary>
		public float collisionResponseCoefficient
		{
			get
			{
				float value = get_NxClothDesc_collisionResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_collisionResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from cloth to attached rigid bodies. </summary>
		public float attachmentResponseCoefficient
		{
			get
			{
				float value = get_NxClothDesc_attachmentResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_attachmentResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_CLOTH_ATTACHMENT_TEARABLE is set in the attachment method of NxCloth, this variable defines the elongation factor that causes the attachment to tear. </summary>
		public float attachmentTearFactor
		{
			get
			{
				float value = get_NxClothDesc_attachmentTearFactor_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_attachmentTearFactor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from this cloth to colliding fluids. </summary>
		public float toFluidResponseCoefficient
		{
			get
			{
				float value = get_NxClothDesc_toFluidResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_toFluidResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from colliding fluids to this cloth. </summary>
		public float fromFluidResponseCoefficient
		{
			get
			{
				float value = get_NxClothDesc_fromFluidResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_fromFluidResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the NX_CLF_ADHERE flag is set the cloth moves partially in the frame of the attached actor. </summary>
		public float minAdhereVelocity
		{
			get
			{
				float value = get_NxClothDesc_minAdhereVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_minAdhereVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Number of solver iterations. </summary>
		public uint solverIterations
		{
			get
			{
				uint value = get_NxClothDesc_solverIterations_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_solverIterations_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>External acceleration which affects all non attached particles of the cloth. </summary>
		public NxVec3 externalAcceleration
		{
			get
			{
				NxVec3 value = get_NxClothDesc_externalAcceleration_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_externalAcceleration_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Acceleration which acts normal to the cloth surface at each vertex. </summary>
		public NxVec3 windAcceleration
		{
			get
			{
				NxVec3 value = get_NxClothDesc_windAcceleration_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_windAcceleration_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The cloth wake up counter. </summary>
		public float wakeUpCounter
		{
			get
			{
				float value = get_NxClothDesc_wakeUpCounter_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_wakeUpCounter_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum linear velocity at which cloth can go to sleep. </summary>
		public float sleepLinearVelocity
		{
			get
			{
				float value = get_NxClothDesc_sleepLinearVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_sleepLinearVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The buffers in meshData are used to communicate the dynamic data of the cloth back to the user. </summary>
		public NxMeshData meshData
		{
			get
			{
				return NxMeshData.GetClass(get_NxClothDesc_meshData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxClothDesc_meshData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Sets which collision group this cloth is part of. </summary>
		public ushort collisionGroup
		{
			get
			{
				ushort value = get_NxClothDesc_collisionGroup_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_collisionGroup_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the 128-bit mask used for collision filtering. </summary>
		public NxGroupsMask groupsMask
		{
			get
			{
				return NxGroupsMask.GetClass(get_NxClothDesc_groupsMask_INVOKE(ClassPointer));
			}
			set
			{
				set_NxClothDesc_groupsMask_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Force Field Material Index, index != 0 has to be created. </summary>
		public ushort forceFieldMaterial
		{
			get
			{
				ushort value = get_NxClothDesc_forceFieldMaterial_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_forceFieldMaterial_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the flag NX_CLF_VALIDBOUNDS is set, this variable defines the volume outside of which cloth particle are automatically removed from the simulation. </summary>
		public NxBounds3 validBounds
		{
			get
			{
				return NxBounds3.GetClass(get_NxClothDesc_validBounds_INVOKE(ClassPointer));
			}
			set
			{
				set_NxClothDesc_validBounds_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>This parameter defines the size of grid cells for collision detection. </summary>
		public float relativeGridSpacing
		{
			get
			{
				float value = get_NxClothDesc_relativeGridSpacing_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_relativeGridSpacing_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Flag bits. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxClothDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxCloth::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxClothDesc_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxClothDesc_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxClothDesc_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The compartment to place the cloth in. Must be either a pointer to an NxCompartment of type NX_SCT_CLOTH, or NULL. A NULL compartment means creating NX_CLF_HARDWARE cloth in the first available cloth compartment (a default cloth compartment is created if none exists). Software cloth with a NULL compartment is created in the scene proper. </summary>
		public NxCompartment compartment
		{
			get
			{
				return NxCompartment.GetClass(get_NxClothDesc_compartment_INVOKE(ClassPointer));
			}
			set
			{
				set_NxClothDesc_compartment_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxClothDesc() : 
				base(new_NxClothDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(Re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxClothDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the current settings are valid. </summary>
		public bool isValid()
		{
			return NxClothDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_clothMesh")]
        private extern static void set_NxClothDesc_clothMesh_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_clothMesh")]
        private extern static IntPtr get_NxClothDesc_clothMesh_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_globalPose")]
        private extern static void set_NxClothDesc_globalPose_INVOKE (HandleRef classPointer, NxMat34 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_globalPose")]
        private extern static NxMat34 get_NxClothDesc_globalPose_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_thickness")]
        private extern static void set_NxClothDesc_thickness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_thickness")]
        private extern static System.Single get_NxClothDesc_thickness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_density")]
        private extern static void set_NxClothDesc_density_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_density")]
        private extern static System.Single get_NxClothDesc_density_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_bendingStiffness")]
        private extern static void set_NxClothDesc_bendingStiffness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_bendingStiffness")]
        private extern static System.Single get_NxClothDesc_bendingStiffness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_stretchingStiffness")]
        private extern static void set_NxClothDesc_stretchingStiffness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_stretchingStiffness")]
        private extern static System.Single get_NxClothDesc_stretchingStiffness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_dampingCoefficient")]
        private extern static void set_NxClothDesc_dampingCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_dampingCoefficient")]
        private extern static System.Single get_NxClothDesc_dampingCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_friction")]
        private extern static void set_NxClothDesc_friction_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_friction")]
        private extern static System.Single get_NxClothDesc_friction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_pressure")]
        private extern static void set_NxClothDesc_pressure_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_pressure")]
        private extern static System.Single get_NxClothDesc_pressure_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_tearFactor")]
        private extern static void set_NxClothDesc_tearFactor_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_tearFactor")]
        private extern static System.Single get_NxClothDesc_tearFactor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_collisionResponseCoefficient")]
        private extern static void set_NxClothDesc_collisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_collisionResponseCoefficient")]
        private extern static System.Single get_NxClothDesc_collisionResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_attachmentResponseCoefficient")]
        private extern static void set_NxClothDesc_attachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_attachmentResponseCoefficient")]
        private extern static System.Single get_NxClothDesc_attachmentResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_attachmentTearFactor")]
        private extern static void set_NxClothDesc_attachmentTearFactor_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_attachmentTearFactor")]
        private extern static System.Single get_NxClothDesc_attachmentTearFactor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_toFluidResponseCoefficient")]
        private extern static void set_NxClothDesc_toFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_toFluidResponseCoefficient")]
        private extern static System.Single get_NxClothDesc_toFluidResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_fromFluidResponseCoefficient")]
        private extern static void set_NxClothDesc_fromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_fromFluidResponseCoefficient")]
        private extern static System.Single get_NxClothDesc_fromFluidResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_minAdhereVelocity")]
        private extern static void set_NxClothDesc_minAdhereVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_minAdhereVelocity")]
        private extern static System.Single get_NxClothDesc_minAdhereVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_solverIterations")]
        private extern static void set_NxClothDesc_solverIterations_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_solverIterations")]
        private extern static System.UInt32 get_NxClothDesc_solverIterations_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_externalAcceleration")]
        private extern static void set_NxClothDesc_externalAcceleration_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_externalAcceleration")]
        private extern static NxVec3 get_NxClothDesc_externalAcceleration_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_windAcceleration")]
        private extern static void set_NxClothDesc_windAcceleration_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_windAcceleration")]
        private extern static NxVec3 get_NxClothDesc_windAcceleration_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_wakeUpCounter")]
        private extern static void set_NxClothDesc_wakeUpCounter_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_wakeUpCounter")]
        private extern static System.Single get_NxClothDesc_wakeUpCounter_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_sleepLinearVelocity")]
        private extern static void set_NxClothDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_sleepLinearVelocity")]
        private extern static System.Single get_NxClothDesc_sleepLinearVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_meshData")]
        private extern static void set_NxClothDesc_meshData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_meshData")]
        private extern static IntPtr get_NxClothDesc_meshData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_collisionGroup")]
        private extern static void set_NxClothDesc_collisionGroup_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_collisionGroup")]
        private extern static System.UInt16 get_NxClothDesc_collisionGroup_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_groupsMask")]
        private extern static void set_NxClothDesc_groupsMask_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_groupsMask")]
        private extern static IntPtr get_NxClothDesc_groupsMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_forceFieldMaterial")]
        private extern static void set_NxClothDesc_forceFieldMaterial_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_forceFieldMaterial")]
        private extern static System.UInt16 get_NxClothDesc_forceFieldMaterial_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_validBounds")]
        private extern static void set_NxClothDesc_validBounds_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_validBounds")]
        private extern static IntPtr get_NxClothDesc_validBounds_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_relativeGridSpacing")]
        private extern static void set_NxClothDesc_relativeGridSpacing_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_relativeGridSpacing")]
        private extern static System.Single get_NxClothDesc_relativeGridSpacing_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_flags")]
        private extern static void set_NxClothDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_flags")]
        private extern static System.UInt32 get_NxClothDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_userData")]
        private extern static void set_NxClothDesc_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_userData")]
        private extern static System.IntPtr get_NxClothDesc_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_name")]
        private extern static void set_NxClothDesc_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_name")]
        private extern static System.String get_NxClothDesc_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxClothDesc_compartment")]
        private extern static void set_NxClothDesc_compartment_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxClothDesc_compartment")]
        private extern static IntPtr get_NxClothDesc_compartment_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxClothDesc")]
        private extern static IntPtr new_NxClothDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxClothDesc_setToDefault")]
        private extern static void NxClothDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxClothDesc_isValid")]
        private extern static System.Boolean NxClothDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxClothDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxClothDesc)(obj.Target));
				}
			}
			return new NxClothDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
