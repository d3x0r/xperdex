//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCloth : DoxyBindObject
	{
		
		internal NxCloth(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxCloth_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCloth_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxCloth() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxCloth)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCloth_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCloth_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Saves the cloth descriptor. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object. </param>
		public virtual bool saveToDesc(NxClothDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxClothDesc.GetClass(desc));
		}
		
		delegate bool saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Returns a pointer to the corresponding cloth mesh. </summary>
		public virtual NxClothMesh getClothMesh()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxClothMesh.GetClass(NxCloth_getClothMesh_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getClothMesh_virtual()
		{
			return getClothMesh().ClassPointer.Handle;
		}
		
		delegate IntPtr getClothMesh_1_delegate();
		
		
		
		
		
		
		private getClothMesh_1_delegate getClothMesh_1_delegatefield;
		
		/// <summary>Sets the cloth bending stiffness in the range from 0 to 1. </summary>
		/// <param name="stiffness">The stiffness of this cloth.</param>
		public virtual void setBendingStiffness(float stiffness)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setBendingStiffness_INVOKE(ClassPointer, doSetFunctionPointers, stiffness);
		}
		
		private void setBendingStiffness_virtual(float stiffness)
		{
			setBendingStiffness(stiffness);
		}
		
		delegate void setBendingStiffness_2_delegate(float stiffness);
		
		
		
		
		
		
		private setBendingStiffness_2_delegate setBendingStiffness_2_delegatefield;
		
		/// <summary>Retrieves the cloth bending stiffness. </summary>
		public virtual float getBendingStiffness()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getBendingStiffness_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getBendingStiffness_virtual()
		{
			return getBendingStiffness();
		}
		
		delegate float getBendingStiffness_3_delegate();
		
		
		
		
		
		
		private getBendingStiffness_3_delegate getBendingStiffness_3_delegatefield;
		
		/// <summary>Sets the cloth stretching stiffness in the range from 0 to 1. </summary>
		/// <param name="stiffness">Stiffness of cloth.</param>
		public virtual void setStretchingStiffness(float stiffness)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setStretchingStiffness_INVOKE(ClassPointer, doSetFunctionPointers, stiffness);
		}
		
		private void setStretchingStiffness_virtual(float stiffness)
		{
			setStretchingStiffness(stiffness);
		}
		
		delegate void setStretchingStiffness_4_delegate(float stiffness);
		
		
		
		
		
		
		private setStretchingStiffness_4_delegate setStretchingStiffness_4_delegatefield;
		
		/// <summary>Retrieves the cloth stretching stiffness. </summary>
		public virtual float getStretchingStiffness()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getStretchingStiffness_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getStretchingStiffness_virtual()
		{
			return getStretchingStiffness();
		}
		
		delegate float getStretchingStiffness_5_delegate();
		
		
		
		
		
		
		private getStretchingStiffness_5_delegate getStretchingStiffness_5_delegatefield;
		
		/// <summary>Sets the damping coefficient in the range from 0 to 1. </summary>
		/// <param name="dampingCoefficient">damping coefficient of cloth.</param>
		public virtual void setDampingCoefficient(float dampingCoefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setDampingCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, dampingCoefficient);
		}
		
		private void setDampingCoefficient_virtual(float dampingCoefficient)
		{
			setDampingCoefficient(dampingCoefficient);
		}
		
		delegate void setDampingCoefficient_6_delegate(float dampingCoefficient);
		
		
		
		
		
		
		private setDampingCoefficient_6_delegate setDampingCoefficient_6_delegatefield;
		
		/// <summary>Retrieves the damping coefficient. </summary>
		public virtual float getDampingCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getDampingCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDampingCoefficient_virtual()
		{
			return getDampingCoefficient();
		}
		
		delegate float getDampingCoefficient_7_delegate();
		
		
		
		
		
		
		private getDampingCoefficient_7_delegate getDampingCoefficient_7_delegatefield;
		
		/// <summary>Sets the cloth friction coefficient in the range from 0 to 1. </summary>
		/// <param name="friction">The friction of the cloth.</param>
		public virtual void setFriction(float friction)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setFriction_INVOKE(ClassPointer, doSetFunctionPointers, friction);
		}
		
		private void setFriction_virtual(float friction)
		{
			setFriction(friction);
		}
		
		delegate void setFriction_8_delegate(float friction);
		
		
		
		
		
		
		private setFriction_8_delegate setFriction_8_delegatefield;
		
		/// <summary>Retrieves the cloth friction coefficient. </summary>
		public virtual float getFriction()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getFriction_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getFriction_virtual()
		{
			return getFriction();
		}
		
		delegate float getFriction_9_delegate();
		
		
		
		
		
		
		private getFriction_9_delegate getFriction_9_delegatefield;
		
		/// <summary>Sets the cloth pressure coefficient (must be non negative). </summary>
		/// <param name="pressure">The pressure applied to the cloth.</param>
		public virtual void setPressure(float pressure)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setPressure_INVOKE(ClassPointer, doSetFunctionPointers, pressure);
		}
		
		private void setPressure_virtual(float pressure)
		{
			setPressure(pressure);
		}
		
		delegate void setPressure_10_delegate(float pressure);
		
		
		
		
		
		
		private setPressure_10_delegate setPressure_10_delegatefield;
		
		/// <summary>Retrieves the cloth pressure coefficient. </summary>
		public virtual float getPressure()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getPressure_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getPressure_virtual()
		{
			return getPressure();
		}
		
		delegate float getPressure_11_delegate();
		
		
		
		
		
		
		private getPressure_11_delegate getPressure_11_delegatefield;
		
		/// <summary>Sets the cloth tear factor (must be larger than one). </summary>
		/// <param name="factor">The tear factor for the cloth</param>
		public virtual void setTearFactor(float factor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setTearFactor_INVOKE(ClassPointer, doSetFunctionPointers, factor);
		}
		
		private void setTearFactor_virtual(float factor)
		{
			setTearFactor(factor);
		}
		
		delegate void setTearFactor_12_delegate(float factor);
		
		
		
		
		
		
		private setTearFactor_12_delegate setTearFactor_12_delegatefield;
		
		/// <summary>Retrieves the cloth tear factor. </summary>
		public virtual float getTearFactor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getTearFactor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getTearFactor_virtual()
		{
			return getTearFactor();
		}
		
		delegate float getTearFactor_13_delegate();
		
		
		
		
		
		
		private getTearFactor_13_delegate getTearFactor_13_delegatefield;
		
		/// <summary>Sets the cloth attachment tear factor (must be larger than one). </summary>
		/// <param name="factor">The attachment tear factor for the cloth</param>
		public virtual void setAttachmentTearFactor(float factor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setAttachmentTearFactor_INVOKE(ClassPointer, doSetFunctionPointers, factor);
		}
		
		private void setAttachmentTearFactor_virtual(float factor)
		{
			setAttachmentTearFactor(factor);
		}
		
		delegate void setAttachmentTearFactor_14_delegate(float factor);
		
		
		
		
		
		
		private setAttachmentTearFactor_14_delegate setAttachmentTearFactor_14_delegatefield;
		
		/// <summary>Retrieves the attachment cloth tear factor. </summary>
		public virtual float getAttachmentTearFactor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getAttachmentTearFactor_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAttachmentTearFactor_virtual()
		{
			return getAttachmentTearFactor();
		}
		
		delegate float getAttachmentTearFactor_15_delegate();
		
		
		
		
		
		
		private getAttachmentTearFactor_15_delegate getAttachmentTearFactor_15_delegatefield;
		
		/// <summary>Sets the cloth thickness (must be positive). </summary>
		/// <param name="thickness">The thickness of the cloth.</param>
		public virtual void setThickness(float thickness)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setThickness_INVOKE(ClassPointer, doSetFunctionPointers, thickness);
		}
		
		private void setThickness_virtual(float thickness)
		{
			setThickness(thickness);
		}
		
		delegate void setThickness_16_delegate(float thickness);
		
		
		
		
		
		
		private setThickness_16_delegate setThickness_16_delegatefield;
		
		/// <summary>Gets the cloth thickness. </summary>
		public virtual float getThickness()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getThickness_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getThickness_virtual()
		{
			return getThickness();
		}
		
		delegate float getThickness_17_delegate();
		
		
		
		
		
		
		private getThickness_17_delegate getThickness_17_delegatefield;
		
		/// <summary>Gets the cloth density. </summary>
		public virtual float getDensity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getDensity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getDensity_virtual()
		{
			return getDensity();
		}
		
		delegate float getDensity_18_delegate();
		
		
		
		
		
		
		private getDensity_18_delegate getDensity_18_delegatefield;
		
		/// <summary>Gets the relative grid spacing for the broad phase. The cloth is represented by a set of world aligned cubical cells in broad phase. The size of these cells is determined by multiplying the length of the diagonal of the AABB of the initial cloth size with this constant. </summary>
		public virtual float getRelativeGridSpacing()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getRelativeGridSpacing_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRelativeGridSpacing_virtual()
		{
			return getRelativeGridSpacing();
		}
		
		delegate float getRelativeGridSpacing_19_delegate();
		
		
		
		
		
		
		private getRelativeGridSpacing_19_delegate getRelativeGridSpacing_19_delegatefield;
		
		/// <summary>Retrieves the cloth solver iterations. </summary>
		public virtual uint getSolverIterations()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getSolverIterations_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getSolverIterations_virtual()
		{
			return getSolverIterations();
		}
		
		delegate uint getSolverIterations_20_delegate();
		
		
		
		
		
		
		private getSolverIterations_20_delegate getSolverIterations_20_delegatefield;
		
		/// <summary>Sets the cloth solver iterations. </summary>
		/// <param name="iterations">The new solver iteration count for the cloth.</param>
		public virtual void setSolverIterations(uint iterations)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setSolverIterations_INVOKE(ClassPointer, doSetFunctionPointers, iterations);
		}
		
		private void setSolverIterations_virtual(uint iterations)
		{
			setSolverIterations(iterations);
		}
		
		delegate void setSolverIterations_21_delegate(uint iterations);
		
		
		
		
		
		
		private setSolverIterations_21_delegate setSolverIterations_21_delegatefield;
		
		/// <summary>Returns a world space AABB enclosing all cloth points. </summary>
		/// <param name="bounds">Retrieves the world space bounds.</param>
		public virtual void getWorldBounds(NxBounds3 bounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getWorldBounds_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef));
		}
		
		private void getWorldBounds_virtual(IntPtr bounds)
		{
			getWorldBounds(NxBounds3.GetClass(bounds));
		}
		
		delegate void getWorldBounds_22_delegate(IntPtr bounds);
		
		
		
		
		
		
		private getWorldBounds_22_delegate getWorldBounds_22_delegatefield;
		
		/// <summary>Attaches the cloth to a shape. All cloth points currently inside the shape are attached. </summary>
		/// <param name="shape">Shape to which the cloth should be attached to. </param>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachToShape(NxShape shape, uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachToShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef), attachmentFlags);
		}
		
		private void attachToShape_virtual(IntPtr shape, uint attachmentFlags)
		{
			attachToShape(NxShape.GetClass(shape), attachmentFlags);
		}
		
		delegate void attachToShape_23_delegate(IntPtr shape, uint attachmentFlags);
		
		
		
		
		
		
		private attachToShape_23_delegate attachToShape_23_delegatefield;
		
		/// <summary>Attaches the cloth to all shapes, currently colliding. </summary>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachToCollidingShapes(uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachToCollidingShapes_INVOKE(ClassPointer, doSetFunctionPointers, attachmentFlags);
		}
		
		private void attachToCollidingShapes_virtual(uint attachmentFlags)
		{
			attachToCollidingShapes(attachmentFlags);
		}
		
		delegate void attachToCollidingShapes_24_delegate(uint attachmentFlags);
		
		
		
		
		
		
		private attachToCollidingShapes_24_delegate attachToCollidingShapes_24_delegatefield;
		
		/// <summary>Detaches the cloth from a shape it has been attached to before. </summary>
		/// <param name="shape">Shape from which the cloth should be detached.</param>
		public virtual void detachFromShape(NxShape shape)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_detachFromShape_INVOKE(ClassPointer, doSetFunctionPointers, (shape!=null ? shape.ClassPointer : NullRef));
		}
		
		private void detachFromShape_virtual(IntPtr shape)
		{
			detachFromShape(NxShape.GetClass(shape));
		}
		
		delegate void detachFromShape_25_delegate(IntPtr shape);
		
		
		
		
		
		
		private detachFromShape_25_delegate detachFromShape_25_delegatefield;
		
		/// <summary>Attaches a cloth vertex to a local position within a shape. </summary>
		/// <param name="vertexId">Index of the vertex to attach. </param>
		/// <param name="shape">Shape to attach the vertex to. </param>
		/// <param name="localPos">The position relative to the pose of the shape. </param>
		/// <param name="attachmentFlags">One or two way interaction, tearable or non-tearable</param>
		public virtual void attachVertexToShape(uint vertexId, NxShape shape, ref NxVec3 localPos, uint attachmentFlags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachVertexToShape_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, (shape!=null ? shape.ClassPointer : NullRef), ref localPos, attachmentFlags);
		}
		
		private void attachVertexToShape_virtual(uint vertexId, IntPtr shape, [In()] ref NxVec3 localPos, uint attachmentFlags)
		{
			attachVertexToShape(vertexId, NxShape.GetClass(shape), ref localPos, attachmentFlags);
		}
		
		delegate void attachVertexToShape_26_delegate(uint vertexId, IntPtr shape, [In()] ref NxVec3 localPos, uint attachmentFlags);
		
		
		
		
		
		
		private attachVertexToShape_26_delegate attachVertexToShape_26_delegatefield;
		
		/// <summary>Attaches a cloth vertex to a position in world space. </summary>
		/// <param name="vertexId">Index of the vertex to attach. </param>
		/// <param name="pos">The position in world space.</param>
		public virtual void attachVertexToGlobalPosition(uint vertexId, ref NxVec3 pos)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachVertexToGlobalPosition_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, ref pos);
		}
		
		private void attachVertexToGlobalPosition_virtual(uint vertexId, [In()] ref NxVec3 pos)
		{
			attachVertexToGlobalPosition(vertexId, ref pos);
		}
		
		delegate void attachVertexToGlobalPosition_27_delegate(uint vertexId, [In()] ref NxVec3 pos);
		
		
		
		
		
		
		private attachVertexToGlobalPosition_27_delegate attachVertexToGlobalPosition_27_delegatefield;
		
		/// <summary>Frees a previously attached cloth point. </summary>
		/// <param name="vertexId">Index of the vertex to free.</param>
		public virtual void freeVertex(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_freeVertex_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private void freeVertex_virtual(uint vertexId)
		{
			freeVertex(vertexId);
		}
		
		delegate void freeVertex_28_delegate(uint vertexId);
		
		
		
		
		
		
		private freeVertex_28_delegate freeVertex_28_delegatefield;
		
		/// <summary>Changes the weight of a vertex in the cloth solver for a period of time. </summary>
		/// <param name="vertexId">Index of the vertex. </param>
		/// <param name="expirationTime">Time period where dominance will be active for this vertex. </param>
		/// <param name="dominanceWeight">Dominance weight for this vertex.</param>
		public virtual void dominateVertex(uint vertexId, float expirationTime, float dominanceWeight)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_dominateVertex_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, expirationTime, dominanceWeight);
		}
		
		private void dominateVertex_virtual(uint vertexId, float expirationTime, float dominanceWeight)
		{
			dominateVertex(vertexId, expirationTime, dominanceWeight);
		}
		
		delegate void dominateVertex_29_delegate(uint vertexId, float expirationTime, float dominanceWeight);
		
		
		
		
		
		
		private dominateVertex_29_delegate dominateVertex_29_delegatefield;
		
		/// <summary>Return the attachment status of the given vertex. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxClothVertexAttachmentStatus getVertexAttachmentStatus(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getVertexAttachmentStatus_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxClothVertexAttachmentStatus getVertexAttachmentStatus_virtual(uint vertexId)
		{
			return getVertexAttachmentStatus(vertexId);
		}
		
		delegate NxClothVertexAttachmentStatus getVertexAttachmentStatus_30_delegate(uint vertexId);
		
		
		
		
		
		
		private getVertexAttachmentStatus_30_delegate getVertexAttachmentStatus_30_delegatefield;
		
		/// <summary>Returns the pointer to an attached shape pointer of the given vertex. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxShape getVertexAttachmentShape(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxShape.GetClass(NxCloth_getVertexAttachmentShape_INVOKE(ClassPointer, doSetFunctionPointers, vertexId));
		}
		
		private IntPtr getVertexAttachmentShape_virtual(uint vertexId)
		{
			return getVertexAttachmentShape(vertexId).ClassPointer.Handle;
		}
		
		delegate IntPtr getVertexAttachmentShape_31_delegate(uint vertexId);
		
		
		
		
		
		
		private getVertexAttachmentShape_31_delegate getVertexAttachmentShape_31_delegatefield;
		
		/// <summary>Returns the attachment position of the given vertex. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxVec3 getVertexAttachmentPosition(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getVertexAttachmentPosition_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxVec3 getVertexAttachmentPosition_virtual(uint vertexId)
		{
			return getVertexAttachmentPosition(vertexId);
		}
		
		delegate NxVec3 getVertexAttachmentPosition_32_delegate(uint vertexId);
		
		
		
		
		
		
		private getVertexAttachmentPosition_32_delegate getVertexAttachmentPosition_32_delegatefield;
		
		/// <summary>Attaches the cloth to an actor. </summary>
		/// <param name="actor">The core actor to attach the cloth to. </param>
		/// <param name="impulseThreshold">Threshold for when deformation is allowed. </param>
		/// <param name="penetrationDepth">Amount by which colliding objects are brought closer to the cloth. </param>
		/// <param name="maxDeformationDistance">Maximum deviation of cloth particles from initial position.</param>
		public virtual void attachToCore(NxActor actor, float impulseThreshold, float penetrationDepth, float maxDeformationDistance)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachToCore_INVOKE(ClassPointer, doSetFunctionPointers, (actor!=null ? actor.ClassPointer : NullRef), impulseThreshold, penetrationDepth, maxDeformationDistance);
		}
		
		private void attachToCore_virtual(IntPtr actor, float impulseThreshold, float penetrationDepth, float maxDeformationDistance)
		{
			attachToCore(NxActor.GetClass(actor), impulseThreshold, penetrationDepth, maxDeformationDistance);
		}
		
		delegate void attachToCore_33_delegate(IntPtr actor, float impulseThreshold, float penetrationDepth, float maxDeformationDistance);
		
		
		
		
		
		
		private attachToCore_33_delegate attachToCore_33_delegatefield;
		
		/// <summary>Attaches the cloth to an actor. </summary>
		/// <param name="actor">The core actor to attach the cloth to. </param>
		/// <param name="impulseThreshold">Threshold for when deformation is allowed. </param>
		/// <param name="penetrationDepth">Amount by which colliding objects are brought closer to the cloth. </param>
		/// <param name="maxDeformationDistance">Maximum deviation of cloth particles from initial position.</param>
		public virtual void attachToCore(NxActor actor, float impulseThreshold, float penetrationDepth)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachToCore_1_INVOKE(ClassPointer, doSetFunctionPointers, (actor!=null ? actor.ClassPointer : NullRef), impulseThreshold, penetrationDepth);
		}
		
		private void attachToCore_virtual(IntPtr actor, float impulseThreshold, float penetrationDepth)
		{
			attachToCore(NxActor.GetClass(actor), impulseThreshold, penetrationDepth);
		}
		
		delegate void attachToCore_34_delegate(IntPtr actor, float impulseThreshold, float penetrationDepth);
		
		
		
		
		
		
		private attachToCore_34_delegate attachToCore_34_delegatefield;
		
		/// <summary>Attaches the cloth to an actor. </summary>
		/// <param name="actor">The core actor to attach the cloth to. </param>
		/// <param name="impulseThreshold">Threshold for when deformation is allowed. </param>
		/// <param name="penetrationDepth">Amount by which colliding objects are brought closer to the cloth. </param>
		/// <param name="maxDeformationDistance">Maximum deviation of cloth particles from initial position.</param>
		public virtual void attachToCore(NxActor actor, float impulseThreshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_attachToCore_2_INVOKE(ClassPointer, doSetFunctionPointers, (actor!=null ? actor.ClassPointer : NullRef), impulseThreshold);
		}
		
		private void attachToCore_virtual(IntPtr actor, float impulseThreshold)
		{
			attachToCore(NxActor.GetClass(actor), impulseThreshold);
		}
		
		delegate void attachToCore_35_delegate(IntPtr actor, float impulseThreshold);
		
		
		
		
		
		
		private attachToCore_35_delegate attachToCore_35_delegatefield;
		
		/// <summary>Tears the cloth at a given vertex. </summary>
		/// <param name="vertexId">Index of the vertex to tear. </param>
		/// <param name="normal">The normal of the split plane. </param>
		public virtual bool tearVertex(uint vertexId, ref NxVec3 normal)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_tearVertex_INVOKE(ClassPointer, doSetFunctionPointers, vertexId, ref normal);
		}
		
		private bool tearVertex_virtual(uint vertexId, [In()] ref NxVec3 normal)
		{
			return tearVertex(vertexId, ref normal);
		}
		
		delegate bool tearVertex_36_delegate(uint vertexId, [In()] ref NxVec3 normal);
		
		
		
		
		
		
		private tearVertex_36_delegate tearVertex_36_delegatefield;
		
		/// <summary>Executes a raycast against the cloth. </summary>
		/// <param name="worldRay">The ray in world space. </param>
		/// <param name="hit">The hit position. </param>
		/// <param name="vertexId">Index to the nearest vertex hit by the raycast.</param>
		public virtual bool raycast(NxRay worldRay, ref NxVec3 hit, ref uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_raycast_INVOKE(ClassPointer, doSetFunctionPointers, (worldRay!=null ? worldRay.ClassPointer : NullRef), ref hit, ref vertexId);
		}
		
		private bool raycast_virtual(IntPtr worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref uint vertexId)
		{
			return raycast(NxRay.GetClass(worldRay), ref hit, ref vertexId);
		}
		
		delegate bool raycast_37_delegate(IntPtr worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref uint vertexId);
		
		
		
		
		
		
		private raycast_37_delegate raycast_37_delegatefield;
		
		/// <summary>Sets which collision group this cloth is part of. </summary>
		/// <param name="collisionGroup">The collision group for this cloth.</param>
		public virtual void setGroup(ushort collisionGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setGroup_INVOKE(ClassPointer, doSetFunctionPointers, collisionGroup);
		}
		
		private void setGroup_virtual(ushort collisionGroup)
		{
			setGroup(collisionGroup);
		}
		
		delegate void setGroup_38_delegate(ushort collisionGroup);
		
		
		
		
		
		
		private setGroup_38_delegate setGroup_38_delegatefield;
		
		/// <summary>Retrieves the value set with setGroup(). </summary>
		public virtual ushort getGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getGroup_virtual()
		{
			return getGroup();
		}
		
		delegate ushort getGroup_39_delegate();
		
		
		
		
		
		
		private getGroup_39_delegate getGroup_39_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. </summary>
		/// <param name="groupsMask">The group mask to set for the cloth.</param>
		public virtual void setGroupsMask(NxGroupsMask groupsMask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers, (groupsMask!=null ? groupsMask.ClassPointer : NullRef));
		}
		
		private void setGroupsMask_virtual(IntPtr groupsMask)
		{
			setGroupsMask(NxGroupsMask.GetClass(groupsMask));
		}
		
		delegate void setGroupsMask_40_delegate(IntPtr groupsMask);
		
		
		
		
		
		
		private setGroupsMask_40_delegate setGroupsMask_40_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. </summary>
		public virtual NxGroupsMask getGroupsMask()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxGroupsMask.GetClass(NxCloth_getGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getGroupsMask_virtual()
		{
			return getGroupsMask().ClassPointer.Handle;
		}
		
		delegate IntPtr getGroupsMask_41_delegate();
		
		
		
		
		
		
		private getGroupsMask_41_delegate getGroupsMask_41_delegatefield;
		
		/// <summary>Sets the user buffer wrapper for the cloth mesh. </summary>
		/// <param name="meshData">User buffer wrapper.</param>
		public virtual void setMeshData(NxMeshData meshData)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setMeshData_INVOKE(ClassPointer, doSetFunctionPointers, (meshData!=null ? meshData.ClassPointer : NullRef));
		}
		
		private void setMeshData_virtual(IntPtr meshData)
		{
			setMeshData(NxMeshData.GetClass(meshData));
		}
		
		delegate void setMeshData_42_delegate(IntPtr meshData);
		
		
		
		
		
		
		private setMeshData_42_delegate setMeshData_42_delegatefield;
		
		/// <summary>Returns a copy of the user buffer wrapper for the cloth mesh. </summary>
		public virtual NxMeshData getMeshData()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxMeshData.GetClass(NxCloth_getMeshData_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getMeshData_virtual()
		{
			return getMeshData().ClassPointer.Handle;
		}
		
		delegate IntPtr getMeshData_43_delegate();
		
		
		
		
		
		
		private getMeshData_43_delegate getMeshData_43_delegatefield;
		
		/// <summary>Sets the valid bounds of the cloth in world space. </summary>
		/// <param name="validBounds">The valid bounds.</param>
		public virtual void setValidBounds(NxBounds3 validBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setValidBounds_INVOKE(ClassPointer, doSetFunctionPointers, (validBounds!=null ? validBounds.ClassPointer : NullRef));
		}
		
		private void setValidBounds_virtual(IntPtr validBounds)
		{
			setValidBounds(NxBounds3.GetClass(validBounds));
		}
		
		delegate void setValidBounds_44_delegate(IntPtr validBounds);
		
		
		
		
		
		
		private setValidBounds_44_delegate setValidBounds_44_delegatefield;
		
		/// <summary>Returns the valid bounds of the cloth in world space. </summary>
		/// <param name="validBounds">The valid bounds.</param>
		public virtual void getValidBounds(NxBounds3 validBounds)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getValidBounds_INVOKE(ClassPointer, doSetFunctionPointers, (validBounds!=null ? validBounds.ClassPointer : NullRef));
		}
		
		private void getValidBounds_virtual(IntPtr validBounds)
		{
			getValidBounds(NxBounds3.GetClass(validBounds));
		}
		
		delegate void getValidBounds_45_delegate(IntPtr validBounds);
		
		
		
		
		
		
		private getValidBounds_45_delegate getValidBounds_45_delegatefield;
		
		/// <summary>Sets the position of a particular vertex of the cloth. </summary>
		/// <param name="position">New position of the vertex. </param>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual void setPosition(ref NxVec3 position, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setPosition_INVOKE(ClassPointer, doSetFunctionPointers, ref position, vertexId);
		}
		
		private void setPosition_virtual([In()] ref NxVec3 position, uint vertexId)
		{
			setPosition(ref position, vertexId);
		}
		
		delegate void setPosition_46_delegate([In()] ref NxVec3 position, uint vertexId);
		
		
		
		
		
		
		private setPosition_46_delegate setPosition_46_delegatefield;
		
		/// <summary>Sets the positions of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer containing all positions for the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setPositions(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setPositions_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void setPositions_virtual(System.IntPtr buffer, uint byteStride)
		{
			setPositions(buffer, byteStride);
		}
		
		delegate void setPositions_47_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private setPositions_47_delegate setPositions_47_delegatefield;
		
		/// <summary>Sets the positions of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer containing all positions for the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setPositions(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setPositions_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void setPositions_virtual(System.IntPtr buffer)
		{
			setPositions(buffer);
		}
		
		delegate void setPositions_48_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private setPositions_48_delegate setPositions_48_delegatefield;
		
		/// <summary>Gets the position of a particular vertex of the cloth. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxVec3 getPosition(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getPosition_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxVec3 getPosition_virtual(uint vertexId)
		{
			return getPosition(vertexId);
		}
		
		delegate NxVec3 getPosition_49_delegate(uint vertexId);
		
		
		
		
		
		
		private getPosition_49_delegate getPosition_49_delegatefield;
		
		/// <summary>Gets the positions of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer to hold all positions of the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getPositions(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getPositions_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void getPositions_virtual(System.IntPtr buffer, uint byteStride)
		{
			getPositions(buffer, byteStride);
		}
		
		delegate void getPositions_50_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private getPositions_50_delegate getPositions_50_delegatefield;
		
		/// <summary>Gets the positions of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer to hold all positions of the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the position vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getPositions(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getPositions_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void getPositions_virtual(System.IntPtr buffer)
		{
			getPositions(buffer);
		}
		
		delegate void getPositions_51_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private getPositions_51_delegate getPositions_51_delegatefield;
		
		/// <summary>Sets the velocity of a particular vertex of the cloth. </summary>
		/// <param name="position">New velocity of the vertex. </param>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual void setVelocity(ref NxVec3 velocity, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setVelocity_INVOKE(ClassPointer, doSetFunctionPointers, ref velocity, vertexId);
		}
		
		private void setVelocity_virtual([In()] ref NxVec3 velocity, uint vertexId)
		{
			setVelocity(ref velocity, vertexId);
		}
		
		delegate void setVelocity_52_delegate([In()] ref NxVec3 velocity, uint vertexId);
		
		
		
		
		
		
		private setVelocity_52_delegate setVelocity_52_delegatefield;
		
		/// <summary>Sets the velocities of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer containing all velocities for the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setVelocities(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setVelocities_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void setVelocities_virtual(System.IntPtr buffer, uint byteStride)
		{
			setVelocities(buffer, byteStride);
		}
		
		delegate void setVelocities_53_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private setVelocities_53_delegate setVelocities_53_delegatefield;
		
		/// <summary>Sets the velocities of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer containing all velocities for the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void setVelocities(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setVelocities_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void setVelocities_virtual(System.IntPtr buffer)
		{
			setVelocities(buffer);
		}
		
		delegate void setVelocities_54_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private setVelocities_54_delegate setVelocities_54_delegatefield;
		
		/// <summary>Gets the velocity of a particular vertex of the cloth. </summary>
		/// <param name="vertexId">Index of the vertex.</param>
		public virtual NxVec3 getVelocity(uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getVelocity_INVOKE(ClassPointer, doSetFunctionPointers, vertexId);
		}
		
		private NxVec3 getVelocity_virtual(uint vertexId)
		{
			return getVelocity(vertexId);
		}
		
		delegate NxVec3 getVelocity_55_delegate(uint vertexId);
		
		
		
		
		
		
		private getVelocity_55_delegate getVelocity_55_delegatefield;
		
		/// <summary>Gets the velocities of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer to hold all velocities of the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getVelocities(System.IntPtr buffer, uint byteStride)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getVelocities_INVOKE(ClassPointer, doSetFunctionPointers, buffer, byteStride);
		}
		
		private void getVelocities_virtual(System.IntPtr buffer, uint byteStride)
		{
			getVelocities(buffer, byteStride);
		}
		
		delegate void getVelocities_56_delegate(System.IntPtr buffer, uint byteStride);
		
		
		
		
		
		
		private getVelocities_56_delegate getVelocities_56_delegatefield;
		
		/// <summary>Gets the velocities of the cloth. </summary>
		/// <param name="buffer">The user supplied buffer to hold all velocities of the cloth. </param>
		/// <param name="byteStride">The stride in bytes between the velocity vectors in the buffer. Default is size of NxVec3.</param>
		public virtual void getVelocities(System.IntPtr buffer)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getVelocities_1_INVOKE(ClassPointer, doSetFunctionPointers, buffer);
		}
		
		private void getVelocities_virtual(System.IntPtr buffer)
		{
			getVelocities(buffer);
		}
		
		delegate void getVelocities_57_delegate(System.IntPtr buffer);
		
		
		
		
		
		
		private getVelocities_57_delegate getVelocities_57_delegatefield;
		
		/// <summary>Gets the number of cloth particles. </summary>
		public virtual uint getNumberOfParticles()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getNumberOfParticles_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNumberOfParticles_virtual()
		{
			return getNumberOfParticles();
		}
		
		delegate uint getNumberOfParticles_58_delegate();
		
		
		
		
		
		
		private getNumberOfParticles_58_delegate getNumberOfParticles_58_delegatefield;
		
		/// <summary>Queries the cloth for the currently interacting shapes. Must be called prior to saveStateToStream in order for attachments and collisons to be saved. </summary>
		public virtual uint queryShapePointers()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_queryShapePointers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint queryShapePointers_virtual()
		{
			return queryShapePointers();
		}
		
		delegate uint queryShapePointers_59_delegate();
		
		
		
		
		
		
		private queryShapePointers_59_delegate queryShapePointers_59_delegatefield;
		
		/// <summary>Gets the byte size of the current cloth state. </summary>
		public virtual uint getStateByteSize()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getStateByteSize_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getStateByteSize_virtual()
		{
			return getStateByteSize();
		}
		
		delegate uint getStateByteSize_60_delegate();
		
		
		
		
		
		
		private getStateByteSize_60_delegate getStateByteSize_60_delegatefield;
		
		/// <summary>Saves pointers to the currently interacting shapes to memory. </summary>
		/// <param name="shapePointers">The user supplied array to hold the shape pointers. </param>
		/// <param name="flags">The optional user supplied array to hold the cloth attachment flags for each attached shape</param>
		public virtual void getShapePointers(DoxyBindArray<NxShape> shapePointers, uint[] flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getShapePointers_INVOKE(ClassPointer, doSetFunctionPointers, shapePointers, flags);
		}
		
		private void getShapePointers_virtual(IntPtr[] shapePointers, uint[] flags)
		{
			getShapePointers(shapePointers, flags);
		}
		
		delegate void getShapePointers_61_delegate(IntPtr[] shapePointers, uint[] flags);
		
		
		
		
		
		
		private getShapePointers_61_delegate getShapePointers_61_delegatefield;
		
		/// <summary>Saves pointers to the currently interacting shapes to memory. </summary>
		/// <param name="shapePointers">The user supplied array to hold the shape pointers. </param>
		/// <param name="flags">The optional user supplied array to hold the cloth attachment flags for each attached shape</param>
		public virtual void getShapePointers(DoxyBindArray<NxShape> shapePointers)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_getShapePointers_1_INVOKE(ClassPointer, doSetFunctionPointers, shapePointers);
		}
		
		private void getShapePointers_virtual(IntPtr[] shapePointers)
		{
			getShapePointers(shapePointers);
		}
		
		delegate void getShapePointers_62_delegate(IntPtr[] shapePointers);
		
		
		
		
		
		
		private getShapePointers_62_delegate getShapePointers_62_delegatefield;
		
		/// <summary>Loads pointers to the currently interacting shapes from memory. </summary>
		/// <param name="shapePointers">The user supplied array that holds the shape pointers. Must be in the exact same order as the shapes were retrieved by getShapePointers. </param>
		/// <param name="numShapes">The size of the supplied array.</param>
		public virtual void setShapePointers(DoxyBindArray<NxShape> shapePointers, uint numShapes)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setShapePointers_INVOKE(ClassPointer, doSetFunctionPointers, shapePointers, numShapes);
		}
		
		private void setShapePointers_virtual(IntPtr[] shapePointers, uint numShapes)
		{
			setShapePointers(shapePointers, numShapes);
		}
		
		delegate void setShapePointers_63_delegate(IntPtr[] shapePointers, uint numShapes);
		
		
		
		
		
		
		private setShapePointers_63_delegate setShapePointers_63_delegatefield;
		
		/// <summary>Saves the current cloth state to a stream. </summary>
		/// <param name="stream">The user supplied stream to hold the cloth state. </param>
		/// <param name="permute">If true, the order of the vertices output will correspond to that of the associated NxClothMesh's saveToDesc mehod; if false (the default), it will correspond to the original NxClothMesh descriptor used to create the mesh. These may differ due to cooking.</param>
		public virtual void saveStateToStream(NxStream stream, bool permute)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_saveStateToStream_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef), permute);
		}
		
		private void saveStateToStream_virtual(IntPtr stream, bool permute)
		{
			saveStateToStream(NxStream.GetClass(stream), permute);
		}
		
		delegate void saveStateToStream_64_delegate(IntPtr stream, bool permute);
		
		
		
		
		
		
		private saveStateToStream_64_delegate saveStateToStream_64_delegatefield;
		
		/// <summary>Saves the current cloth state to a stream. </summary>
		/// <param name="stream">The user supplied stream to hold the cloth state. </param>
		/// <param name="permute">If true, the order of the vertices output will correspond to that of the associated NxClothMesh's saveToDesc mehod; if false (the default), it will correspond to the original NxClothMesh descriptor used to create the mesh. These may differ due to cooking.</param>
		public virtual void saveStateToStream(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_saveStateToStream_1_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private void saveStateToStream_virtual(IntPtr stream)
		{
			saveStateToStream(NxStream.GetClass(stream));
		}
		
		delegate void saveStateToStream_65_delegate(IntPtr stream);
		
		
		
		
		
		
		private saveStateToStream_65_delegate saveStateToStream_65_delegatefield;
		
		/// <summary>Loads the current cloth state from a stream. </summary>
		/// <param name="stream">The user supplied stream that holds the cloth state.</param>
		public virtual void loadStateFromStream(NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_loadStateFromStream_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private void loadStateFromStream_virtual(IntPtr stream)
		{
			loadStateFromStream(NxStream.GetClass(stream));
		}
		
		delegate void loadStateFromStream_66_delegate(IntPtr stream);
		
		
		
		
		
		
		private loadStateFromStream_66_delegate loadStateFromStream_66_delegatefield;
		
		/// <summary>Sets the collision response coefficient. </summary>
		/// <param name="coefficient">The collision response coefficient (0 or greater).</param>
		public virtual void setCollisionResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setCollisionResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setCollisionResponseCoefficient_virtual(float coefficient)
		{
			setCollisionResponseCoefficient(coefficient);
		}
		
		delegate void setCollisionResponseCoefficient_67_delegate(float coefficient);
		
		
		
		
		
		
		private setCollisionResponseCoefficient_67_delegate setCollisionResponseCoefficient_67_delegatefield;
		
		/// <summary>Retrieves the collision response coefficient. </summary>
		public virtual float getCollisionResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getCollisionResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getCollisionResponseCoefficient_virtual()
		{
			return getCollisionResponseCoefficient();
		}
		
		delegate float getCollisionResponseCoefficient_68_delegate();
		
		
		
		
		
		
		private getCollisionResponseCoefficient_68_delegate getCollisionResponseCoefficient_68_delegatefield;
		
		/// <summary>Sets the attachment response coefficient. </summary>
		/// <param name="coefficient">The attachment response coefficient in the range from 0 to 1.</param>
		public virtual void setAttachmentResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setAttachmentResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setAttachmentResponseCoefficient_virtual(float coefficient)
		{
			setAttachmentResponseCoefficient(coefficient);
		}
		
		delegate void setAttachmentResponseCoefficient_69_delegate(float coefficient);
		
		
		
		
		
		
		private setAttachmentResponseCoefficient_69_delegate setAttachmentResponseCoefficient_69_delegatefield;
		
		/// <summary>Retrieves the attachment response coefficient. </summary>
		public virtual float getAttachmentResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getAttachmentResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAttachmentResponseCoefficient_virtual()
		{
			return getAttachmentResponseCoefficient();
		}
		
		delegate float getAttachmentResponseCoefficient_70_delegate();
		
		
		
		
		
		
		private getAttachmentResponseCoefficient_70_delegate getAttachmentResponseCoefficient_70_delegatefield;
		
		/// <summary>Sets the response coefficient for collisions from fluids to this cloth. </summary>
		/// <param name="coefficient">The response coefficient</param>
		public virtual void setFromFluidResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setFromFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setFromFluidResponseCoefficient_virtual(float coefficient)
		{
			setFromFluidResponseCoefficient(coefficient);
		}
		
		delegate void setFromFluidResponseCoefficient_71_delegate(float coefficient);
		
		
		
		
		
		
		private setFromFluidResponseCoefficient_71_delegate setFromFluidResponseCoefficient_71_delegatefield;
		
		/// <summary>Retrieves response coefficient for collisions from fluids to this cloth. </summary>
		public virtual float getFromFluidResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getFromFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getFromFluidResponseCoefficient_virtual()
		{
			return getFromFluidResponseCoefficient();
		}
		
		delegate float getFromFluidResponseCoefficient_72_delegate();
		
		
		
		
		
		
		private getFromFluidResponseCoefficient_72_delegate getFromFluidResponseCoefficient_72_delegatefield;
		
		/// <summary>Sets the response coefficient for collisions from this cloth to fluids. </summary>
		/// <param name="coefficient">The response coefficient</param>
		public virtual void setToFluidResponseCoefficient(float coefficient)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setToFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers, coefficient);
		}
		
		private void setToFluidResponseCoefficient_virtual(float coefficient)
		{
			setToFluidResponseCoefficient(coefficient);
		}
		
		delegate void setToFluidResponseCoefficient_73_delegate(float coefficient);
		
		
		
		
		
		
		private setToFluidResponseCoefficient_73_delegate setToFluidResponseCoefficient_73_delegatefield;
		
		/// <summary>Retrieves response coefficient for collisions from this cloth to fluids. </summary>
		public virtual float getToFluidResponseCoefficient()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getToFluidResponseCoefficient_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getToFluidResponseCoefficient_virtual()
		{
			return getToFluidResponseCoefficient();
		}
		
		delegate float getToFluidResponseCoefficient_74_delegate();
		
		
		
		
		
		
		private getToFluidResponseCoefficient_74_delegate getToFluidResponseCoefficient_74_delegatefield;
		
		/// <summary>Sets an external acceleration which affects all non attached particles of the cloth. </summary>
		/// <param name="acceleration">The acceleration vector (unit length / s^2)</param>
		public virtual void setExternalAcceleration(NxVec3 acceleration)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setExternalAcceleration_INVOKE(ClassPointer, doSetFunctionPointers, acceleration);
		}
		
		private void setExternalAcceleration_virtual(NxVec3 acceleration)
		{
			setExternalAcceleration(acceleration);
		}
		
		delegate void setExternalAcceleration_75_delegate(NxVec3 acceleration);
		
		
		
		
		
		
		private setExternalAcceleration_75_delegate setExternalAcceleration_75_delegatefield;
		
		/// <summary>Retrieves the external acceleration which affects all non attached particles of the cloth. </summary>
		public virtual NxVec3 getExternalAcceleration()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getExternalAcceleration_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getExternalAcceleration_virtual()
		{
			return getExternalAcceleration();
		}
		
		delegate NxVec3 getExternalAcceleration_76_delegate();
		
		
		
		
		
		
		private getExternalAcceleration_76_delegate getExternalAcceleration_76_delegatefield;
		
		/// <summary>If the NX_CLF_ADHERE flag is set the cloth moves partially in the frame of the attached actor. </summary>
		/// <param name="velocity">The minimal velocity for cloth to adhere (unit length / s)</param>
		public virtual void setMinAdhereVelocity(float velocity)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setMinAdhereVelocity_INVOKE(ClassPointer, doSetFunctionPointers, velocity);
		}
		
		private void setMinAdhereVelocity_virtual(float velocity)
		{
			setMinAdhereVelocity(velocity);
		}
		
		delegate void setMinAdhereVelocity_77_delegate(float velocity);
		
		
		
		
		
		
		private setMinAdhereVelocity_77_delegate setMinAdhereVelocity_77_delegatefield;
		
		/// <summary>If the NX_CLF_ADHERE flag is set the cloth moves partially in the frame of the attached actor. </summary>
		public virtual float getMinAdhereVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getMinAdhereVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getMinAdhereVelocity_virtual()
		{
			return getMinAdhereVelocity();
		}
		
		delegate float getMinAdhereVelocity_78_delegate();
		
		
		
		
		
		
		private getMinAdhereVelocity_78_delegate getMinAdhereVelocity_78_delegatefield;
		
		/// <summary>Sets an acceleration acting normal to the cloth surface at each vertex. </summary>
		/// <param name="acceleration">The acceleration vector (unit length / s^2)</param>
		public virtual void setWindAcceleration(NxVec3 acceleration)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setWindAcceleration_INVOKE(ClassPointer, doSetFunctionPointers, acceleration);
		}
		
		private void setWindAcceleration_virtual(NxVec3 acceleration)
		{
			setWindAcceleration(acceleration);
		}
		
		delegate void setWindAcceleration_79_delegate(NxVec3 acceleration);
		
		
		
		
		
		
		private setWindAcceleration_79_delegate setWindAcceleration_79_delegatefield;
		
		/// <summary>Retrieves the acceleration acting normal to the cloth surface at each vertex. </summary>
		public virtual NxVec3 getWindAcceleration()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getWindAcceleration_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3 getWindAcceleration_virtual()
		{
			return getWindAcceleration();
		}
		
		delegate NxVec3 getWindAcceleration_80_delegate();
		
		
		
		
		
		
		private getWindAcceleration_80_delegate getWindAcceleration_80_delegatefield;
		
		/// <summary>Returns true if this cloth is sleeping. </summary>
		public virtual bool isSleeping()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_isSleeping_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isSleeping_virtual()
		{
			return isSleeping();
		}
		
		delegate bool isSleeping_81_delegate();
		
		
		
		
		
		
		private isSleeping_81_delegate isSleeping_81_delegatefield;
		
		/// <summary>Returns the linear velocity below which a cloth may go to sleep. </summary>
		public virtual float getSleepLinearVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getSleepLinearVelocity_virtual()
		{
			return getSleepLinearVelocity();
		}
		
		delegate float getSleepLinearVelocity_82_delegate();
		
		
		
		
		
		
		private getSleepLinearVelocity_82_delegate getSleepLinearVelocity_82_delegatefield;
		
		/// <summary>Sets the linear velocity below which a cloth may go to sleep. </summary>
		/// <param name="threshold">Linear velocity below which a cloth may sleep. Range: (0,inf]</param>
		public virtual void setSleepLinearVelocity(float threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setSleepLinearVelocity_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setSleepLinearVelocity_virtual(float threshold)
		{
			setSleepLinearVelocity(threshold);
		}
		
		delegate void setSleepLinearVelocity_83_delegate(float threshold);
		
		
		
		
		
		
		private setSleepLinearVelocity_83_delegate setSleepLinearVelocity_83_delegatefield;
		
		/// <summary>Wakes up the cloth if it is sleeping. </summary>
		/// <param name="wakeCounterValue">New sleep counter value. Range: [0,inf]</param>
		public virtual void wakeUp(float wakeCounterValue)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_wakeUp_INVOKE(ClassPointer, doSetFunctionPointers, wakeCounterValue);
		}
		
		private void wakeUp_virtual(float wakeCounterValue)
		{
			wakeUp(wakeCounterValue);
		}
		
		delegate void wakeUp_84_delegate(float wakeCounterValue);
		
		
		
		
		
		
		private wakeUp_84_delegate wakeUp_84_delegatefield;
		
		/// <summary>Forces the cloth to sleep. </summary>
		public virtual void putToSleep()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_putToSleep_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void putToSleep_virtual()
		{
			putToSleep();
		}
		
		delegate void putToSleep_85_delegate();
		
		
		
		
		
		
		private putToSleep_85_delegate putToSleep_85_delegatefield;
		
		/// <summary>Sets the flags, a combination of the bits defined by the enum NxClothFlag. </summary>
		/// <param name="flags">NxClothFlag combination.</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_86_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_86_delegate setFlags_86_delegatefield;
		
		/// <summary>Retrieves the flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_87_delegate();
		
		
		
		
		
		
		private getFlags_87_delegate getFlags_87_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_88_delegate(string name);
		
		
		
		
		
		
		private setName_88_delegate setName_88_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, to a particular vertex of the cloth. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="vertexId">Number of the vertex to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE)</param>
		public virtual void addForceAtVertex(ref NxVec3 force, uint vertexId, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addForceAtVertex_INVOKE(ClassPointer, doSetFunctionPointers, ref force, vertexId, mode);
		}
		
		private void addForceAtVertex_virtual([In()] ref NxVec3 force, uint vertexId, NxForceMode mode)
		{
			addForceAtVertex(ref force, vertexId, mode);
		}
		
		delegate void addForceAtVertex_89_delegate([In()] ref NxVec3 force, uint vertexId, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtVertex_89_delegate addForceAtVertex_89_delegatefield;
		
		/// <summary>Applies a force (or impulse) defined in the global coordinate frame, to a particular vertex of the cloth. </summary>
		/// <param name="force">Force/impulse to add, defined in the global frame. Range: force vector </param>
		/// <param name="vertexId">Number of the vertex to add the force at. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE)</param>
		public virtual void addForceAtVertex(ref NxVec3 force, uint vertexId)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addForceAtVertex_1_INVOKE(ClassPointer, doSetFunctionPointers, ref force, vertexId);
		}
		
		private void addForceAtVertex_virtual([In()] ref NxVec3 force, uint vertexId)
		{
			addForceAtVertex(ref force, vertexId);
		}
		
		delegate void addForceAtVertex_90_delegate([In()] ref NxVec3 force, uint vertexId);
		
		
		
		
		
		
		private addForceAtVertex_90_delegate addForceAtVertex_90_delegatefield;
		
		/// <summary>Applies a radial force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="magnitude">Magnitude of the force/impulse to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addForceAtPos(ref NxVec3 position, float magnitude, float radius, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addForceAtPos_INVOKE(ClassPointer, doSetFunctionPointers, ref position, magnitude, radius, mode);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 position, float magnitude, float radius, NxForceMode mode)
		{
			addForceAtPos(ref position, magnitude, radius, mode);
		}
		
		delegate void addForceAtPos_91_delegate([In()] ref NxVec3 position, float magnitude, float radius, NxForceMode mode);
		
		
		
		
		
		
		private addForceAtPos_91_delegate addForceAtPos_91_delegatefield;
		
		/// <summary>Applies a radial force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="magnitude">Magnitude of the force/impulse to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addForceAtPos(ref NxVec3 position, float magnitude, float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addForceAtPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref position, magnitude, radius);
		}
		
		private void addForceAtPos_virtual([In()] ref NxVec3 position, float magnitude, float radius)
		{
			addForceAtPos(ref position, magnitude, radius);
		}
		
		delegate void addForceAtPos_92_delegate([In()] ref NxVec3 position, float magnitude, float radius);
		
		
		
		
		
		
		private addForceAtPos_92_delegate addForceAtPos_92_delegatefield;
		
		/// <summary>Applies a directed force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="force">Force to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addDirectedForceAtPos(ref NxVec3 position, ref NxVec3 force, float radius, NxForceMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addDirectedForceAtPos_INVOKE(ClassPointer, doSetFunctionPointers, ref position, ref force, radius, mode);
		}
		
		private void addDirectedForceAtPos_virtual([In()] ref NxVec3 position, [In()] ref NxVec3 force, float radius, NxForceMode mode)
		{
			addDirectedForceAtPos(ref position, ref force, radius, mode);
		}
		
		delegate void addDirectedForceAtPos_93_delegate([In()] ref NxVec3 position, [In()] ref NxVec3 force, float radius, NxForceMode mode);
		
		
		
		
		
		
		private addDirectedForceAtPos_93_delegate addDirectedForceAtPos_93_delegatefield;
		
		/// <summary>Applies a directed force (or impulse) at a particular position. All vertices within radius will be affected with a quadratic drop-off. </summary>
		/// <param name="position">Position to apply force at. </param>
		/// <param name="force">Force to apply. </param>
		/// <param name="radius">The sphere radius in which particles will be affected. Range: position vector </param>
		/// <param name="mode">The mode to use when applying the force/impulse (see NxForceMode, supported modes are NX_FORCE, NX_IMPULSE, NX_ACCELERATION, NX_VELOCITY_CHANGE).</param>
		public virtual void addDirectedForceAtPos(ref NxVec3 position, ref NxVec3 force, float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_addDirectedForceAtPos_1_INVOKE(ClassPointer, doSetFunctionPointers, ref position, ref force, radius);
		}
		
		private void addDirectedForceAtPos_virtual([In()] ref NxVec3 position, [In()] ref NxVec3 force, float radius)
		{
			addDirectedForceAtPos(ref position, ref force, radius);
		}
		
		delegate void addDirectedForceAtPos_94_delegate([In()] ref NxVec3 position, [In()] ref NxVec3 force, float radius);
		
		
		
		
		
		
		private addDirectedForceAtPos_94_delegate addDirectedForceAtPos_94_delegatefield;
		
		/// <summary>Finds triangles touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against in world space. Range: See NxBounds3</param>
		/// <param name="nb">Retrieves the number of triangle indices touching the AABB. </param>
		/// <param name="indices">Returns an array of touching triangle indices. The triangle indices correspond to the triangles referenced to by NxClothDesc.meshdata (NxMeshData). Triangle i has the vertices 3i, 3i+1 and 3i+2 in the array NxMeshData.indicesBegin. </param>
		public virtual bool overlapAABBTriangles(NxBounds3 bounds, ref uint nb, ref uint[] indices)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_overlapAABBTriangles_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), ref nb, ref indices);
		}
		
		private bool overlapAABBTriangles_virtual(IntPtr bounds, [In()] [Out()] ref uint nb, [In()] ref uint[] indices)
		{
			return overlapAABBTriangles(NxBounds3.GetClass(bounds), ref nb, ref indices);
		}
		
		delegate bool overlapAABBTriangles_95_delegate(IntPtr bounds, [In()] [Out()] ref uint nb, [In()] ref uint[] indices);
		
		
		
		
		
		
		private overlapAABBTriangles_95_delegate overlapAABBTriangles_95_delegatefield;
		
		/// <summary>Retrieves the scene which this cloth belongs to. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxCloth_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_96_delegate();
		
		
		
		
		
		
		private getScene_96_delegate getScene_96_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_97_delegate();
		
		
		
		
		
		
		private getName_97_delegate getName_97_delegatefield;
		
		/// <summary>Retrieves the cloth's simulation compartment, as specified by the user at creation time. </summary>
		public virtual NxCompartment getCompartment()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment.GetClass(NxCloth_getCompartment_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getCompartment_virtual()
		{
			return getCompartment().ClassPointer.Handle;
		}
		
		delegate IntPtr getCompartment_98_delegate();
		
		
		
		
		
		
		private getCompartment_98_delegate getCompartment_98_delegatefield;
		
		/// <summary>Get the PPU simulation time. </summary>
		public virtual uint getPPUTime()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getPPUTime_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getPPUTime_virtual()
		{
			return getPPUTime();
		}
		
		delegate uint getPPUTime_99_delegate();
		
		
		
		
		
		
		private getPPUTime_99_delegate getPPUTime_99_delegatefield;
		
		/// <summary>Retrieves the actor's force field material index, default index is 0. </summary>
		public virtual ushort getForceFieldMaterial()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCloth_getForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getForceFieldMaterial_virtual()
		{
			return getForceFieldMaterial();
		}
		
		delegate ushort getForceFieldMaterial_100_delegate();
		
		
		
		
		
		
		private getForceFieldMaterial_100_delegate getForceFieldMaterial_100_delegatefield;
		
		/// <summary>Sets the actor's force field material index, default index is 0. </summary>
		public virtual void setForceFieldMaterial(ushort unknown7)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCloth_setForceFieldMaterial_INVOKE(ClassPointer, doSetFunctionPointers, unknown7);
		}
		
		private void setForceFieldMaterial_virtual(ushort unknown7)
		{
			setForceFieldMaterial(unknown7);
		}
		
		delegate void setForceFieldMaterial_101_delegate(ushort unknown7);
		
		
		
		
		
		
		private setForceFieldMaterial_101_delegate setForceFieldMaterial_101_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCloth_userData")]
        private extern static void set_NxCloth_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCloth_userData")]
        private extern static System.IntPtr get_NxCloth_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCloth")]
        private extern static IntPtr new_NxCloth_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_saveToDesc")]
        private extern static System.Boolean NxCloth_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getClothMesh")]
        private extern static IntPtr NxCloth_getClothMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setBendingStiffness")]
        private extern static void NxCloth_setBendingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single stiffness);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getBendingStiffness")]
        private extern static System.Single NxCloth_getBendingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setStretchingStiffness")]
        private extern static void NxCloth_setStretchingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single stiffness);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getStretchingStiffness")]
        private extern static System.Single NxCloth_getStretchingStiffness_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setDampingCoefficient")]
        private extern static void NxCloth_setDampingCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single dampingCoefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getDampingCoefficient")]
        private extern static System.Single NxCloth_getDampingCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setFriction")]
        private extern static void NxCloth_setFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single friction);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getFriction")]
        private extern static System.Single NxCloth_getFriction_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setPressure")]
        private extern static void NxCloth_setPressure_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single pressure);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getPressure")]
        private extern static System.Single NxCloth_getPressure_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setTearFactor")]
        private extern static void NxCloth_setTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single factor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getTearFactor")]
        private extern static System.Single NxCloth_getTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setAttachmentTearFactor")]
        private extern static void NxCloth_setAttachmentTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single factor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getAttachmentTearFactor")]
        private extern static System.Single NxCloth_getAttachmentTearFactor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setThickness")]
        private extern static void NxCloth_setThickness_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single thickness);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getThickness")]
        private extern static System.Single NxCloth_getThickness_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getDensity")]
        private extern static System.Single NxCloth_getDensity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getRelativeGridSpacing")]
        private extern static System.Single NxCloth_getRelativeGridSpacing_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getSolverIterations")]
        private extern static System.UInt32 NxCloth_getSolverIterations_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setSolverIterations")]
        private extern static void NxCloth_setSolverIterations_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 iterations);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getWorldBounds")]
        private extern static void NxCloth_getWorldBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachToShape")]
        private extern static void NxCloth_attachToShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachToCollidingShapes")]
        private extern static void NxCloth_attachToCollidingShapes_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_detachFromShape")]
        private extern static void NxCloth_detachFromShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef shape);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachVertexToShape")]
        private extern static void NxCloth_attachVertexToShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, HandleRef shape, [In()] ref NxVec3 localPos, System.UInt32 attachmentFlags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachVertexToGlobalPosition")]
        private extern static void NxCloth_attachVertexToGlobalPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, [In()] ref NxVec3 pos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_freeVertex")]
        private extern static void NxCloth_freeVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_dominateVertex")]
        private extern static void NxCloth_dominateVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, System.Single expirationTime, System.Single dominanceWeight);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVertexAttachmentStatus")]
        private extern static NxClothVertexAttachmentStatus NxCloth_getVertexAttachmentStatus_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVertexAttachmentShape")]
        private extern static IntPtr NxCloth_getVertexAttachmentShape_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVertexAttachmentPosition")]
        private extern static NxVec3 NxCloth_getVertexAttachmentPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachToCore")]
        private extern static void NxCloth_attachToCore_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef actor, System.Single impulseThreshold, System.Single penetrationDepth, System.Single maxDeformationDistance);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachToCore_1")]
        private extern static void NxCloth_attachToCore_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef actor, System.Single impulseThreshold, System.Single penetrationDepth);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_attachToCore_2")]
        private extern static void NxCloth_attachToCore_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef actor, System.Single impulseThreshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_tearVertex")]
        private extern static System.Boolean NxCloth_tearVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId, [In()] ref NxVec3 normal);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_raycast")]
        private extern static System.Boolean NxCloth_raycast_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldRay, [In()] [Out()] ref NxVec3 hit, [In()] [Out()] ref System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setGroup")]
        private extern static void NxCloth_setGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 collisionGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getGroup")]
        private extern static System.UInt16 NxCloth_getGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setGroupsMask")]
        private extern static void NxCloth_setGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef groupsMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getGroupsMask")]
        private extern static IntPtr NxCloth_getGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setMeshData")]
        private extern static void NxCloth_setMeshData_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef meshData);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getMeshData")]
        private extern static IntPtr NxCloth_getMeshData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setValidBounds")]
        private extern static void NxCloth_setValidBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef validBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getValidBounds")]
        private extern static void NxCloth_getValidBounds_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef validBounds);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setPosition")]
        private extern static void NxCloth_setPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setPositions")]
        private extern static void NxCloth_setPositions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setPositions_1")]
        private extern static void NxCloth_setPositions_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getPosition")]
        private extern static NxVec3 NxCloth_getPosition_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getPositions")]
        private extern static void NxCloth_getPositions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getPositions_1")]
        private extern static void NxCloth_getPositions_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setVelocity")]
        private extern static void NxCloth_setVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 velocity, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setVelocities")]
        private extern static void NxCloth_setVelocities_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setVelocities_1")]
        private extern static void NxCloth_setVelocities_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVelocity")]
        private extern static NxVec3 NxCloth_getVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVelocities")]
        private extern static void NxCloth_getVelocities_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer, System.UInt32 byteStride);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getVelocities_1")]
        private extern static void NxCloth_getVelocities_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr buffer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getNumberOfParticles")]
        private extern static System.UInt32 NxCloth_getNumberOfParticles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_queryShapePointers")]
        private extern static System.UInt32 NxCloth_queryShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getStateByteSize")]
        private extern static System.UInt32 NxCloth_getStateByteSize_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getShapePointers")]
        private extern static void NxCloth_getShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] shapePointers, System.UInt32[] flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getShapePointers_1")]
        private extern static void NxCloth_getShapePointers_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] shapePointers);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setShapePointers")]
        private extern static void NxCloth_setShapePointers_INVOKE (HandleRef classPointer, System.Boolean call_explicit, IntPtr[] shapePointers, System.UInt32 numShapes);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_saveStateToStream")]
        private extern static void NxCloth_saveStateToStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream, System.Boolean permute);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_saveStateToStream_1")]
        private extern static void NxCloth_saveStateToStream_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_loadStateFromStream")]
        private extern static void NxCloth_loadStateFromStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setCollisionResponseCoefficient")]
        private extern static void NxCloth_setCollisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getCollisionResponseCoefficient")]
        private extern static System.Single NxCloth_getCollisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setAttachmentResponseCoefficient")]
        private extern static void NxCloth_setAttachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getAttachmentResponseCoefficient")]
        private extern static System.Single NxCloth_getAttachmentResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setFromFluidResponseCoefficient")]
        private extern static void NxCloth_setFromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getFromFluidResponseCoefficient")]
        private extern static System.Single NxCloth_getFromFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setToFluidResponseCoefficient")]
        private extern static void NxCloth_setToFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single coefficient);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getToFluidResponseCoefficient")]
        private extern static System.Single NxCloth_getToFluidResponseCoefficient_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setExternalAcceleration")]
        private extern static void NxCloth_setExternalAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxVec3 acceleration);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getExternalAcceleration")]
        private extern static NxVec3 NxCloth_getExternalAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setMinAdhereVelocity")]
        private extern static void NxCloth_setMinAdhereVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single velocity);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getMinAdhereVelocity")]
        private extern static System.Single NxCloth_getMinAdhereVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setWindAcceleration")]
        private extern static void NxCloth_setWindAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxVec3 acceleration);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getWindAcceleration")]
        private extern static NxVec3 NxCloth_getWindAcceleration_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_isSleeping")]
        private extern static System.Boolean NxCloth_isSleeping_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getSleepLinearVelocity")]
        private extern static System.Single NxCloth_getSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setSleepLinearVelocity")]
        private extern static void NxCloth_setSleepLinearVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single threshold);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_wakeUp")]
        private extern static void NxCloth_wakeUp_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single wakeCounterValue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_putToSleep")]
        private extern static void NxCloth_putToSleep_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setFlags")]
        private extern static void NxCloth_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getFlags")]
        private extern static System.UInt32 NxCloth_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setName")]
        private extern static void NxCloth_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addForceAtVertex")]
        private extern static void NxCloth_addForceAtVertex_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, System.UInt32 vertexId, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addForceAtVertex_1")]
        private extern static void NxCloth_addForceAtVertex_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 force, System.UInt32 vertexId);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addForceAtPos")]
        private extern static void NxCloth_addForceAtPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.Single magnitude, System.Single radius, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addForceAtPos_1")]
        private extern static void NxCloth_addForceAtPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, System.Single magnitude, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addDirectedForceAtPos")]
        private extern static void NxCloth_addDirectedForceAtPos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, [In()] ref NxVec3 force, System.Single radius, NxForceMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_addDirectedForceAtPos_1")]
        private extern static void NxCloth_addDirectedForceAtPos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 position, [In()] ref NxVec3 force, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_overlapAABBTriangles")]
        private extern static System.Boolean NxCloth_overlapAABBTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getScene")]
        private extern static IntPtr NxCloth_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getName")]
        private extern static System.String NxCloth_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getCompartment")]
        private extern static IntPtr NxCloth_getCompartment_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getPPUTime")]
        private extern static System.UInt32 NxCloth_getPPUTime_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_getForceFieldMaterial")]
        private extern static System.UInt16 NxCloth_getForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCloth_setForceFieldMaterial")]
        private extern static void NxCloth_setForceFieldMaterial_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown7);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCloth GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCloth)(obj.Target));
				}
			}
			return new NxCloth(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getClothMesh_1_delegatefield = new getClothMesh_1_delegate(this.getClothMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getClothMesh_1_delegatefield));
			setBendingStiffness_2_delegatefield = new setBendingStiffness_2_delegate(this.setBendingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setBendingStiffness_2_delegatefield));
			getBendingStiffness_3_delegatefield = new getBendingStiffness_3_delegate(this.getBendingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getBendingStiffness_3_delegatefield));
			setStretchingStiffness_4_delegatefield = new setStretchingStiffness_4_delegate(this.setStretchingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStretchingStiffness_4_delegatefield));
			getStretchingStiffness_5_delegatefield = new getStretchingStiffness_5_delegate(this.getStretchingStiffness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStretchingStiffness_5_delegatefield));
			setDampingCoefficient_6_delegatefield = new setDampingCoefficient_6_delegate(this.setDampingCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDampingCoefficient_6_delegatefield));
			getDampingCoefficient_7_delegatefield = new getDampingCoefficient_7_delegate(this.getDampingCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDampingCoefficient_7_delegatefield));
			setFriction_8_delegatefield = new setFriction_8_delegate(this.setFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFriction_8_delegatefield));
			getFriction_9_delegatefield = new getFriction_9_delegate(this.getFriction_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFriction_9_delegatefield));
			setPressure_10_delegatefield = new setPressure_10_delegate(this.setPressure_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPressure_10_delegatefield));
			getPressure_11_delegatefield = new getPressure_11_delegate(this.getPressure_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPressure_11_delegatefield));
			setTearFactor_12_delegatefield = new setTearFactor_12_delegate(this.setTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTearFactor_12_delegatefield));
			getTearFactor_13_delegatefield = new getTearFactor_13_delegate(this.getTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTearFactor_13_delegatefield));
			setAttachmentTearFactor_14_delegatefield = new setAttachmentTearFactor_14_delegate(this.setAttachmentTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAttachmentTearFactor_14_delegatefield));
			getAttachmentTearFactor_15_delegatefield = new getAttachmentTearFactor_15_delegate(this.getAttachmentTearFactor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAttachmentTearFactor_15_delegatefield));
			setThickness_16_delegatefield = new setThickness_16_delegate(this.setThickness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setThickness_16_delegatefield));
			getThickness_17_delegatefield = new getThickness_17_delegate(this.getThickness_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getThickness_17_delegatefield));
			getDensity_18_delegatefield = new getDensity_18_delegate(this.getDensity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDensity_18_delegatefield));
			getRelativeGridSpacing_19_delegatefield = new getRelativeGridSpacing_19_delegate(this.getRelativeGridSpacing_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRelativeGridSpacing_19_delegatefield));
			getSolverIterations_20_delegatefield = new getSolverIterations_20_delegate(this.getSolverIterations_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSolverIterations_20_delegatefield));
			setSolverIterations_21_delegatefield = new setSolverIterations_21_delegate(this.setSolverIterations_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSolverIterations_21_delegatefield));
			getWorldBounds_22_delegatefield = new getWorldBounds_22_delegate(this.getWorldBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWorldBounds_22_delegatefield));
			attachToShape_23_delegatefield = new attachToShape_23_delegate(this.attachToShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToShape_23_delegatefield));
			attachToCollidingShapes_24_delegatefield = new attachToCollidingShapes_24_delegate(this.attachToCollidingShapes_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToCollidingShapes_24_delegatefield));
			detachFromShape_25_delegatefield = new detachFromShape_25_delegate(this.detachFromShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(detachFromShape_25_delegatefield));
			attachVertexToShape_26_delegatefield = new attachVertexToShape_26_delegate(this.attachVertexToShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachVertexToShape_26_delegatefield));
			attachVertexToGlobalPosition_27_delegatefield = new attachVertexToGlobalPosition_27_delegate(this.attachVertexToGlobalPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachVertexToGlobalPosition_27_delegatefield));
			freeVertex_28_delegatefield = new freeVertex_28_delegate(this.freeVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(freeVertex_28_delegatefield));
			dominateVertex_29_delegatefield = new dominateVertex_29_delegate(this.dominateVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(dominateVertex_29_delegatefield));
			getVertexAttachmentStatus_30_delegatefield = new getVertexAttachmentStatus_30_delegate(this.getVertexAttachmentStatus_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVertexAttachmentStatus_30_delegatefield));
			getVertexAttachmentShape_31_delegatefield = new getVertexAttachmentShape_31_delegate(this.getVertexAttachmentShape_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVertexAttachmentShape_31_delegatefield));
			getVertexAttachmentPosition_32_delegatefield = new getVertexAttachmentPosition_32_delegate(this.getVertexAttachmentPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVertexAttachmentPosition_32_delegatefield));
			attachToCore_33_delegatefield = new attachToCore_33_delegate(this.attachToCore_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToCore_33_delegatefield));
			attachToCore_34_delegatefield = new attachToCore_34_delegate(this.attachToCore_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToCore_34_delegatefield));
			attachToCore_35_delegatefield = new attachToCore_35_delegate(this.attachToCore_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(attachToCore_35_delegatefield));
			tearVertex_36_delegatefield = new tearVertex_36_delegate(this.tearVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(tearVertex_36_delegatefield));
			raycast_37_delegatefield = new raycast_37_delegate(this.raycast_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(raycast_37_delegatefield));
			setGroup_38_delegatefield = new setGroup_38_delegate(this.setGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroup_38_delegatefield));
			getGroup_39_delegatefield = new getGroup_39_delegate(this.getGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroup_39_delegatefield));
			setGroupsMask_40_delegatefield = new setGroupsMask_40_delegate(this.setGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroupsMask_40_delegatefield));
			getGroupsMask_41_delegatefield = new getGroupsMask_41_delegate(this.getGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroupsMask_41_delegatefield));
			setMeshData_42_delegatefield = new setMeshData_42_delegate(this.setMeshData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMeshData_42_delegatefield));
			getMeshData_43_delegatefield = new getMeshData_43_delegate(this.getMeshData_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMeshData_43_delegatefield));
			setValidBounds_44_delegatefield = new setValidBounds_44_delegate(this.setValidBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setValidBounds_44_delegatefield));
			getValidBounds_45_delegatefield = new getValidBounds_45_delegate(this.getValidBounds_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getValidBounds_45_delegatefield));
			setPosition_46_delegatefield = new setPosition_46_delegate(this.setPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPosition_46_delegatefield));
			setPositions_47_delegatefield = new setPositions_47_delegate(this.setPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPositions_47_delegatefield));
			setPositions_48_delegatefield = new setPositions_48_delegate(this.setPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPositions_48_delegatefield));
			getPosition_49_delegatefield = new getPosition_49_delegate(this.getPosition_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPosition_49_delegatefield));
			getPositions_50_delegatefield = new getPositions_50_delegate(this.getPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPositions_50_delegatefield));
			getPositions_51_delegatefield = new getPositions_51_delegate(this.getPositions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPositions_51_delegatefield));
			setVelocity_52_delegatefield = new setVelocity_52_delegate(this.setVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocity_52_delegatefield));
			setVelocities_53_delegatefield = new setVelocities_53_delegate(this.setVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocities_53_delegatefield));
			setVelocities_54_delegatefield = new setVelocities_54_delegate(this.setVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setVelocities_54_delegatefield));
			getVelocity_55_delegatefield = new getVelocity_55_delegate(this.getVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocity_55_delegatefield));
			getVelocities_56_delegatefield = new getVelocities_56_delegate(this.getVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocities_56_delegatefield));
			getVelocities_57_delegatefield = new getVelocities_57_delegate(this.getVelocities_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocities_57_delegatefield));
			getNumberOfParticles_58_delegatefield = new getNumberOfParticles_58_delegate(this.getNumberOfParticles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNumberOfParticles_58_delegatefield));
			queryShapePointers_59_delegatefield = new queryShapePointers_59_delegate(this.queryShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(queryShapePointers_59_delegatefield));
			getStateByteSize_60_delegatefield = new getStateByteSize_60_delegate(this.getStateByteSize_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getStateByteSize_60_delegatefield));
			getShapePointers_61_delegatefield = new getShapePointers_61_delegate(this.getShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShapePointers_61_delegatefield));
			getShapePointers_62_delegatefield = new getShapePointers_62_delegate(this.getShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getShapePointers_62_delegatefield));
			setShapePointers_63_delegatefield = new setShapePointers_63_delegate(this.setShapePointers_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setShapePointers_63_delegatefield));
			saveStateToStream_64_delegatefield = new saveStateToStream_64_delegate(this.saveStateToStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveStateToStream_64_delegatefield));
			saveStateToStream_65_delegatefield = new saveStateToStream_65_delegate(this.saveStateToStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveStateToStream_65_delegatefield));
			loadStateFromStream_66_delegatefield = new loadStateFromStream_66_delegate(this.loadStateFromStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadStateFromStream_66_delegatefield));
			setCollisionResponseCoefficient_67_delegatefield = new setCollisionResponseCoefficient_67_delegate(this.setCollisionResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCollisionResponseCoefficient_67_delegatefield));
			getCollisionResponseCoefficient_68_delegatefield = new getCollisionResponseCoefficient_68_delegate(this.getCollisionResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCollisionResponseCoefficient_68_delegatefield));
			setAttachmentResponseCoefficient_69_delegatefield = new setAttachmentResponseCoefficient_69_delegate(this.setAttachmentResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAttachmentResponseCoefficient_69_delegatefield));
			getAttachmentResponseCoefficient_70_delegatefield = new getAttachmentResponseCoefficient_70_delegate(this.getAttachmentResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAttachmentResponseCoefficient_70_delegatefield));
			setFromFluidResponseCoefficient_71_delegatefield = new setFromFluidResponseCoefficient_71_delegate(this.setFromFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFromFluidResponseCoefficient_71_delegatefield));
			getFromFluidResponseCoefficient_72_delegatefield = new getFromFluidResponseCoefficient_72_delegate(this.getFromFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFromFluidResponseCoefficient_72_delegatefield));
			setToFluidResponseCoefficient_73_delegatefield = new setToFluidResponseCoefficient_73_delegate(this.setToFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToFluidResponseCoefficient_73_delegatefield));
			getToFluidResponseCoefficient_74_delegatefield = new getToFluidResponseCoefficient_74_delegate(this.getToFluidResponseCoefficient_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getToFluidResponseCoefficient_74_delegatefield));
			setExternalAcceleration_75_delegatefield = new setExternalAcceleration_75_delegate(this.setExternalAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setExternalAcceleration_75_delegatefield));
			getExternalAcceleration_76_delegatefield = new getExternalAcceleration_76_delegate(this.getExternalAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getExternalAcceleration_76_delegatefield));
			setMinAdhereVelocity_77_delegatefield = new setMinAdhereVelocity_77_delegate(this.setMinAdhereVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMinAdhereVelocity_77_delegatefield));
			getMinAdhereVelocity_78_delegatefield = new getMinAdhereVelocity_78_delegate(this.getMinAdhereVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMinAdhereVelocity_78_delegatefield));
			setWindAcceleration_79_delegatefield = new setWindAcceleration_79_delegate(this.setWindAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setWindAcceleration_79_delegatefield));
			getWindAcceleration_80_delegatefield = new getWindAcceleration_80_delegate(this.getWindAcceleration_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWindAcceleration_80_delegatefield));
			isSleeping_81_delegatefield = new isSleeping_81_delegate(this.isSleeping_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isSleeping_81_delegatefield));
			getSleepLinearVelocity_82_delegatefield = new getSleepLinearVelocity_82_delegate(this.getSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSleepLinearVelocity_82_delegatefield));
			setSleepLinearVelocity_83_delegatefield = new setSleepLinearVelocity_83_delegate(this.setSleepLinearVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSleepLinearVelocity_83_delegatefield));
			wakeUp_84_delegatefield = new wakeUp_84_delegate(this.wakeUp_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(wakeUp_84_delegatefield));
			putToSleep_85_delegatefield = new putToSleep_85_delegate(this.putToSleep_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(putToSleep_85_delegatefield));
			setFlags_86_delegatefield = new setFlags_86_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_86_delegatefield));
			getFlags_87_delegatefield = new getFlags_87_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_87_delegatefield));
			setName_88_delegatefield = new setName_88_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_88_delegatefield));
			addForceAtVertex_89_delegatefield = new addForceAtVertex_89_delegate(this.addForceAtVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtVertex_89_delegatefield));
			addForceAtVertex_90_delegatefield = new addForceAtVertex_90_delegate(this.addForceAtVertex_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtVertex_90_delegatefield));
			addForceAtPos_91_delegatefield = new addForceAtPos_91_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_91_delegatefield));
			addForceAtPos_92_delegatefield = new addForceAtPos_92_delegate(this.addForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addForceAtPos_92_delegatefield));
			addDirectedForceAtPos_93_delegatefield = new addDirectedForceAtPos_93_delegate(this.addDirectedForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addDirectedForceAtPos_93_delegatefield));
			addDirectedForceAtPos_94_delegatefield = new addDirectedForceAtPos_94_delegate(this.addDirectedForceAtPos_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addDirectedForceAtPos_94_delegatefield));
			overlapAABBTriangles_95_delegatefield = new overlapAABBTriangles_95_delegate(this.overlapAABBTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTriangles_95_delegatefield));
			getScene_96_delegatefield = new getScene_96_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_96_delegatefield));
			getName_97_delegatefield = new getName_97_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_97_delegatefield));
			getCompartment_98_delegatefield = new getCompartment_98_delegate(this.getCompartment_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCompartment_98_delegatefield));
			getPPUTime_99_delegatefield = new getPPUTime_99_delegate(this.getPPUTime_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPPUTime_99_delegatefield));
			getForceFieldMaterial_100_delegatefield = new getForceFieldMaterial_100_delegate(this.getForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceFieldMaterial_100_delegatefield));
			setForceFieldMaterial_101_delegatefield = new setForceFieldMaterial_101_delegate(this.setForceFieldMaterial_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setForceFieldMaterial_101_delegatefield));
			return list;
		}
	}
}
