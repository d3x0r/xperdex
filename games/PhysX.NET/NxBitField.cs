//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxBitField : DoxyBindObject
	{
		
		internal NxBitField(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public uint bitField
		{
			get
			{
				uint value = get_NxBitField_bitField_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBitField_bitField_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>default constructor leaves uninitialized. </summary>
		public NxBitField() : 
				base(new_NxBitField_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public NxBitField(uint unknown3) : 
				base(new_NxBitField_1_INVOKE(false, unknown3))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public NxBitField(NxBitField unknown4) : 
				base(new_NxBitField_2_INVOKE(false, (unknown4!=null ? unknown4.ClassPointer : NullRef)))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>manipulating a single bit using a bit index. The smallest bitIndex is 0. </summary>
		public void setFlag(uint bitIndex, uint value)
		{
			NxBitField_setFlag_INVOKE(ClassPointer, doSetFunctionPointers, bitIndex, value);
		}
		
		/// <summary></summary>
		public void raiseFlag(uint bitIndex)
		{
			NxBitField_raiseFlag_INVOKE(ClassPointer, doSetFunctionPointers, bitIndex);
		}
		
		/// <summary></summary>
		public void lowerFlag(uint bitIndex)
		{
			NxBitField_lowerFlag_INVOKE(ClassPointer, doSetFunctionPointers, bitIndex);
		}
		
		/// <summary></summary>
		public uint getFlag(uint bitIndex)
		{
			return NxBitField_getFlag_INVOKE(ClassPointer, doSetFunctionPointers, bitIndex);
		}
		
		/// <summary></summary>
		public void setFlagMask(uint mask, uint value)
		{
			NxBitField_setFlagMask_INVOKE(ClassPointer, doSetFunctionPointers, mask, value);
		}
		
		/// <summary></summary>
		public void raiseFlagMask(uint mask)
		{
			NxBitField_raiseFlagMask_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		/// <summary></summary>
		public void lowerFlagMask(uint mask)
		{
			NxBitField_lowerFlagMask_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		/// <summary></summary>
		public bool getFlagMask(uint mask)
		{
			return NxBitField_getFlagMask_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		/// <summary></summary>
		/// <param name="shift"></param>
		/// <param name="mask"></param>
		public uint getField(uint shift, uint mask)
		{
			return NxBitField_getField_INVOKE(ClassPointer, doSetFunctionPointers, shift, mask);
		}
		
		/// <summary></summary>
		public void setField(uint shift, uint mask, uint field)
		{
			NxBitField_setField_INVOKE(ClassPointer, doSetFunctionPointers, shift, mask, field);
		}
		
		/// <summary></summary>
		public void clearField(uint mask)
		{
			NxBitField_clearField_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		/// <summary>statics </summary>
		public uint rangeToDenseMask(uint lowIndex, uint highIndex)
		{
			return NxBitField_rangeToDenseMask_INVOKE(ClassPointer, doSetFunctionPointers, lowIndex, highIndex);
		}
		
		/// <summary></summary>
		public uint maskToShift(uint mask)
		{
			return NxBitField_maskToShift_INVOKE(ClassPointer, doSetFunctionPointers, mask);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBitField_bitField")]
        private extern static void set_NxBitField_bitField_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBitField_bitField")]
        private extern static System.UInt32 get_NxBitField_bitField_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBitField")]
        private extern static IntPtr new_NxBitField_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBitField_1")]
        private extern static IntPtr new_NxBitField_1_INVOKE (System.Boolean do_override, System.UInt32 unknown3);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBitField_2")]
        private extern static IntPtr new_NxBitField_2_INVOKE (System.Boolean do_override, HandleRef unknown4);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_setFlag")]
        private extern static void NxBitField_setFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 bitIndex, System.UInt32 value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_raiseFlag")]
        private extern static void NxBitField_raiseFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 bitIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_lowerFlag")]
        private extern static void NxBitField_lowerFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 bitIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_getFlag")]
        private extern static System.UInt32 NxBitField_getFlag_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 bitIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_setFlagMask")]
        private extern static void NxBitField_setFlagMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask, System.UInt32 value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_raiseFlagMask")]
        private extern static void NxBitField_raiseFlagMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_lowerFlagMask")]
        private extern static void NxBitField_lowerFlagMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_getFlagMask")]
        private extern static System.Boolean NxBitField_getFlagMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_getField")]
        private extern static System.UInt32 NxBitField_getField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 shift, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_setField")]
        private extern static void NxBitField_setField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 shift, System.UInt32 mask, System.UInt32 field);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_clearField")]
        private extern static void NxBitField_clearField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_rangeToDenseMask")]
        private extern static System.UInt32 NxBitField_rangeToDenseMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 lowIndex, System.UInt32 highIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBitField_maskToShift")]
        private extern static System.UInt32 NxBitField_maskToShift_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 mask);

		#endregion
		
		public class FlagRef : DoxyBindObject
		{
			
			internal FlagRef(IntPtr ptr) : 
					base(ptr)
			{
			}
			
			/// <summary></summary>
			public FlagRef(NxBitField x, uint index) : 
					base(new_FlagRef_INVOKE(false, (x!=null ? x.ClassPointer : NullRef), index))
			{
				GC.ReRegisterForFinalize(this);
			}
			
			#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_FlagRef")]
        private extern static IntPtr new_FlagRef_INVOKE (System.Boolean do_override, HandleRef x, System.UInt32 index);

			#endregion
			
			private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
			
			protected override void SetPointer(IntPtr ptr)
			{
				base.SetPointer(ptr);
				database[ptr] = new WeakReference(this);
			}
			
			public override void Dispose()
			{
				database.Remove(ClassPointer.Handle);
				base.Dispose();
			}
			
			public static FlagRef GetClass(IntPtr ptr)
			{
				if ((ptr == IntPtr.Zero))
				{
					return null;
				}
				System.WeakReference obj;
				if (database.TryGetValue(ptr, out obj))
				{
					if (obj.IsAlive)
					{
						return ((FlagRef)(obj.Target));
					}
				}
				return new FlagRef(ptr);
			}
			
			protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
			{
				System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
				return list;
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxBitField GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxBitField)(obj.Target));
				}
			}
			return new NxBitField(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
