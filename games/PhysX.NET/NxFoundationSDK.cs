//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxFoundationSDK : DoxyBindObject
	{
		
		internal NxFoundationSDK(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public virtual void release()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFoundationSDK_release_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void release_virtual()
		{
			release();
		}
		
		delegate void release_0_delegate();
		
		
		
		
		
		
		private release_0_delegate release_0_delegatefield;
		
		/// <summary></summary>
		/// <param name="stream">Stream to report error on. </param>
		public virtual void setErrorStream(NxUserOutputStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFoundationSDK_setErrorStream_INVOKE(ClassPointer, doSetFunctionPointers, (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private void setErrorStream_virtual(IntPtr stream)
		{
			setErrorStream(NxUserOutputStream.GetClass(stream));
		}
		
		delegate void setErrorStream_1_delegate(IntPtr stream);
		
		
		
		
		
		
		private setErrorStream_1_delegate setErrorStream_1_delegatefield;
		
		/// <summary></summary>
		public virtual NxUserOutputStream getErrorStream()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserOutputStream.GetClass(NxFoundationSDK_getErrorStream_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getErrorStream_virtual()
		{
			return getErrorStream().ClassPointer.Handle;
		}
		
		delegate IntPtr getErrorStream_2_delegate();
		
		
		
		
		
		
		private getErrorStream_2_delegate getErrorStream_2_delegatefield;
		
		/// <summary></summary>
		public virtual NxErrorCode getLastError()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFoundationSDK_getLastError_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxErrorCode getLastError_virtual()
		{
			return getLastError();
		}
		
		delegate NxErrorCode getLastError_3_delegate();
		
		
		
		
		
		
		private getLastError_3_delegate getLastError_3_delegatefield;
		
		/// <summary></summary>
		public virtual NxErrorCode getFirstError()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxFoundationSDK_getFirstError_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxErrorCode getFirstError_virtual()
		{
			return getFirstError();
		}
		
		delegate NxErrorCode getFirstError_4_delegate();
		
		
		
		
		
		
		private getFirstError_4_delegate getFirstError_4_delegatefield;
		
		/// <summary></summary>
		public virtual NxUserAllocator getAllocator()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserAllocator.GetClass(NxFoundationSDK_getAllocator_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getAllocator_virtual()
		{
			return getAllocator().ClassPointer.Handle;
		}
		
		delegate IntPtr getAllocator_5_delegate();
		
		
		
		
		
		
		private getAllocator_5_delegate getAllocator_5_delegatefield;
		
		/// <summary></summary>
		public virtual NxRemoteDebugger getRemoteDebugger()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRemoteDebugger.GetClass(NxFoundationSDK_getRemoteDebugger_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getRemoteDebugger_virtual()
		{
			return getRemoteDebugger().ClassPointer.Handle;
		}
		
		delegate IntPtr getRemoteDebugger_6_delegate();
		
		
		
		
		
		
		private getRemoteDebugger_6_delegate getRemoteDebugger_6_delegatefield;
		
		/// <summary></summary>
		public virtual void setAllocaThreshold(uint threshold)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxFoundationSDK_setAllocaThreshold_INVOKE(ClassPointer, doSetFunctionPointers, threshold);
		}
		
		private void setAllocaThreshold_virtual(uint threshold)
		{
			setAllocaThreshold(threshold);
		}
		
		delegate void setAllocaThreshold_7_delegate(uint threshold);
		
		
		
		
		
		
		private setAllocaThreshold_7_delegate setAllocaThreshold_7_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_release")]
        private extern static void NxFoundationSDK_release_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_setErrorStream")]
        private extern static void NxFoundationSDK_setErrorStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_getErrorStream")]
        private extern static IntPtr NxFoundationSDK_getErrorStream_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_getLastError")]
        private extern static NxErrorCode NxFoundationSDK_getLastError_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_getFirstError")]
        private extern static NxErrorCode NxFoundationSDK_getFirstError_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_getAllocator")]
        private extern static IntPtr NxFoundationSDK_getAllocator_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_getRemoteDebugger")]
        private extern static IntPtr NxFoundationSDK_getRemoteDebugger_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFoundationSDK_setAllocaThreshold")]
        private extern static void NxFoundationSDK_setAllocaThreshold_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 threshold);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxFoundationSDK")]
        private extern static IntPtr new_NxFoundationSDK_INVOKE (bool do_override);

		
		protected NxFoundationSDK() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxFoundationSDK)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxFoundationSDK_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxFoundationSDK_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxFoundationSDK GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxFoundationSDK)(obj.Target));
				}
			}
			return new NxFoundationSDK(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			release_0_delegatefield = new release_0_delegate(this.release_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(release_0_delegatefield));
			setErrorStream_1_delegatefield = new setErrorStream_1_delegate(this.setErrorStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setErrorStream_1_delegatefield));
			getErrorStream_2_delegatefield = new getErrorStream_2_delegate(this.getErrorStream_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getErrorStream_2_delegatefield));
			getLastError_3_delegatefield = new getLastError_3_delegate(this.getLastError_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLastError_3_delegatefield));
			getFirstError_4_delegatefield = new getFirstError_4_delegate(this.getFirstError_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFirstError_4_delegatefield));
			getAllocator_5_delegatefield = new getAllocator_5_delegate(this.getAllocator_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAllocator_5_delegatefield));
			getRemoteDebugger_6_delegatefield = new getRemoteDebugger_6_delegate(this.getRemoteDebugger_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRemoteDebugger_6_delegatefield));
			setAllocaThreshold_7_delegatefield = new setAllocaThreshold_7_delegate(this.setAllocaThreshold_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setAllocaThreshold_7_delegatefield));
			return list;
		}
	}
}
