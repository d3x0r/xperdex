//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class ControllerManager : DoxyBindObject
	{
		
		internal ControllerManager(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public ControllerManager() : 
				base(new_ControllerManager_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary></summary>
		public uint getNbControllers()
		{
			return ControllerManager_getNbControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public NxController getController(uint index)
		{
			return NxController.GetClass(ControllerManager_getController_INVOKE(ClassPointer, doSetFunctionPointers, index));
		}
		
		/// <summary></summary>
		public NxController createController(NxScene scene, NxControllerDesc desc)
		{
			return NxController.GetClass(ControllerManager_createController_INVOKE(ClassPointer, doSetFunctionPointers, (scene!=null ? scene.ClassPointer : NullRef), (desc!=null ? desc.ClassPointer : NullRef)));
		}
		
		/// <summary></summary>
		public void releaseController(NxController controller)
		{
			ControllerManager_releaseController_INVOKE(ClassPointer, doSetFunctionPointers, (controller!=null ? controller.ClassPointer : NullRef));
		}
		
		/// <summary></summary>
		public void purgeControllers()
		{
			ControllerManager_purgeControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void updateControllers()
		{
			ControllerManager_updateControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public DoxyBindArray<NxController> getControllers()
		{
			return ControllerManager_getControllers_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public NxDebugRenderable getDebugData()
		{
			return NxDebugRenderable.GetClass(ControllerManager_getDebugData_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary></summary>
		public void resetDebugData()
		{
			ControllerManager_resetDebugData_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_ControllerManager")]
        private extern static IntPtr new_ControllerManager_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_getNbControllers")]
        private extern static System.UInt32 ControllerManager_getNbControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_getController")]
        private extern static IntPtr ControllerManager_getController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 index);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_createController")]
        private extern static IntPtr ControllerManager_createController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef scene, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_releaseController")]
        private extern static void ControllerManager_releaseController_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef controller);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_purgeControllers")]
        private extern static void ControllerManager_purgeControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_updateControllers")]
        private extern static void ControllerManager_updateControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_getControllers")]
        private extern static IntPtr[] ControllerManager_getControllers_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_getDebugData")]
        private extern static IntPtr ControllerManager_getDebugData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="ControllerManager_resetDebugData")]
        private extern static void ControllerManager_resetDebugData_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static ControllerManager GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((ControllerManager)(obj.Target));
				}
			}
			return new ControllerManager(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
