//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSceneDesc : DoxyBindObject
	{
		
		internal NxSceneDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Gravity vector. </summary>
		public NxVec3 gravity
		{
			get
			{
				NxVec3 value = get_NxSceneDesc_gravity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_gravity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible notification callback. </summary>
		public NxUserNotify userNotify
		{
			get
			{
				return NxUserNotify.GetClass(get_NxSceneDesc_userNotify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_userNotify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible notification callback for fluids. </summary>
		public NxFluidUserNotify fluidUserNotify
		{
			get
			{
				return NxFluidUserNotify.GetClass(get_NxSceneDesc_fluidUserNotify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_fluidUserNotify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible notification callback for cloths. </summary>
		public NxClothUserNotify clothUserNotify
		{
			get
			{
				return NxClothUserNotify.GetClass(get_NxSceneDesc_clothUserNotify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_clothUserNotify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible notification callback for softBodys. </summary>
		public NxSoftBodyUserNotify softBodyUserNotify
		{
			get
			{
				return NxSoftBodyUserNotify.GetClass(get_NxSceneDesc_softBodyUserNotify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_softBodyUserNotify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible asynchronous callback for contact modification. </summary>
		public NxUserContactModify userContactModify
		{
			get
			{
				return NxUserContactModify.GetClass(get_NxSceneDesc_userContactModify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_userContactModify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible trigger callback. </summary>
		public NxUserTriggerReport userTriggerReport
		{
			get
			{
				return NxUserTriggerReport.GetClass(get_NxSceneDesc_userTriggerReport_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_userTriggerReport_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Possible contact callback. </summary>
		public NxUserContactReport userContactReport
		{
			get
			{
				return NxUserContactReport.GetClass(get_NxSceneDesc_userContactReport_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_userContactReport_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Internal. Do not use! </summary>
		public NxUserActorPairFiltering userActorPairFiltering
		{
			get
			{
				return NxUserActorPairFiltering.GetClass(get_NxSceneDesc_userActorPairFiltering_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_userActorPairFiltering_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Maximum substep size. </summary>
		public float maxTimestep
		{
			get
			{
				float value = get_NxSceneDesc_maxTimestep_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_maxTimestep_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum number of substeps to take. </summary>
		public uint maxIter
		{
			get
			{
				uint value = get_NxSceneDesc_maxIter_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_maxIter_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Integration method. </summary>
		public NxTimeStepMethod timeStepMethod
		{
			get
			{
				NxTimeStepMethod value = get_NxSceneDesc_timeStepMethod_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_timeStepMethod_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Max scene bounds. </summary>
		public NxBounds3 maxBounds
		{
			get
			{
				return NxBounds3.GetClass(get_NxSceneDesc_maxBounds_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_maxBounds_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Expected scene limits (or NULL). </summary>
		public NxSceneLimits limits
		{
			get
			{
				return NxSceneLimits.GetClass(get_NxSceneDesc_limits_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_limits_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Used to specify if the scene is a master hardware or software scene. </summary>
		public NxSimulationType simType
		{
			get
			{
				NxSimulationType value = get_NxSceneDesc_simType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_simType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Enable/disable default ground plane. </summary>
		public int groundPlane
		{
			get
			{
				int value = get_NxSceneDesc_groundPlane_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_groundPlane_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Enable/disable 6 planes around maxBounds (if available). </summary>
		public int boundsPlanes
		{
			get
			{
				int value = get_NxSceneDesc_boundsPlanes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_boundsPlanes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Flags used to select scene options. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxSceneDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a custom scheduler. </summary>
		public NxUserScheduler customScheduler
		{
			get
			{
				return NxUserScheduler.GetClass(get_NxSceneDesc_customScheduler_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSceneDesc_customScheduler_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Allows the user to specify the stack size for the main simulation thread. </summary>
		public uint simThreadStackSize
		{
			get
			{
				uint value = get_NxSceneDesc_simThreadStackSize_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_simThreadStackSize_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the thread priority of the main simulation thread. </summary>
		public NxThreadPriority simThreadPriority
		{
			get
			{
				NxThreadPriority value = get_NxSceneDesc_simThreadPriority_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_simThreadPriority_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Allows the user to specify which (logical) processor to allocate the simulation thread to. </summary>
		public uint simThreadMask
		{
			get
			{
				uint value = get_NxSceneDesc_simThreadMask_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_simThreadMask_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the number of SDK managed worker threads used when running the simulation in parallel. </summary>
		public uint internalThreadCount
		{
			get
			{
				uint value = get_NxSceneDesc_internalThreadCount_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_internalThreadCount_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Allows the user to specify the stack size for the worker threads created by the SDK. </summary>
		public uint workerThreadStackSize
		{
			get
			{
				uint value = get_NxSceneDesc_workerThreadStackSize_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_workerThreadStackSize_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the thread priority of the SDK created worker threads. </summary>
		public NxThreadPriority workerThreadPriority
		{
			get
			{
				NxThreadPriority value = get_NxSceneDesc_workerThreadPriority_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_workerThreadPriority_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Allows the user to specify which (logical) processor to allocate SDK internal worker threads to. </summary>
		public uint threadMask
		{
			get
			{
				uint value = get_NxSceneDesc_threadMask_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_threadMask_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the number of SDK managed threads which will be processing background tasks. </summary>
		public uint backgroundThreadCount
		{
			get
			{
				uint value = get_NxSceneDesc_backgroundThreadCount_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_backgroundThreadCount_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the thread priority of the SDK created background threads. </summary>
		public NxThreadPriority backgroundThreadPriority
		{
			get
			{
				NxThreadPriority value = get_NxSceneDesc_backgroundThreadPriority_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_backgroundThreadPriority_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Allows the user to specify which (logical) processor to allocate SDK background threads. </summary>
		public uint backgroundThreadMask
		{
			get
			{
				uint value = get_NxSceneDesc_backgroundThreadMask_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_backgroundThreadMask_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the up axis for your world. This is used to accelerate scene queries like raycasting or sweep tests. Internally, a 2D structure is used instead of a 3D one whenever an up axis is defined. This saves memory and is usually faster. </summary>
		public uint upAxis
		{
			get
			{
				uint value = get_NxSceneDesc_upAxis_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_upAxis_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the subdivision level for acceleration structures used for scene queries. </summary>
		public uint subdivisionLevel
		{
			get
			{
				uint value = get_NxSceneDesc_subdivisionLevel_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_subdivisionLevel_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the structure used to store static objects. </summary>
		public NxPruningStructure staticStructure
		{
			get
			{
				NxPruningStructure value = get_NxSceneDesc_staticStructure_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_staticStructure_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the structure used to store dynamic objects. </summary>
		public NxPruningStructure dynamicStructure
		{
			get
			{
				NxPruningStructure value = get_NxSceneDesc_dynamicStructure_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_dynamicStructure_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Hint for how much work should be done per simulation frame to rebuild the pruning structure. </summary>
		public uint dynamicTreeRebuildRateHint
		{
			get
			{
				uint value = get_NxSceneDesc_dynamicTreeRebuildRateHint_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_dynamicTreeRebuildRateHint_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxScene::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxSceneDesc_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines which type of broadphase to use. </summary>
		public NxBroadPhaseType bpType
		{
			get
			{
				NxBroadPhaseType value = get_NxSceneDesc_bpType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_bpType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the number of broadphase cells along the grid x-axis. </summary>
		public uint nbGridCellsX
		{
			get
			{
				uint value = get_NxSceneDesc_nbGridCellsX_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_nbGridCellsX_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the number of broadphase cells along the grid y-axis. </summary>
		public uint nbGridCellsY
		{
			get
			{
				uint value = get_NxSceneDesc_nbGridCellsY_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_nbGridCellsY_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the number of actors required to spawn a separate rigid body solver thread. </summary>
		public uint solverBatchSize
		{
			get
			{
				uint value = get_NxSceneDesc_solverBatchSize_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSceneDesc_solverBatchSize_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>constructor sets to default (no gravity, no ground plane, collision detection on). </summary>
		public NxSceneDesc() : 
				base(new_NxSceneDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default (no gravity, no ground plane, collision detection on). </summary>
		public void setToDefault()
		{
			NxSceneDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxSceneDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_gravity")]
        private extern static void set_NxSceneDesc_gravity_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_gravity")]
        private extern static NxVec3 get_NxSceneDesc_gravity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userNotify")]
        private extern static void set_NxSceneDesc_userNotify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userNotify")]
        private extern static IntPtr get_NxSceneDesc_userNotify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_fluidUserNotify")]
        private extern static void set_NxSceneDesc_fluidUserNotify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_fluidUserNotify")]
        private extern static IntPtr get_NxSceneDesc_fluidUserNotify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_clothUserNotify")]
        private extern static void set_NxSceneDesc_clothUserNotify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_clothUserNotify")]
        private extern static IntPtr get_NxSceneDesc_clothUserNotify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_softBodyUserNotify")]
        private extern static void set_NxSceneDesc_softBodyUserNotify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_softBodyUserNotify")]
        private extern static IntPtr get_NxSceneDesc_softBodyUserNotify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userContactModify")]
        private extern static void set_NxSceneDesc_userContactModify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userContactModify")]
        private extern static IntPtr get_NxSceneDesc_userContactModify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userTriggerReport")]
        private extern static void set_NxSceneDesc_userTriggerReport_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userTriggerReport")]
        private extern static IntPtr get_NxSceneDesc_userTriggerReport_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userContactReport")]
        private extern static void set_NxSceneDesc_userContactReport_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userContactReport")]
        private extern static IntPtr get_NxSceneDesc_userContactReport_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userActorPairFiltering")]
        private extern static void set_NxSceneDesc_userActorPairFiltering_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userActorPairFiltering")]
        private extern static IntPtr get_NxSceneDesc_userActorPairFiltering_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_maxTimestep")]
        private extern static void set_NxSceneDesc_maxTimestep_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_maxTimestep")]
        private extern static System.Single get_NxSceneDesc_maxTimestep_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_maxIter")]
        private extern static void set_NxSceneDesc_maxIter_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_maxIter")]
        private extern static System.UInt32 get_NxSceneDesc_maxIter_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_timeStepMethod")]
        private extern static void set_NxSceneDesc_timeStepMethod_INVOKE (HandleRef classPointer, NxTimeStepMethod newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_timeStepMethod")]
        private extern static NxTimeStepMethod get_NxSceneDesc_timeStepMethod_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_maxBounds")]
        private extern static void set_NxSceneDesc_maxBounds_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_maxBounds")]
        private extern static IntPtr get_NxSceneDesc_maxBounds_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_limits")]
        private extern static void set_NxSceneDesc_limits_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_limits")]
        private extern static IntPtr get_NxSceneDesc_limits_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_simType")]
        private extern static void set_NxSceneDesc_simType_INVOKE (HandleRef classPointer, NxSimulationType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_simType")]
        private extern static NxSimulationType get_NxSceneDesc_simType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_groundPlane")]
        private extern static void set_NxSceneDesc_groundPlane_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_groundPlane")]
        private extern static System.Int32 get_NxSceneDesc_groundPlane_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_boundsPlanes")]
        private extern static void set_NxSceneDesc_boundsPlanes_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_boundsPlanes")]
        private extern static System.Int32 get_NxSceneDesc_boundsPlanes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_flags")]
        private extern static void set_NxSceneDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_flags")]
        private extern static System.UInt32 get_NxSceneDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_customScheduler")]
        private extern static void set_NxSceneDesc_customScheduler_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_customScheduler")]
        private extern static IntPtr get_NxSceneDesc_customScheduler_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_simThreadStackSize")]
        private extern static void set_NxSceneDesc_simThreadStackSize_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_simThreadStackSize")]
        private extern static System.UInt32 get_NxSceneDesc_simThreadStackSize_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_simThreadPriority")]
        private extern static void set_NxSceneDesc_simThreadPriority_INVOKE (HandleRef classPointer, NxThreadPriority newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_simThreadPriority")]
        private extern static NxThreadPriority get_NxSceneDesc_simThreadPriority_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_simThreadMask")]
        private extern static void set_NxSceneDesc_simThreadMask_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_simThreadMask")]
        private extern static System.UInt32 get_NxSceneDesc_simThreadMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_internalThreadCount")]
        private extern static void set_NxSceneDesc_internalThreadCount_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_internalThreadCount")]
        private extern static System.UInt32 get_NxSceneDesc_internalThreadCount_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_workerThreadStackSize")]
        private extern static void set_NxSceneDesc_workerThreadStackSize_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_workerThreadStackSize")]
        private extern static System.UInt32 get_NxSceneDesc_workerThreadStackSize_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_workerThreadPriority")]
        private extern static void set_NxSceneDesc_workerThreadPriority_INVOKE (HandleRef classPointer, NxThreadPriority newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_workerThreadPriority")]
        private extern static NxThreadPriority get_NxSceneDesc_workerThreadPriority_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_threadMask")]
        private extern static void set_NxSceneDesc_threadMask_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_threadMask")]
        private extern static System.UInt32 get_NxSceneDesc_threadMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_backgroundThreadCount")]
        private extern static void set_NxSceneDesc_backgroundThreadCount_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_backgroundThreadCount")]
        private extern static System.UInt32 get_NxSceneDesc_backgroundThreadCount_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_backgroundThreadPriority")]
        private extern static void set_NxSceneDesc_backgroundThreadPriority_INVOKE (HandleRef classPointer, NxThreadPriority newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_backgroundThreadPriority")]
        private extern static NxThreadPriority get_NxSceneDesc_backgroundThreadPriority_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_backgroundThreadMask")]
        private extern static void set_NxSceneDesc_backgroundThreadMask_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_backgroundThreadMask")]
        private extern static System.UInt32 get_NxSceneDesc_backgroundThreadMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_upAxis")]
        private extern static void set_NxSceneDesc_upAxis_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_upAxis")]
        private extern static System.UInt32 get_NxSceneDesc_upAxis_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_subdivisionLevel")]
        private extern static void set_NxSceneDesc_subdivisionLevel_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_subdivisionLevel")]
        private extern static System.UInt32 get_NxSceneDesc_subdivisionLevel_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_staticStructure")]
        private extern static void set_NxSceneDesc_staticStructure_INVOKE (HandleRef classPointer, NxPruningStructure newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_staticStructure")]
        private extern static NxPruningStructure get_NxSceneDesc_staticStructure_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_dynamicStructure")]
        private extern static void set_NxSceneDesc_dynamicStructure_INVOKE (HandleRef classPointer, NxPruningStructure newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_dynamicStructure")]
        private extern static NxPruningStructure get_NxSceneDesc_dynamicStructure_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_dynamicTreeRebuildRateHint")]
        private extern static void set_NxSceneDesc_dynamicTreeRebuildRateHint_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_dynamicTreeRebuildRateHint")]
        private extern static System.UInt32 get_NxSceneDesc_dynamicTreeRebuildRateHint_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_userData")]
        private extern static void set_NxSceneDesc_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_userData")]
        private extern static System.IntPtr get_NxSceneDesc_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_bpType")]
        private extern static void set_NxSceneDesc_bpType_INVOKE (HandleRef classPointer, NxBroadPhaseType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_bpType")]
        private extern static NxBroadPhaseType get_NxSceneDesc_bpType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_nbGridCellsX")]
        private extern static void set_NxSceneDesc_nbGridCellsX_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_nbGridCellsX")]
        private extern static System.UInt32 get_NxSceneDesc_nbGridCellsX_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_nbGridCellsY")]
        private extern static void set_NxSceneDesc_nbGridCellsY_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_nbGridCellsY")]
        private extern static System.UInt32 get_NxSceneDesc_nbGridCellsY_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSceneDesc_solverBatchSize")]
        private extern static void set_NxSceneDesc_solverBatchSize_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSceneDesc_solverBatchSize")]
        private extern static System.UInt32 get_NxSceneDesc_solverBatchSize_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSceneDesc")]
        private extern static IntPtr new_NxSceneDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneDesc_setToDefault")]
        private extern static void NxSceneDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSceneDesc_isValid")]
        private extern static System.Boolean NxSceneDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSceneDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSceneDesc)(obj.Target));
				}
			}
			return new NxSceneDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
