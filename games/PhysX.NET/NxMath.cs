//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxMath : DoxyBindObject
	{
		
		internal NxMath(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Returns true if the two numbers are within eps of each other. </summary>
		public bool equals(float unknown26, float unknown27, float eps)
		{
			return NxMath_equals_INVOKE(ClassPointer, doSetFunctionPointers, unknown26, unknown27, eps);
		}
		
		/// <summary>Returns true if the two numbers are within eps of each other. </summary>
		public bool equals(double unknown28, double unknown29, double eps)
		{
			return NxMath_equals_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown28, unknown29, eps);
		}
		
		/// <summary>The floor function returns a floating-point value representing the largest integer that is less than or equal to x. </summary>
		public float floor(float unknown30)
		{
			return NxMath_floor_INVOKE(ClassPointer, doSetFunctionPointers, unknown30);
		}
		
		/// <summary>The floor function returns a floating-point value representing the largest integer that is less than or equal to x. </summary>
		public double floor(double unknown31)
		{
			return NxMath_floor_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown31);
		}
		
		/// <summary>The ceil function returns a single value representing the smallest integer that is greater than or equal to x. </summary>
		public float ceil(float unknown32)
		{
			return NxMath_ceil_INVOKE(ClassPointer, doSetFunctionPointers, unknown32);
		}
		
		/// <summary>The ceil function returns a double value representing the smallest integer that is greater than or equal to x. </summary>
		public double ceil(double unknown33)
		{
			return NxMath_ceil_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown33);
		}
		
		/// <summary>Truncates the float to an integer. </summary>
		public int trunc(float unknown34)
		{
			return NxMath_trunc_INVOKE(ClassPointer, doSetFunctionPointers, unknown34);
		}
		
		/// <summary>Truncates the double precision float to an integer. </summary>
		public int trunc(double unknown35)
		{
			return NxMath_trunc_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown35);
		}
		
		/// <summary>abs returns the absolute value of its argument. </summary>
		public float abs(float unknown36)
		{
			return NxMath_abs_INVOKE(ClassPointer, doSetFunctionPointers, unknown36);
		}
		
		/// <summary>abs returns the absolute value of its argument. </summary>
		public double abs(double unknown37)
		{
			return NxMath_abs_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown37);
		}
		
		/// <summary>abs returns the absolute value of its argument. </summary>
		public int abs(int unknown38)
		{
			return NxMath_abs_2_INVOKE(ClassPointer, doSetFunctionPointers, unknown38);
		}
		
		/// <summary>sign returns the sign of its argument. The sign of zero is undefined. </summary>
		public float sign(float unknown39)
		{
			return NxMath_sign_INVOKE(ClassPointer, doSetFunctionPointers, unknown39);
		}
		
		/// <summary>sign returns the sign of its argument. The sign of zero is undefined. </summary>
		public double sign(double unknown40)
		{
			return NxMath_sign_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown40);
		}
		
		/// <summary>sign returns the sign of its argument. The sign of zero is undefined. </summary>
		public int sign(int unknown41)
		{
			return NxMath_sign_2_INVOKE(ClassPointer, doSetFunctionPointers, unknown41);
		}
		
		/// <summary>The return value is the greater of the two specified values. </summary>
		public float max(float unknown42, float unknown43)
		{
			return NxMath_max_INVOKE(ClassPointer, doSetFunctionPointers, unknown42, unknown43);
		}
		
		/// <summary>The return value is the greater of the two specified values. </summary>
		public double max(double unknown44, double unknown45)
		{
			return NxMath_max_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown44, unknown45);
		}
		
		/// <summary>The return value is the greater of the two specified values. </summary>
		public int max(int unknown46, int unknown47)
		{
			return NxMath_max_2_INVOKE(ClassPointer, doSetFunctionPointers, unknown46, unknown47);
		}
		
		/// <summary>The return value is the greater of the two specified values. </summary>
		public uint max(uint unknown48, uint unknown49)
		{
			return NxMath_max_3_INVOKE(ClassPointer, doSetFunctionPointers, unknown48, unknown49);
		}
		
		/// <summary>The return value is the greater of the two specified values. </summary>
		public ushort max(ushort unknown50, ushort unknown51)
		{
			return NxMath_max_4_INVOKE(ClassPointer, doSetFunctionPointers, unknown50, unknown51);
		}
		
		/// <summary>The return value is the lesser of the two specified values. </summary>
		public float min(float unknown52, float unknown53)
		{
			return NxMath_min_INVOKE(ClassPointer, doSetFunctionPointers, unknown52, unknown53);
		}
		
		/// <summary>The return value is the lesser of the two specified values. </summary>
		public double min(double unknown54, double unknown55)
		{
			return NxMath_min_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown54, unknown55);
		}
		
		/// <summary>The return value is the lesser of the two specified values. </summary>
		public int min(int unknown56, int unknown57)
		{
			return NxMath_min_2_INVOKE(ClassPointer, doSetFunctionPointers, unknown56, unknown57);
		}
		
		/// <summary>The return value is the lesser of the two specified values. </summary>
		public uint min(uint unknown58, uint unknown59)
		{
			return NxMath_min_3_INVOKE(ClassPointer, doSetFunctionPointers, unknown58, unknown59);
		}
		
		/// <summary>The return value is the lesser of the two specified values. </summary>
		public ushort min(ushort unknown60, ushort unknown61)
		{
			return NxMath_min_4_INVOKE(ClassPointer, doSetFunctionPointers, unknown60, unknown61);
		}
		
		/// <summary>mod returns the floating-point remainder of x / y. </summary>
		public float mod(float x, float y)
		{
			return NxMath_mod_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>mod returns the floating-point remainder of x / y. </summary>
		public double mod(double x, double y)
		{
			return NxMath_mod_1_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>Clamps v to the range [hi,lo]. </summary>
		public float clamp(float v, float hi, float low)
		{
			return NxMath_clamp_INVOKE(ClassPointer, doSetFunctionPointers, v, hi, low);
		}
		
		/// <summary>Clamps v to the range [hi,lo]. </summary>
		public double clamp(double v, double hi, double low)
		{
			return NxMath_clamp_1_INVOKE(ClassPointer, doSetFunctionPointers, v, hi, low);
		}
		
		/// <summary>Clamps v to the range [hi,lo]. </summary>
		public uint clamp(uint v, uint hi, uint low)
		{
			return NxMath_clamp_2_INVOKE(ClassPointer, doSetFunctionPointers, v, hi, low);
		}
		
		/// <summary>Clamps v to the range [hi,lo]. </summary>
		public int clamp(int v, int hi, int low)
		{
			return NxMath_clamp_3_INVOKE(ClassPointer, doSetFunctionPointers, v, hi, low);
		}
		
		/// <summary>powers </summary>
		public float sqrt(float unknown62)
		{
			return NxMath_sqrt_INVOKE(ClassPointer, doSetFunctionPointers, unknown62);
		}
		
		/// <summary>Square root. </summary>
		public double sqrt(double unknown63)
		{
			return NxMath_sqrt_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown63);
		}
		
		/// <summary>reciprocal square root. </summary>
		public float recipSqrt(float unknown64)
		{
			return NxMath_recipSqrt_INVOKE(ClassPointer, doSetFunctionPointers, unknown64);
		}
		
		/// <summary>reciprocal square root. </summary>
		public double recipSqrt(double unknown65)
		{
			return NxMath_recipSqrt_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown65);
		}
		
		/// <summary>Calculates x raised to the power of y. </summary>
		public float pow(float x, float y)
		{
			return NxMath_pow_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>Calculates x raised to the power of y. </summary>
		public double pow(double x, double y)
		{
			return NxMath_pow_1_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>Calculates e^n. </summary>
		public float exp(float unknown66)
		{
			return NxMath_exp_INVOKE(ClassPointer, doSetFunctionPointers, unknown66);
		}
		
		/// <summary>Calculates e^n. </summary>
		public double exp(double unknown67)
		{
			return NxMath_exp_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown67);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public float logE(float unknown68)
		{
			return NxMath_logE_INVOKE(ClassPointer, doSetFunctionPointers, unknown68);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public double logE(double unknown69)
		{
			return NxMath_logE_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown69);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public float log2(float unknown70)
		{
			return NxMath_log2_INVOKE(ClassPointer, doSetFunctionPointers, unknown70);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public double log2(double unknown71)
		{
			return NxMath_log2_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown71);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public float log10(float unknown72)
		{
			return NxMath_log10_INVOKE(ClassPointer, doSetFunctionPointers, unknown72);
		}
		
		/// <summary>Calculates logarithms. </summary>
		public double log10(double unknown73)
		{
			return NxMath_log10_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown73);
		}
		
		/// <summary>trigonometry -- all angles are in radians. </summary>
		public float degToRad(float unknown74)
		{
			return NxMath_degToRad_INVOKE(ClassPointer, doSetFunctionPointers, unknown74);
		}
		
		/// <summary>Converts degrees to radians. </summary>
		public double degToRad(double unknown75)
		{
			return NxMath_degToRad_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown75);
		}
		
		/// <summary>Converts radians to degrees. </summary>
		public float radToDeg(float unknown76)
		{
			return NxMath_radToDeg_INVOKE(ClassPointer, doSetFunctionPointers, unknown76);
		}
		
		/// <summary>Converts radians to degrees. </summary>
		public double radToDeg(double unknown77)
		{
			return NxMath_radToDeg_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown77);
		}
		
		/// <summary>Sine of an angle. </summary>
		public float sin(float unknown78)
		{
			return NxMath_sin_INVOKE(ClassPointer, doSetFunctionPointers, unknown78);
		}
		
		/// <summary>Sine of an angle. </summary>
		public double sin(double unknown79)
		{
			return NxMath_sin_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown79);
		}
		
		/// <summary>Cosine of an angle. </summary>
		public float cos(float unknown80)
		{
			return NxMath_cos_INVOKE(ClassPointer, doSetFunctionPointers, unknown80);
		}
		
		/// <summary>Cosine of an angle. </summary>
		public double cos(double unknown81)
		{
			return NxMath_cos_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown81);
		}
		
		/// <summary>Computes both the sin and cos. </summary>
		public void sinCos(float unknown82, ref float sin, ref float cos)
		{
			NxMath_sinCos_INVOKE(ClassPointer, doSetFunctionPointers, unknown82, ref sin, ref cos);
		}
		
		/// <summary>Computes both the sin and cos. </summary>
		public void sinCos(double unknown83, ref double sin, ref double cos)
		{
			NxMath_sinCos_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown83, ref sin, ref cos);
		}
		
		/// <summary>Tangent of an angle. </summary>
		public float tan(float unknown84)
		{
			return NxMath_tan_INVOKE(ClassPointer, doSetFunctionPointers, unknown84);
		}
		
		/// <summary>Tangent of an angle. </summary>
		public double tan(double unknown85)
		{
			return NxMath_tan_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown85);
		}
		
		/// <summary>Arcsine. </summary>
		public float asin(float unknown86)
		{
			return NxMath_asin_INVOKE(ClassPointer, doSetFunctionPointers, unknown86);
		}
		
		/// <summary>Arcsine. </summary>
		public double asin(double unknown87)
		{
			return NxMath_asin_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown87);
		}
		
		/// <summary>Arccosine. </summary>
		public float acos(float unknown88)
		{
			return NxMath_acos_INVOKE(ClassPointer, doSetFunctionPointers, unknown88);
		}
		
		/// <summary>Arccosine. </summary>
		public double acos(double unknown89)
		{
			return NxMath_acos_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown89);
		}
		
		/// <summary>ArcTangent. </summary>
		public float atan(float unknown90)
		{
			return NxMath_atan_INVOKE(ClassPointer, doSetFunctionPointers, unknown90);
		}
		
		/// <summary>ArcTangent. </summary>
		public double atan(double unknown91)
		{
			return NxMath_atan_1_INVOKE(ClassPointer, doSetFunctionPointers, unknown91);
		}
		
		/// <summary>Arctangent of (x/y) with correct sign. </summary>
		public float atan2(float x, float y)
		{
			return NxMath_atan2_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>Arctangent of (x/y) with correct sign. </summary>
		public double atan2(double x, double y)
		{
			return NxMath_atan2_1_INVOKE(ClassPointer, doSetFunctionPointers, x, y);
		}
		
		/// <summary>uniform random number in [a,b] </summary>
		public float rand(float a, float b)
		{
			return NxMath_rand_INVOKE(ClassPointer, doSetFunctionPointers, a, b);
		}
		
		/// <summary>uniform random number in [a,b] </summary>
		public int rand(int a, int b)
		{
			return NxMath_rand_1_INVOKE(ClassPointer, doSetFunctionPointers, a, b);
		}
		
		/// <summary>hashing: hashes an array of n 32 bit values to a 32 bit value. </summary>
		public uint hash(uint[] array, uint n)
		{
			return NxMath_hash_INVOKE(ClassPointer, doSetFunctionPointers, array, n);
		}
		
		/// <summary>hash32 </summary>
		public int hash32(int unknown92)
		{
			return NxMath_hash32_INVOKE(ClassPointer, doSetFunctionPointers, unknown92);
		}
		
		/// <summary>returns true if the passed number is a finite floating point number as opposed to INF, NAN, etc. </summary>
		public bool isFinite(float x)
		{
			return NxMath_isFinite_INVOKE(ClassPointer, doSetFunctionPointers, x);
		}
		
		/// <summary>returns true if the passed number is a finite floating point number as opposed to INF, NAN, etc. </summary>
		public bool isFinite(double x)
		{
			return NxMath_isFinite_1_INVOKE(ClassPointer, doSetFunctionPointers, x);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_equals")]
        private extern static System.Boolean NxMath_equals_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown26, System.Single unknown27, System.Single eps);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_equals_1")]
        private extern static System.Boolean NxMath_equals_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown28, System.Double unknown29, System.Double eps);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_floor")]
        private extern static System.Single NxMath_floor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown30);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_floor_1")]
        private extern static System.Double NxMath_floor_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown31);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_ceil")]
        private extern static System.Single NxMath_ceil_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown32);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_ceil_1")]
        private extern static System.Double NxMath_ceil_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown33);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_trunc")]
        private extern static System.Int32 NxMath_trunc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown34);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_trunc_1")]
        private extern static System.Int32 NxMath_trunc_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown35);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_abs")]
        private extern static System.Single NxMath_abs_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown36);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_abs_1")]
        private extern static System.Double NxMath_abs_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown37);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_abs_2")]
        private extern static System.Int32 NxMath_abs_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 unknown38);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sign")]
        private extern static System.Single NxMath_sign_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown39);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sign_1")]
        private extern static System.Double NxMath_sign_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown40);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sign_2")]
        private extern static System.Int32 NxMath_sign_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 unknown41);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_max")]
        private extern static System.Single NxMath_max_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown42, System.Single unknown43);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_max_1")]
        private extern static System.Double NxMath_max_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown44, System.Double unknown45);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_max_2")]
        private extern static System.Int32 NxMath_max_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 unknown46, System.Int32 unknown47);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_max_3")]
        private extern static System.UInt32 NxMath_max_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 unknown48, System.UInt32 unknown49);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_max_4")]
        private extern static System.UInt16 NxMath_max_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown50, System.UInt16 unknown51);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_min")]
        private extern static System.Single NxMath_min_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown52, System.Single unknown53);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_min_1")]
        private extern static System.Double NxMath_min_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown54, System.Double unknown55);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_min_2")]
        private extern static System.Int32 NxMath_min_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 unknown56, System.Int32 unknown57);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_min_3")]
        private extern static System.UInt32 NxMath_min_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 unknown58, System.UInt32 unknown59);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_min_4")]
        private extern static System.UInt16 NxMath_min_4_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown60, System.UInt16 unknown61);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_mod")]
        private extern static System.Single NxMath_mod_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_mod_1")]
        private extern static System.Double NxMath_mod_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double x, System.Double y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_clamp")]
        private extern static System.Single NxMath_clamp_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single v, System.Single hi, System.Single low);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_clamp_1")]
        private extern static System.Double NxMath_clamp_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double v, System.Double hi, System.Double low);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_clamp_2")]
        private extern static System.UInt32 NxMath_clamp_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 v, System.UInt32 hi, System.UInt32 low);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_clamp_3")]
        private extern static System.Int32 NxMath_clamp_3_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 v, System.Int32 hi, System.Int32 low);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sqrt")]
        private extern static System.Single NxMath_sqrt_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown62);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sqrt_1")]
        private extern static System.Double NxMath_sqrt_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown63);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_recipSqrt")]
        private extern static System.Single NxMath_recipSqrt_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown64);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_recipSqrt_1")]
        private extern static System.Double NxMath_recipSqrt_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown65);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_pow")]
        private extern static System.Single NxMath_pow_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_pow_1")]
        private extern static System.Double NxMath_pow_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double x, System.Double y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_exp")]
        private extern static System.Single NxMath_exp_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown66);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_exp_1")]
        private extern static System.Double NxMath_exp_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown67);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_logE")]
        private extern static System.Single NxMath_logE_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown68);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_logE_1")]
        private extern static System.Double NxMath_logE_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown69);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_log2")]
        private extern static System.Single NxMath_log2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown70);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_log2_1")]
        private extern static System.Double NxMath_log2_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown71);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_log10")]
        private extern static System.Single NxMath_log10_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown72);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_log10_1")]
        private extern static System.Double NxMath_log10_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown73);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_degToRad")]
        private extern static System.Single NxMath_degToRad_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown74);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_degToRad_1")]
        private extern static System.Double NxMath_degToRad_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown75);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_radToDeg")]
        private extern static System.Single NxMath_radToDeg_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown76);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_radToDeg_1")]
        private extern static System.Double NxMath_radToDeg_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown77);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sin")]
        private extern static System.Single NxMath_sin_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown78);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sin_1")]
        private extern static System.Double NxMath_sin_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown79);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_cos")]
        private extern static System.Single NxMath_cos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown80);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_cos_1")]
        private extern static System.Double NxMath_cos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown81);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sinCos")]
        private extern static void NxMath_sinCos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown82, [In()] [Out()] ref System.Single sin, [In()] [Out()] ref System.Single cos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_sinCos_1")]
        private extern static void NxMath_sinCos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown83, [In()] [Out()] ref System.Double sin, [In()] [Out()] ref System.Double cos);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_tan")]
        private extern static System.Single NxMath_tan_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown84);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_tan_1")]
        private extern static System.Double NxMath_tan_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown85);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_asin")]
        private extern static System.Single NxMath_asin_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown86);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_asin_1")]
        private extern static System.Double NxMath_asin_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown87);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_acos")]
        private extern static System.Single NxMath_acos_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown88);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_acos_1")]
        private extern static System.Double NxMath_acos_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown89);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_atan")]
        private extern static System.Single NxMath_atan_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown90);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_atan_1")]
        private extern static System.Double NxMath_atan_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double unknown91);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_atan2")]
        private extern static System.Single NxMath_atan2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_atan2_1")]
        private extern static System.Double NxMath_atan2_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double x, System.Double y);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_rand")]
        private extern static System.Single NxMath_rand_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single a, System.Single b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_rand_1")]
        private extern static System.Int32 NxMath_rand_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 a, System.Int32 b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_hash")]
        private extern static System.UInt32 NxMath_hash_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32[] array, System.UInt32 n);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_hash32")]
        private extern static System.Int32 NxMath_hash32_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Int32 unknown92);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_isFinite")]
        private extern static System.Boolean NxMath_isFinite_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMath_isFinite_1")]
        private extern static System.Boolean NxMath_isFinite_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Double x);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMath")]
        private extern static IntPtr new_NxMath_INVOKE (bool do_override);

		
		public NxMath() : 
				base(new_NxMath_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxMath GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxMath)(obj.Target));
				}
			}
			return new NxMath(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
