//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxWheelShapeDesc : NxShapeDesc
	{
		
		internal NxWheelShapeDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>distance from wheel axle to a point on the contact surface. </summary>
		public float radius
		{
			get
			{
				float value = get_NxWheelShapeDesc_radius_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_radius_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>maximum extension distance of suspension along shape's -Y axis. </summary>
		public float suspensionTravel
		{
			get
			{
				float value = get_NxWheelShapeDesc_suspensionTravel_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_suspensionTravel_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>data intended for car wheel suspension effects. </summary>
		public NxSpringDesc suspension
		{
			get
			{
				return NxSpringDesc.GetClass(get_NxWheelShapeDesc_suspension_INVOKE(ClassPointer));
			}
			set
			{
				set_NxWheelShapeDesc_suspension_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>cubic hermite spline coefficients describing the longitudal tire force curve. </summary>
		public NxTireFunctionDesc longitudalTireForceFunction
		{
			get
			{
				return NxTireFunctionDesc.GetClass(get_NxWheelShapeDesc_longitudalTireForceFunction_INVOKE(ClassPointer));
			}
			set
			{
				set_NxWheelShapeDesc_longitudalTireForceFunction_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>cubic hermite spline coefficients describing the lateral tire force curve. </summary>
		public NxTireFunctionDesc lateralTireForceFunction
		{
			get
			{
				return NxTireFunctionDesc.GetClass(get_NxWheelShapeDesc_lateralTireForceFunction_INVOKE(ClassPointer));
			}
			set
			{
				set_NxWheelShapeDesc_lateralTireForceFunction_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>inverse mass of the wheel. </summary>
		public float inverseWheelMass
		{
			get
			{
				float value = get_NxWheelShapeDesc_inverseWheelMass_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_inverseWheelMass_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>flags from NxWheelShapeFlags </summary>
		public uint wheelFlags
		{
			get
			{
				uint value = get_NxWheelShapeDesc_wheelFlags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_wheelFlags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sum engine torque on the wheel axle. </summary>
		public float motorTorque
		{
			get
			{
				float value = get_NxWheelShapeDesc_motorTorque_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_motorTorque_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The amount of torque applied for braking. </summary>
		public float brakeTorque
		{
			get
			{
				float value = get_NxWheelShapeDesc_brakeTorque_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_brakeTorque_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>steering angle, around shape Y axis. </summary>
		public float steerAngle
		{
			get
			{
				float value = get_NxWheelShapeDesc_steerAngle_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelShapeDesc_steerAngle_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>callback used for modifying the wheel contact point before the wheel constraints are created. </summary>
		public NxUserWheelContactModify wheelContactModify
		{
			get
			{
				return NxUserWheelContactModify.GetClass(get_NxWheelShapeDesc_wheelContactModify_INVOKE(ClassPointer));
			}
			set
			{
				set_NxWheelShapeDesc_wheelContactModify_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary></summary>
		public NxWheelShapeDesc() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxWheelShapeDesc)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxWheelShapeDesc_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxWheelShapeDesc_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		/// <param name="fromCtor">Avoid redundant work if called from constructor. </param>
		public void setToDefault(bool fromCtor)
		{
			NxWheelShapeDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers, fromCtor);
		}
		
		private void setToDefault_virtual(bool fromCtor)
		{
			setToDefault(fromCtor);
		}
		
		delegate void setToDefault_0_delegate(bool fromCtor);
		
		
		
		
		
		
		private setToDefault_0_delegate setToDefault_0_delegatefield;
		
		/// <summary>returns true if the current settings are valid </summary>
		public override bool isValid()
		{
			return NxWheelShapeDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isValid_virtual()
		{
			return isValid();
		}
		
		delegate bool isValid_1_delegate();
		
		
		
		
		
		
		private isValid_1_delegate isValid_1_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_radius")]
        private extern static void set_NxWheelShapeDesc_radius_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_radius")]
        private extern static System.Single get_NxWheelShapeDesc_radius_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_suspensionTravel")]
        private extern static void set_NxWheelShapeDesc_suspensionTravel_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_suspensionTravel")]
        private extern static System.Single get_NxWheelShapeDesc_suspensionTravel_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_suspension")]
        private extern static void set_NxWheelShapeDesc_suspension_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_suspension")]
        private extern static IntPtr get_NxWheelShapeDesc_suspension_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_longitudalTireForceFunction")]
        private extern static void set_NxWheelShapeDesc_longitudalTireForceFunction_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_longitudalTireForceFunction")]
        private extern static IntPtr get_NxWheelShapeDesc_longitudalTireForceFunction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_lateralTireForceFunction")]
        private extern static void set_NxWheelShapeDesc_lateralTireForceFunction_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_lateralTireForceFunction")]
        private extern static IntPtr get_NxWheelShapeDesc_lateralTireForceFunction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_inverseWheelMass")]
        private extern static void set_NxWheelShapeDesc_inverseWheelMass_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_inverseWheelMass")]
        private extern static System.Single get_NxWheelShapeDesc_inverseWheelMass_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_wheelFlags")]
        private extern static void set_NxWheelShapeDesc_wheelFlags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_wheelFlags")]
        private extern static System.UInt32 get_NxWheelShapeDesc_wheelFlags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_motorTorque")]
        private extern static void set_NxWheelShapeDesc_motorTorque_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_motorTorque")]
        private extern static System.Single get_NxWheelShapeDesc_motorTorque_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_brakeTorque")]
        private extern static void set_NxWheelShapeDesc_brakeTorque_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_brakeTorque")]
        private extern static System.Single get_NxWheelShapeDesc_brakeTorque_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_steerAngle")]
        private extern static void set_NxWheelShapeDesc_steerAngle_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_steerAngle")]
        private extern static System.Single get_NxWheelShapeDesc_steerAngle_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelShapeDesc_wheelContactModify")]
        private extern static void set_NxWheelShapeDesc_wheelContactModify_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelShapeDesc_wheelContactModify")]
        private extern static IntPtr get_NxWheelShapeDesc_wheelContactModify_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxWheelShapeDesc")]
        private extern static IntPtr new_NxWheelShapeDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShapeDesc_setToDefault")]
        private extern static void NxWheelShapeDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean fromCtor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxWheelShapeDesc_isValid")]
        private extern static System.Boolean NxWheelShapeDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxWheelShapeDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxWheelShapeDesc)(obj.Target));
				}
			}
			return new NxWheelShapeDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setToDefault_0_delegatefield = new setToDefault_0_delegate(this.setToDefault_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToDefault_0_delegatefield));
			isValid_1_delegatefield = new isValid_1_delegate(this.isValid_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isValid_1_delegatefield));
			return list;
		}
	}
}
