//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxD6JointDesc : NxJointDesc
	{
		
		internal NxD6JointDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Define the linear degrees of freedom. </summary>
		public NxD6JointMotion xMotion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_xMotion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_xMotion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxD6JointMotion yMotion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_yMotion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_yMotion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxD6JointMotion zMotion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_zMotion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_zMotion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Define the angular degrees of freedom. </summary>
		public NxD6JointMotion swing1Motion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_swing1Motion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_swing1Motion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxD6JointMotion swing2Motion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_swing2Motion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_swing2Motion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxD6JointMotion twistMotion
		{
			get
			{
				NxD6JointMotion value = get_NxD6JointDesc_twistMotion_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_twistMotion_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If some linear DOF are limited, linearLimit defines the characteristics of these limits. </summary>
		public NxJointLimitSoftDesc linearLimit
		{
			get
			{
				return NxJointLimitSoftDesc.GetClass(get_NxD6JointDesc_linearLimit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_linearLimit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>If swing1Motion is NX_D6JOINT_MOTION_LIMITED, swing1Limit defines the characteristics of the limit. </summary>
		public NxJointLimitSoftDesc swing1Limit
		{
			get
			{
				return NxJointLimitSoftDesc.GetClass(get_NxD6JointDesc_swing1Limit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_swing1Limit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>If swing2Motion is NX_D6JOINT_MOTION_LIMITED, swing2Limit defines the characteristics of the limit. </summary>
		public NxJointLimitSoftDesc swing2Limit
		{
			get
			{
				return NxJointLimitSoftDesc.GetClass(get_NxD6JointDesc_swing2Limit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_swing2Limit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>If twistMotion is NX_D6JOINT_MOTION_LIMITED, twistLimit defines the characteristics of the limit. </summary>
		public NxJointLimitSoftPairDesc twistLimit
		{
			get
			{
				return NxJointLimitSoftPairDesc.GetClass(get_NxD6JointDesc_twistLimit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_twistLimit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Drive the three linear DOF. </summary>
		public NxJointDriveDesc xDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_xDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_xDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary></summary>
		public NxJointDriveDesc yDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_yDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_yDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary></summary>
		public NxJointDriveDesc zDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_zDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_zDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>These drives are used if the flag NX_D6JOINT_SLERP_DRIVE is not set. </summary>
		public NxJointDriveDesc swingDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_swingDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_swingDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary></summary>
		public NxJointDriveDesc twistDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_twistDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_twistDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>This drive is used if the flag NX_D6JOINT_SLERP_DRIVE is set. </summary>
		public NxJointDriveDesc slerpDrive
		{
			get
			{
				return NxJointDriveDesc.GetClass(get_NxD6JointDesc_slerpDrive_INVOKE(ClassPointer));
			}
			set
			{
				set_NxD6JointDesc_slerpDrive_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>If the type of xDrive (yDrive,zDrive) is NX_D6JOINT_DRIVE_POSITION, drivePosition defines the goal position. </summary>
		public NxVec3 drivePosition
		{
			get
			{
				NxVec3 value = get_NxD6JointDesc_drivePosition_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_drivePosition_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the type of swingDrive or twistDrive is NX_D6JOINT_DRIVE_POSITION, driveOrientation defines the goal orientation. </summary>
		public NxQuat driveOrientation
		{
			get
			{
				NxQuat value = get_NxD6JointDesc_driveOrientation_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_driveOrientation_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the type of xDrive (yDrive,zDrive) is NX_D6JOINT_DRIVE_VELOCITY, driveLinearVelocity defines the goal linear velocity. </summary>
		public NxVec3 driveLinearVelocity
		{
			get
			{
				NxVec3 value = get_NxD6JointDesc_driveLinearVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_driveLinearVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If the type of swingDrive or twistDrive is NX_D6JOINT_DRIVE_VELOCITY, driveAngularVelocity defines the goal angular velocity. </summary>
		public NxVec3 driveAngularVelocity
		{
			get
			{
				NxVec3 value = get_NxD6JointDesc_driveAngularVelocity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_driveAngularVelocity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>If projectionMode is NX_JPM_NONE, projection is disabled. If NX_JPM_POINT_MINDIST, bodies are projected to limits leaving an linear error of projectionDistance and an angular error of projectionAngle. </summary>
		public NxJointProjectionMode projectionMode
		{
			get
			{
				NxJointProjectionMode value = get_NxD6JointDesc_projectionMode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_projectionMode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The distance above which to project the joint. </summary>
		public float projectionDistance
		{
			get
			{
				float value = get_NxD6JointDesc_projectionDistance_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_projectionDistance_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The angle above which to project the joint. </summary>
		public float projectionAngle
		{
			get
			{
				float value = get_NxD6JointDesc_projectionAngle_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_projectionAngle_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>when the flag NX_D6JOINT_GEAR_ENABLED is set, the angular velocity of the second actor is driven towards the angular velocity of the first actor times gearRatio (both w.r.t. their primary axis) </summary>
		public float gearRatio
		{
			get
			{
				float value = get_NxD6JointDesc_gearRatio_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_gearRatio_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>This is a combination of the bits defined by NxD6JointFlag. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxD6JointDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxD6JointDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>constructor sets to default. </summary>
		public NxD6JointDesc() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxD6JointDesc)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxD6JointDesc_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxD6JointDesc_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public override void setToDefault()
		{
			NxD6JointDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void setToDefault_virtual()
		{
			setToDefault();
		}
		
		delegate void setToDefault_0_delegate();
		
		
		
		
		
		
		private setToDefault_0_delegate setToDefault_0_delegatefield;
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public override bool isValid()
		{
			return NxD6JointDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isValid_virtual()
		{
			return isValid();
		}
		
		delegate bool isValid_1_delegate();
		
		
		
		
		
		
		private isValid_1_delegate isValid_1_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_xMotion")]
        private extern static void set_NxD6JointDesc_xMotion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_xMotion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_xMotion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_yMotion")]
        private extern static void set_NxD6JointDesc_yMotion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_yMotion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_yMotion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_zMotion")]
        private extern static void set_NxD6JointDesc_zMotion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_zMotion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_zMotion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_swing1Motion")]
        private extern static void set_NxD6JointDesc_swing1Motion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_swing1Motion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_swing1Motion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_swing2Motion")]
        private extern static void set_NxD6JointDesc_swing2Motion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_swing2Motion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_swing2Motion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_twistMotion")]
        private extern static void set_NxD6JointDesc_twistMotion_INVOKE (HandleRef classPointer, NxD6JointMotion newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_twistMotion")]
        private extern static NxD6JointMotion get_NxD6JointDesc_twistMotion_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_linearLimit")]
        private extern static void set_NxD6JointDesc_linearLimit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_linearLimit")]
        private extern static IntPtr get_NxD6JointDesc_linearLimit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_swing1Limit")]
        private extern static void set_NxD6JointDesc_swing1Limit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_swing1Limit")]
        private extern static IntPtr get_NxD6JointDesc_swing1Limit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_swing2Limit")]
        private extern static void set_NxD6JointDesc_swing2Limit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_swing2Limit")]
        private extern static IntPtr get_NxD6JointDesc_swing2Limit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_twistLimit")]
        private extern static void set_NxD6JointDesc_twistLimit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_twistLimit")]
        private extern static IntPtr get_NxD6JointDesc_twistLimit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_xDrive")]
        private extern static void set_NxD6JointDesc_xDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_xDrive")]
        private extern static IntPtr get_NxD6JointDesc_xDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_yDrive")]
        private extern static void set_NxD6JointDesc_yDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_yDrive")]
        private extern static IntPtr get_NxD6JointDesc_yDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_zDrive")]
        private extern static void set_NxD6JointDesc_zDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_zDrive")]
        private extern static IntPtr get_NxD6JointDesc_zDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_swingDrive")]
        private extern static void set_NxD6JointDesc_swingDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_swingDrive")]
        private extern static IntPtr get_NxD6JointDesc_swingDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_twistDrive")]
        private extern static void set_NxD6JointDesc_twistDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_twistDrive")]
        private extern static IntPtr get_NxD6JointDesc_twistDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_slerpDrive")]
        private extern static void set_NxD6JointDesc_slerpDrive_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_slerpDrive")]
        private extern static IntPtr get_NxD6JointDesc_slerpDrive_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_drivePosition")]
        private extern static void set_NxD6JointDesc_drivePosition_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_drivePosition")]
        private extern static NxVec3 get_NxD6JointDesc_drivePosition_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_driveOrientation")]
        private extern static void set_NxD6JointDesc_driveOrientation_INVOKE (HandleRef classPointer, NxQuat newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_driveOrientation")]
        private extern static NxQuat get_NxD6JointDesc_driveOrientation_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_driveLinearVelocity")]
        private extern static void set_NxD6JointDesc_driveLinearVelocity_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_driveLinearVelocity")]
        private extern static NxVec3 get_NxD6JointDesc_driveLinearVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_driveAngularVelocity")]
        private extern static void set_NxD6JointDesc_driveAngularVelocity_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_driveAngularVelocity")]
        private extern static NxVec3 get_NxD6JointDesc_driveAngularVelocity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_projectionMode")]
        private extern static void set_NxD6JointDesc_projectionMode_INVOKE (HandleRef classPointer, NxJointProjectionMode newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_projectionMode")]
        private extern static NxJointProjectionMode get_NxD6JointDesc_projectionMode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_projectionDistance")]
        private extern static void set_NxD6JointDesc_projectionDistance_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_projectionDistance")]
        private extern static System.Single get_NxD6JointDesc_projectionDistance_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_projectionAngle")]
        private extern static void set_NxD6JointDesc_projectionAngle_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_projectionAngle")]
        private extern static System.Single get_NxD6JointDesc_projectionAngle_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_gearRatio")]
        private extern static void set_NxD6JointDesc_gearRatio_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_gearRatio")]
        private extern static System.Single get_NxD6JointDesc_gearRatio_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxD6JointDesc_flags")]
        private extern static void set_NxD6JointDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxD6JointDesc_flags")]
        private extern static System.UInt32 get_NxD6JointDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxD6JointDesc")]
        private extern static IntPtr new_NxD6JointDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxD6JointDesc_setToDefault")]
        private extern static void NxD6JointDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxD6JointDesc_isValid")]
        private extern static System.Boolean NxD6JointDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxD6JointDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxD6JointDesc)(obj.Target));
				}
			}
			return new NxD6JointDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setToDefault_0_delegatefield = new setToDefault_0_delegate(this.setToDefault_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToDefault_0_delegatefield));
			isValid_1_delegatefield = new isValid_1_delegate(this.isValid_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isValid_1_delegatefield));
			return list;
		}
	}
}
