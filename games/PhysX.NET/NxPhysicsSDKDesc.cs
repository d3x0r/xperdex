//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxPhysicsSDKDesc : DoxyBindObject
	{
		
		internal NxPhysicsSDKDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>size of hardware mesh pages. Currently only the value 65536 is supported. </summary>
		public uint hwPageSize
		{
			get
			{
				uint value = get_NxPhysicsSDKDesc_hwPageSize_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxPhysicsSDKDesc_hwPageSize_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>maximum number of hardware pages supported concurrently on hardware. The valid value must be power of 2. </summary>
		public uint hwPageMax
		{
			get
			{
				uint value = get_NxPhysicsSDKDesc_hwPageMax_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxPhysicsSDKDesc_hwPageMax_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>maximum number of convex meshes which will be resident on hardware. The valid value must be power of 2. </summary>
		public uint hwConvexMax
		{
			get
			{
				uint value = get_NxPhysicsSDKDesc_hwConvexMax_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxPhysicsSDKDesc_hwConvexMax_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Thread affinity mask for the background cooker thread. Defaults to 0 which means the SDK determines the affinity. </summary>
		public uint cookerThreadMask
		{
			get
			{
				uint value = get_NxPhysicsSDKDesc_cookerThreadMask_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxPhysicsSDKDesc_cookerThreadMask_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>SDK creation flags. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxPhysicsSDKDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxPhysicsSDKDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxPhysicsSDKDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxPhysicsSDKDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public NxPhysicsSDKDesc() : 
				base(new_NxPhysicsSDKDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxPhysicsSDKDesc_hwPageSize")]
        private extern static void set_NxPhysicsSDKDesc_hwPageSize_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxPhysicsSDKDesc_hwPageSize")]
        private extern static System.UInt32 get_NxPhysicsSDKDesc_hwPageSize_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxPhysicsSDKDesc_hwPageMax")]
        private extern static void set_NxPhysicsSDKDesc_hwPageMax_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxPhysicsSDKDesc_hwPageMax")]
        private extern static System.UInt32 get_NxPhysicsSDKDesc_hwPageMax_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxPhysicsSDKDesc_hwConvexMax")]
        private extern static void set_NxPhysicsSDKDesc_hwConvexMax_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxPhysicsSDKDesc_hwConvexMax")]
        private extern static System.UInt32 get_NxPhysicsSDKDesc_hwConvexMax_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxPhysicsSDKDesc_cookerThreadMask")]
        private extern static void set_NxPhysicsSDKDesc_cookerThreadMask_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxPhysicsSDKDesc_cookerThreadMask")]
        private extern static System.UInt32 get_NxPhysicsSDKDesc_cookerThreadMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxPhysicsSDKDesc_flags")]
        private extern static void set_NxPhysicsSDKDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxPhysicsSDKDesc_flags")]
        private extern static System.UInt32 get_NxPhysicsSDKDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDKDesc_setToDefault")]
        private extern static void NxPhysicsSDKDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxPhysicsSDKDesc_isValid")]
        private extern static System.Boolean NxPhysicsSDKDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxPhysicsSDKDesc")]
        private extern static IntPtr new_NxPhysicsSDKDesc_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxPhysicsSDKDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxPhysicsSDKDesc)(obj.Target));
				}
			}
			return new NxPhysicsSDKDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
