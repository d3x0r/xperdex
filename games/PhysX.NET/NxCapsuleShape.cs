//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCapsuleShape : NxShape
	{
		
		internal NxCapsuleShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Call this to initialize or alter the capsule. </summary>
		/// <param name="radius">The new radius of the capsule. Range: (0,inf) </param>
		/// <param name="height">The new height of the capsule. Range: (0,inf)</param>
		public virtual void setDimensions(float radius, float height)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleShape_setDimensions_INVOKE(ClassPointer, doSetFunctionPointers, radius, height);
		}
		
		private void setDimensions_virtual(float radius, float height)
		{
			setDimensions(radius, height);
		}
		
		delegate void setDimensions_0_delegate(float radius, float height);
		
		
		
		
		
		
		private setDimensions_0_delegate setDimensions_0_delegatefield;
		
		/// <summary>Alters the radius of the capsule. </summary>
		/// <param name="radius">The new radius of the capsule. Range: (0,inf)</param>
		public virtual void setRadius(float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleShape_setRadius_INVOKE(ClassPointer, doSetFunctionPointers, radius);
		}
		
		private void setRadius_virtual(float radius)
		{
			setRadius(radius);
		}
		
		delegate void setRadius_1_delegate(float radius);
		
		
		
		
		
		
		private setRadius_1_delegate setRadius_1_delegatefield;
		
		/// <summary>Retrieves the radius of the capsule. </summary>
		public virtual float getRadius()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleShape_getRadius_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRadius_virtual()
		{
			return getRadius();
		}
		
		delegate float getRadius_2_delegate();
		
		
		
		
		
		
		private getRadius_2_delegate getRadius_2_delegatefield;
		
		/// <summary>Alters the height of the capsule. </summary>
		/// <param name="height">The new height of the capsule. Range: (0,inf)</param>
		public virtual void setHeight(float height)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleShape_setHeight_INVOKE(ClassPointer, doSetFunctionPointers, height);
		}
		
		private void setHeight_virtual(float height)
		{
			setHeight(height);
		}
		
		delegate void setHeight_3_delegate(float height);
		
		
		
		
		
		
		private setHeight_3_delegate setHeight_3_delegatefield;
		
		/// <summary>Retrieves the height of the capsule. </summary>
		public virtual float getHeight()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleShape_getHeight_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getHeight_virtual()
		{
			return getHeight();
		}
		
		delegate float getHeight_4_delegate();
		
		
		
		
		
		
		private getHeight_4_delegate getHeight_4_delegatefield;
		
		/// <summary>Retrieves the capsule parameters in world space. See NxCapsule. </summary>
		/// <param name="worldCapsule">Use to retrieve the capsule parameters in world space.</param>
		public virtual void getWorldCapsule(NxCapsule worldCapsule)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleShape_getWorldCapsule_INVOKE(ClassPointer, doSetFunctionPointers, (worldCapsule!=null ? worldCapsule.ClassPointer : NullRef));
		}
		
		private void getWorldCapsule_virtual(IntPtr worldCapsule)
		{
			getWorldCapsule(NxCapsule.GetClass(worldCapsule));
		}
		
		delegate void getWorldCapsule_5_delegate(IntPtr worldCapsule);
		
		
		
		
		
		
		private getWorldCapsule_5_delegate getWorldCapsule_5_delegatefield;
		
		/// <summary></summary>
		public virtual void saveToDesc(NxCapsuleShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleShape_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxCapsuleShapeDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_6_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_6_delegate saveToDesc_6_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_setDimensions")]
        private extern static void NxCapsuleShape_setDimensions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius, System.Single height);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_setRadius")]
        private extern static void NxCapsuleShape_setRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_getRadius")]
        private extern static System.Single NxCapsuleShape_getRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_setHeight")]
        private extern static void NxCapsuleShape_setHeight_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single height);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_getHeight")]
        private extern static System.Single NxCapsuleShape_getHeight_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_getWorldCapsule")]
        private extern static void NxCapsuleShape_getWorldCapsule_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldCapsule);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleShape_saveToDesc")]
        private extern static void NxCapsuleShape_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCapsuleShape")]
        private extern static IntPtr new_NxCapsuleShape_INVOKE (bool do_override);

		
		protected NxCapsuleShape() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxCapsuleShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCapsuleShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCapsuleShape_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCapsuleShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCapsuleShape)(obj.Target));
				}
			}
			return new NxCapsuleShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setDimensions_0_delegatefield = new setDimensions_0_delegate(this.setDimensions_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setDimensions_0_delegatefield));
			setRadius_1_delegatefield = new setRadius_1_delegate(this.setRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRadius_1_delegatefield));
			getRadius_2_delegatefield = new getRadius_2_delegate(this.getRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRadius_2_delegatefield));
			setHeight_3_delegatefield = new setHeight_3_delegate(this.setHeight_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setHeight_3_delegatefield));
			getHeight_4_delegatefield = new getHeight_4_delegate(this.getHeight_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHeight_4_delegatefield));
			getWorldCapsule_5_delegatefield = new getWorldCapsule_5_delegate(this.getWorldCapsule_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getWorldCapsule_5_delegatefield));
			saveToDesc_6_delegatefield = new saveToDesc_6_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_6_delegatefield));
			return list;
		}
	}
}
