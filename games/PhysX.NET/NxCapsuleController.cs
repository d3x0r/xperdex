//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCapsuleController : NxController
	{
		
		internal NxCapsuleController(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		protected NxCapsuleController() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxCapsuleController)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCapsuleController_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCapsuleController_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Gets controller's radius. </summary>
		public virtual float getRadius()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_getRadius_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRadius_virtual()
		{
			return getRadius();
		}
		
		delegate float getRadius_0_delegate();
		
		
		
		
		
		
		private getRadius_0_delegate getRadius_0_delegatefield;
		
		/// <summary>Sets controller's radius. </summary>
		/// <param name="radius">The new radius for the controller. </param>
		public virtual bool setRadius(float radius)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_setRadius_INVOKE(ClassPointer, doSetFunctionPointers, radius);
		}
		
		private bool setRadius_virtual(float radius)
		{
			return setRadius(radius);
		}
		
		delegate bool setRadius_1_delegate(float radius);
		
		
		
		
		
		
		private setRadius_1_delegate setRadius_1_delegatefield;
		
		/// <summary>Gets controller's height. </summary>
		public virtual float getHeight()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_getHeight_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getHeight_virtual()
		{
			return getHeight();
		}
		
		delegate float getHeight_2_delegate();
		
		
		
		
		
		
		private getHeight_2_delegate getHeight_2_delegatefield;
		
		/// <summary>Gets controller's climbing mode. </summary>
		public virtual NxCapsuleClimbingMode getClimbingMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_getClimbingMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxCapsuleClimbingMode getClimbingMode_virtual()
		{
			return getClimbingMode();
		}
		
		delegate NxCapsuleClimbingMode getClimbingMode_3_delegate();
		
		
		
		
		
		
		private getClimbingMode_3_delegate getClimbingMode_3_delegatefield;
		
		/// <summary>Resets controller's height. </summary>
		/// <param name="height">The new height for the controller. </param>
		public virtual bool setHeight(float height)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_setHeight_INVOKE(ClassPointer, doSetFunctionPointers, height);
		}
		
		private bool setHeight_virtual(float height)
		{
			return setHeight(height);
		}
		
		delegate bool setHeight_4_delegate(float height);
		
		
		
		
		
		
		private setHeight_4_delegate setHeight_4_delegatefield;
		
		/// <summary>Sets the step height/offset for the controller. </summary>
		/// <param name="offset">The new step offset.</param>
		public override void setStepOffset(float offset)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleController_setStepOffset_INVOKE(ClassPointer, doSetFunctionPointers, offset);
		}
		
		private void setStepOffset_virtual(float offset)
		{
			setStepOffset(offset);
		}
		
		delegate void setStepOffset_5_delegate(float offset);
		
		
		
		
		
		
		private setStepOffset_5_delegate setStepOffset_5_delegatefield;
		
		/// <summary>Sets controller's climbing mode. </summary>
		/// <param name="mode">The capsule controller's climbing mode.</param>
		public virtual bool setClimbingMode(NxCapsuleClimbingMode mode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCapsuleController_setClimbingMode_INVOKE(ClassPointer, doSetFunctionPointers, mode);
		}
		
		private bool setClimbingMode_virtual(NxCapsuleClimbingMode mode)
		{
			return setClimbingMode(mode);
		}
		
		delegate bool setClimbingMode_6_delegate(NxCapsuleClimbingMode mode);
		
		
		
		
		
		
		private setClimbingMode_6_delegate setClimbingMode_6_delegatefield;
		
		/// <summary>The character controller uses caching in order to speed up collision testing, this caching can not detect when static objects have changed in the scene. You need to call this method when such changes have been made. </summary>
		public override void reportSceneChanged()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCapsuleController_reportSceneChanged_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void reportSceneChanged_virtual()
		{
			reportSceneChanged();
		}
		
		delegate void reportSceneChanged_7_delegate();
		
		
		
		
		
		
		private reportSceneChanged_7_delegate reportSceneChanged_7_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCapsuleController")]
        private extern static IntPtr new_NxCapsuleController_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_getRadius")]
        private extern static System.Single NxCapsuleController_getRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_setRadius")]
        private extern static System.Boolean NxCapsuleController_setRadius_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single radius);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_getHeight")]
        private extern static System.Single NxCapsuleController_getHeight_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_getClimbingMode")]
        private extern static NxCapsuleClimbingMode NxCapsuleController_getClimbingMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_setHeight")]
        private extern static System.Boolean NxCapsuleController_setHeight_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single height);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_setStepOffset")]
        private extern static void NxCapsuleController_setStepOffset_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single offset);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_setClimbingMode")]
        private extern static System.Boolean NxCapsuleController_setClimbingMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxCapsuleClimbingMode mode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCapsuleController_reportSceneChanged")]
        private extern static void NxCapsuleController_reportSceneChanged_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCapsuleController GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCapsuleController)(obj.Target));
				}
			}
			return new NxCapsuleController(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getRadius_0_delegatefield = new getRadius_0_delegate(this.getRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRadius_0_delegatefield));
			setRadius_1_delegatefield = new setRadius_1_delegate(this.setRadius_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRadius_1_delegatefield));
			getHeight_2_delegatefield = new getHeight_2_delegate(this.getHeight_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHeight_2_delegatefield));
			getClimbingMode_3_delegatefield = new getClimbingMode_3_delegate(this.getClimbingMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getClimbingMode_3_delegatefield));
			setHeight_4_delegatefield = new setHeight_4_delegate(this.setHeight_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setHeight_4_delegatefield));
			setStepOffset_5_delegatefield = new setStepOffset_5_delegate(this.setStepOffset_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStepOffset_5_delegatefield));
			setClimbingMode_6_delegatefield = new setClimbingMode_6_delegate(this.setClimbingMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setClimbingMode_6_delegatefield));
			reportSceneChanged_7_delegatefield = new reportSceneChanged_7_delegate(this.reportSceneChanged_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(reportSceneChanged_7_delegatefield));
			return list;
		}
	}
}
