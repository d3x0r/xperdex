//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxEffector : DoxyBindObject
	{
		
		internal NxEffector(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxEffector_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxEffector_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>used internally, do not change. </summary>
		public System.IntPtr appData
		{
			get
			{
				System.IntPtr value = get_NxEffector_appData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxEffector_appData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Retrieve the type of this effector. </summary>
		public virtual NxEffectorType getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxEffector_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxEffectorType getType_virtual()
		{
			return getType();
		}
		
		delegate NxEffectorType getType_0_delegate();
		
		
		
		
		
		
		private getType_0_delegate getType_0_delegatefield;
		
		/// <summary>Type casting operator. The result may be cast to the desired subclass type. </summary>
		/// <param name="type">Used to query for a specific effector type. </param>
		public System.IntPtr @is(NxEffectorType type)
		{
			return NxEffector_is_INVOKE(ClassPointer, doSetFunctionPointers, type);
		}
				
		/// <summary>Attempts to perform a downcast to the type returned. </summary>
		public NxSpringAndDamperEffector isSpringAndDamperEffector()
		{
			return NxSpringAndDamperEffector.GetClass(NxEffector_isSpringAndDamperEffector_INVOKE(ClassPointer, doSetFunctionPointers));
		}
				
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxEffector_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_1_delegate(string name);
		
		
		
		
		
		
		private setName_1_delegate setName_1_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxEffector_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_2_delegate();
		
		
		
		
		
		
		private getName_2_delegate getName_2_delegatefield;
		
		/// <summary>Retrieves the owner scene. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxEffector_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_3_delegate();
		
		
		
		
		
		
		private getScene_3_delegate getScene_3_delegatefield;
		
		/// <summary></summary>
		protected NxEffector() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxEffector)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxEffector_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxEffector_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxEffector_userData")]
        private extern static void set_NxEffector_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxEffector_userData")]
        private extern static System.IntPtr get_NxEffector_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxEffector_appData")]
        private extern static void set_NxEffector_appData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxEffector_appData")]
        private extern static System.IntPtr get_NxEffector_appData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_getType")]
        private extern static NxEffectorType NxEffector_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_is")]
        private extern static System.IntPtr NxEffector_is_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxEffectorType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_is_1")]
        private extern static System.IntPtr NxEffector_is_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxEffectorType type);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_isSpringAndDamperEffector")]
        private extern static IntPtr NxEffector_isSpringAndDamperEffector_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_isSpringAndDamperEffector_1")]
        private extern static IntPtr NxEffector_isSpringAndDamperEffector_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_setName")]
        private extern static void NxEffector_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_getName")]
        private extern static System.String NxEffector_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxEffector_getScene")]
        private extern static IntPtr NxEffector_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxEffector")]
        private extern static IntPtr new_NxEffector_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxEffector GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxEffector)(obj.Target));
				}
			}
			return new NxEffector(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getType_0_delegatefield = new getType_0_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_0_delegatefield));
			setName_1_delegatefield = new setName_1_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_1_delegatefield));
			getName_2_delegatefield = new getName_2_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_2_delegatefield));
			getScene_3_delegatefield = new getScene_3_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_3_delegatefield));
			return list;
		}
	}
}
