//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserOutputStream : DoxyBindObject
	{
		
		internal NxUserOutputStream(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Reports an error code. </summary>
		/// <param name="code">Error code, see NxErrorCode</param>
		/// <param name="message">Message to display. </param>
		/// <param name="file">File error occured in. </param>
		/// <param name="line">Line number error occured on. </param>
		public virtual void reportError(NxErrorCode code, string message, string file, int line)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserOutputStream_reportError_INVOKE(ClassPointer, doSetFunctionPointers, code, message, file, line);
		}
		
		private void reportError_virtual(NxErrorCode code, string message, string file, int line)
		{
			reportError(code, message, file, line);
		}
		
		delegate void reportError_0_delegate(NxErrorCode code, string message, string file, int line);
		
		
		
		
		
		
		private reportError_0_delegate reportError_0_delegatefield;
		
		/// <summary>Reports an assertion violation. The user should return. </summary>
		/// <param name="message">Message to display. </param>
		/// <param name="file">File error occured in. </param>
		/// <param name="line">Line number error occured on. </param>
		public virtual NxAssertResponse reportAssertViolation(string message, string file, int line)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserOutputStream_reportAssertViolation_INVOKE(ClassPointer, doSetFunctionPointers, message, file, line);
		}
		
		private NxAssertResponse reportAssertViolation_virtual(string message, string file, int line)
		{
			return reportAssertViolation(message, file, line);
		}
		
		delegate NxAssertResponse reportAssertViolation_1_delegate(string message, string file, int line);
		
		
		
		
		
		
		private reportAssertViolation_1_delegate reportAssertViolation_1_delegatefield;
		
		/// <summary>Simply prints some debug text. </summary>
		/// <param name="message">Message to display. </param>
		public virtual void print(string message)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxUserOutputStream_print_INVOKE(ClassPointer, doSetFunctionPointers, message);
		}
		
		private void print_virtual(string message)
		{
			print(message);
		}
		
		delegate void print_2_delegate(string message);
		
		
		
		
		
		
		private print_2_delegate print_2_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserOutputStream_reportError")]
        private extern static void NxUserOutputStream_reportError_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxErrorCode code, System.String message, System.String file, System.Int32 line);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserOutputStream_reportAssertViolation")]
        private extern static NxAssertResponse NxUserOutputStream_reportAssertViolation_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String message, System.String file, System.Int32 line);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserOutputStream_print")]
        private extern static void NxUserOutputStream_print_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String message);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserOutputStream")]
        private extern static IntPtr new_NxUserOutputStream_INVOKE (bool do_override);

		
		protected NxUserOutputStream() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserOutputStream)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserOutputStream_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserOutputStream_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserOutputStream GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserOutputStream)(obj.Target));
				}
			}
			return new NxUserOutputStream(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			reportError_0_delegatefield = new reportError_0_delegate(this.reportError_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(reportError_0_delegatefield));
			reportAssertViolation_1_delegatefield = new reportAssertViolation_1_delegate(this.reportAssertViolation_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(reportAssertViolation_1_delegatefield));
			print_2_delegatefield = new print_2_delegate(this.print_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(print_2_delegatefield));
			return list;
		}
	}
}
