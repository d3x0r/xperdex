//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSphericalJoint : NxJoint
	{
		
		internal NxSphericalJoint(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Use this for changing a significant number of joint parameters at once. </summary>
		/// <param name="desc">The descriptor used to set the state of the object.</param>
		public virtual void loadFromDesc(NxSphericalJointDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphericalJoint_loadFromDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void loadFromDesc_virtual(IntPtr desc)
		{
			loadFromDesc(NxSphericalJointDesc.GetClass(desc));
		}
		
		delegate void loadFromDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private loadFromDesc_0_delegate loadFromDesc_0_delegatefield;
		
		/// <summary>Writes all of the object's attributes to the desc struct. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object.</param>
		public virtual void saveToDesc(NxSphericalJointDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphericalJoint_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxSphericalJointDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_1_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_1_delegate saveToDesc_1_delegatefield;
		
		/// <summary>Sets the flags to enable/disable the spring/motor/limit. </summary>
		/// <param name="flags">The new value for the joint flags.</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphericalJoint_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_2_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_2_delegate setFlags_2_delegatefield;
		
		/// <summary>Returns the current flag settings. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSphericalJoint_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_3_delegate();
		
		
		
		
		
		
		private getFlags_3_delegate getFlags_3_delegatefield;
		
		/// <summary>Sets the joint projection mode. </summary>
		/// <param name="projectionMode">The new projection mode for the joint. See NxJointProjectionMode.</param>
		public virtual void setProjectionMode(NxJointProjectionMode projectionMode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxSphericalJoint_setProjectionMode_INVOKE(ClassPointer, doSetFunctionPointers, projectionMode);
		}
		
		private void setProjectionMode_virtual(NxJointProjectionMode projectionMode)
		{
			setProjectionMode(projectionMode);
		}
		
		delegate void setProjectionMode_4_delegate(NxJointProjectionMode projectionMode);
		
		
		
		
		
		
		private setProjectionMode_4_delegate setProjectionMode_4_delegatefield;
		
		/// <summary>Returns the current flag settings. </summary>
		public virtual NxJointProjectionMode getProjectionMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxSphericalJoint_getProjectionMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxJointProjectionMode getProjectionMode_virtual()
		{
			return getProjectionMode();
		}
		
		delegate NxJointProjectionMode getProjectionMode_5_delegate();
		
		
		
		
		
		
		private getProjectionMode_5_delegate getProjectionMode_5_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_loadFromDesc")]
        private extern static void NxSphericalJoint_loadFromDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_saveToDesc")]
        private extern static void NxSphericalJoint_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_setFlags")]
        private extern static void NxSphericalJoint_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_getFlags")]
        private extern static System.UInt32 NxSphericalJoint_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_setProjectionMode")]
        private extern static void NxSphericalJoint_setProjectionMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxJointProjectionMode projectionMode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJoint_getProjectionMode")]
        private extern static NxJointProjectionMode NxSphericalJoint_getProjectionMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSphericalJoint")]
        private extern static IntPtr new_NxSphericalJoint_INVOKE (bool do_override);

		
		protected NxSphericalJoint() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxSphericalJoint)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSphericalJoint_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSphericalJoint_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSphericalJoint GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSphericalJoint)(obj.Target));
				}
			}
			return new NxSphericalJoint(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			loadFromDesc_0_delegatefield = new loadFromDesc_0_delegate(this.loadFromDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadFromDesc_0_delegatefield));
			saveToDesc_1_delegatefield = new saveToDesc_1_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_1_delegatefield));
			setFlags_2_delegatefield = new setFlags_2_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_2_delegatefield));
			getFlags_3_delegatefield = new getFlags_3_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_3_delegatefield));
			setProjectionMode_4_delegatefield = new setProjectionMode_4_delegate(this.setProjectionMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setProjectionMode_4_delegatefield));
			getProjectionMode_5_delegatefield = new getProjectionMode_5_delegate(this.getProjectionMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getProjectionMode_5_delegatefield));
			return list;
		}
	}
}
