//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxJointLimitSoftDesc : DoxyBindObject
	{
		
		internal NxJointLimitSoftDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>the angle / position beyond which the limit is active. </summary>
		public float value
		{
			get
			{
				float value = get_NxJointLimitSoftDesc_value_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointLimitSoftDesc_value_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Controls the amount of bounce when the joint hits a limit. </summary>
		public float restitution
		{
			get
			{
				float value = get_NxJointLimitSoftDesc_restitution_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointLimitSoftDesc_restitution_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>if greater than zero, the limit is soft, i.e. a spring pulls the joint back to the limit </summary>
		public float spring
		{
			get
			{
				float value = get_NxJointLimitSoftDesc_spring_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointLimitSoftDesc_spring_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>if spring is greater than zero, this is the damping of the spring </summary>
		public float damping
		{
			get
			{
				float value = get_NxJointLimitSoftDesc_damping_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointLimitSoftDesc_damping_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor, sets members to default values. </summary>
		public NxJointLimitSoftDesc() : 
				base(new_NxJointLimitSoftDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Sets members to default values. </summary>
		public void setToDefault()
		{
			NxJointLimitSoftDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxJointLimitSoftDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointLimitSoftDesc_value")]
        private extern static void set_NxJointLimitSoftDesc_value_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointLimitSoftDesc_value")]
        private extern static System.Single get_NxJointLimitSoftDesc_value_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointLimitSoftDesc_restitution")]
        private extern static void set_NxJointLimitSoftDesc_restitution_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointLimitSoftDesc_restitution")]
        private extern static System.Single get_NxJointLimitSoftDesc_restitution_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointLimitSoftDesc_spring")]
        private extern static void set_NxJointLimitSoftDesc_spring_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointLimitSoftDesc_spring")]
        private extern static System.Single get_NxJointLimitSoftDesc_spring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointLimitSoftDesc_damping")]
        private extern static void set_NxJointLimitSoftDesc_damping_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointLimitSoftDesc_damping")]
        private extern static System.Single get_NxJointLimitSoftDesc_damping_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxJointLimitSoftDesc")]
        private extern static IntPtr new_NxJointLimitSoftDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointLimitSoftDesc_setToDefault")]
        private extern static void NxJointLimitSoftDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointLimitSoftDesc_isValid")]
        private extern static System.Boolean NxJointLimitSoftDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxJointLimitSoftDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxJointLimitSoftDesc)(obj.Target));
				}
			}
			return new NxJointLimitSoftDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
