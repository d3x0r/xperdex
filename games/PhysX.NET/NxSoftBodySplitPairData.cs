//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSoftBodySplitPairData : DoxyBindObject
	{
		
		internal NxSoftBodySplitPairData(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Specifies the maximal number of splits the buffer can hold. </summary>
		public uint maxSplitPairs
		{
			get
			{
				uint value = get_NxSoftBodySplitPairData_maxSplitPairs_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodySplitPairData_maxSplitPairs_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Points to the user-allocated memory holding the number of splits stored in the buffer. </summary>
		public uint[] numSplitPairsPtr
		{
			get
			{
				uint[] value = get_NxSoftBodySplitPairData_numSplitPairsPtr_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodySplitPairData_numSplitPairsPtr_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The pointer to the user-allocated buffer of split pairs. </summary>
		public NxSoftBodySplitPair splitPairsBegin
		{
			get
			{
				return NxSoftBodySplitPair.GetClass(get_NxSoftBodySplitPairData_splitPairsBegin_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSoftBodySplitPairData_splitPairsBegin_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>The separation (in bytes) between consecutive split pairs. </summary>
		public uint splitPairsByteStride
		{
			get
			{
				uint value = get_NxSoftBodySplitPairData_splitPairsByteStride_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSoftBodySplitPairData_splitPairsByteStride_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>(Re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxSoftBodySplitPairData_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the current settings are valid. </summary>
		public bool isValid()
		{
			return NxSoftBodySplitPairData_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxSoftBodySplitPairData() : 
				base(new_NxSoftBodySplitPairData_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodySplitPairData_maxSplitPairs")]
        private extern static void set_NxSoftBodySplitPairData_maxSplitPairs_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodySplitPairData_maxSplitPairs")]
        private extern static System.UInt32 get_NxSoftBodySplitPairData_maxSplitPairs_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodySplitPairData_numSplitPairsPtr")]
        private extern static void set_NxSoftBodySplitPairData_numSplitPairsPtr_INVOKE (HandleRef classPointer, System.UInt32[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodySplitPairData_numSplitPairsPtr")]
        private extern static System.UInt32[] get_NxSoftBodySplitPairData_numSplitPairsPtr_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodySplitPairData_splitPairsBegin")]
        private extern static void set_NxSoftBodySplitPairData_splitPairsBegin_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodySplitPairData_splitPairsBegin")]
        private extern static IntPtr get_NxSoftBodySplitPairData_splitPairsBegin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSoftBodySplitPairData_splitPairsByteStride")]
        private extern static void set_NxSoftBodySplitPairData_splitPairsByteStride_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSoftBodySplitPairData_splitPairsByteStride")]
        private extern static System.UInt32 get_NxSoftBodySplitPairData_splitPairsByteStride_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBodySplitPairData_setToDefault")]
        private extern static void NxSoftBodySplitPairData_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSoftBodySplitPairData_isValid")]
        private extern static System.Boolean NxSoftBodySplitPairData_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSoftBodySplitPairData")]
        private extern static IntPtr new_NxSoftBodySplitPairData_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSoftBodySplitPairData GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSoftBodySplitPairData)(obj.Target));
				}
			}
			return new NxSoftBodySplitPairData(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
