//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCookingInterface : DoxyBindObject
	{
		
		internal NxCookingInterface(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Sets cooking parameters. </summary>
		/// <param name="params">Cooking parameters</param>
		public virtual bool NxSetCookingParams(NxCookingParams @params)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxSetCookingParams_INVOKE(ClassPointer, doSetFunctionPointers, (@params!=null ? @params.ClassPointer : NullRef));
		}
		
		private bool NxSetCookingParams_virtual(IntPtr @params)
		{
			return NxSetCookingParams(NxCookingParams.GetClass(@params));
		}
		
		delegate bool NxSetCookingParams_0_delegate(IntPtr @params);
		
		
		
		
		
		
		private NxSetCookingParams_0_delegate NxSetCookingParams_0_delegatefield;
		
		/// <summary>Gets cooking parameters. </summary>
		public virtual NxCookingParams NxGetCookingParams()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingParams.GetClass(NxCookingInterface_NxGetCookingParams_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr NxGetCookingParams_virtual()
		{
			return NxGetCookingParams().ClassPointer.Handle;
		}
		
		delegate IntPtr NxGetCookingParams_1_delegate();
		
		
		
		
		
		
		private NxGetCookingParams_1_delegate NxGetCookingParams_1_delegatefield;
		
		/// <summary>Checks endianness is the same between cooking & target platforms. </summary>
		public virtual bool NxPlatformMismatch()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxPlatformMismatch_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool NxPlatformMismatch_virtual()
		{
			return NxPlatformMismatch();
		}
		
		delegate bool NxPlatformMismatch_2_delegate();
		
		
		
		
		
		
		private NxPlatformMismatch_2_delegate NxPlatformMismatch_2_delegatefield;
		
		/// <summary>Initializes cooking. </summary>
		/// <param name="allocator">The memory allocator to use. </param>
		/// <param name="outputStream">The output stream to use. </param>
		public virtual bool NxInitCooking(NxUserAllocator allocator, NxUserOutputStream outputStream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxInitCooking_INVOKE(ClassPointer, doSetFunctionPointers, (allocator!=null ? allocator.ClassPointer : NullRef), (outputStream!=null ? outputStream.ClassPointer : NullRef));
		}
		
		private bool NxInitCooking_virtual(IntPtr allocator, IntPtr outputStream)
		{
			return NxInitCooking(NxUserAllocator.GetClass(allocator), NxUserOutputStream.GetClass(outputStream));
		}
		
		delegate bool NxInitCooking_3_delegate(IntPtr allocator, IntPtr outputStream);
		
		
		
		
		
		
		private NxInitCooking_3_delegate NxInitCooking_3_delegatefield;
		
		/// <summary>Initializes cooking. </summary>
		/// <param name="allocator">The memory allocator to use. </param>
		/// <param name="outputStream">The output stream to use. </param>
		public virtual bool NxInitCooking(NxUserAllocator allocator)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxInitCooking_1_INVOKE(ClassPointer, doSetFunctionPointers, (allocator!=null ? allocator.ClassPointer : NullRef));
		}
		
		private bool NxInitCooking_virtual(IntPtr allocator)
		{
			return NxInitCooking(NxUserAllocator.GetClass(allocator));
		}
		
		delegate bool NxInitCooking_4_delegate(IntPtr allocator);
		
		
		
		
		
		
		private NxInitCooking_4_delegate NxInitCooking_4_delegatefield;
		
		/// <summary>Closes cooking. </summary>
		public virtual void NxCloseCooking()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCookingInterface_NxCloseCooking_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxCloseCooking_virtual()
		{
			NxCloseCooking();
		}
		
		delegate void NxCloseCooking_5_delegate();
		
		
		
		
		
		
		private NxCloseCooking_5_delegate NxCloseCooking_5_delegatefield;
		
		/// <summary>Cooks a triangle mesh. The results are written to the stream. </summary>
		/// <param name="desc">The triangle mesh descriptor to read the mesh from. </param>
		/// <param name="stream">User stream to output the cooked data. </param>
		public virtual bool NxCookTriangleMesh(NxTriangleMeshDesc desc, NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCookTriangleMesh_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef), (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private bool NxCookTriangleMesh_virtual(IntPtr desc, IntPtr stream)
		{
			return NxCookTriangleMesh(NxTriangleMeshDesc.GetClass(desc), NxStream.GetClass(stream));
		}
		
		delegate bool NxCookTriangleMesh_6_delegate(IntPtr desc, IntPtr stream);
		
		
		
		
		
		
		private NxCookTriangleMesh_6_delegate NxCookTriangleMesh_6_delegatefield;
		
		/// <summary>Cooks a convex mesh. The results are written to the stream. </summary>
		/// <param name="desc">The convex mesh descriptor to read the mesh from. </param>
		/// <param name="stream">User stream to output the cooked data. </param>
		public virtual bool NxCookConvexMesh(NxConvexMeshDesc desc, NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCookConvexMesh_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef), (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private bool NxCookConvexMesh_virtual(IntPtr desc, IntPtr stream)
		{
			return NxCookConvexMesh(NxConvexMeshDesc.GetClass(desc), NxStream.GetClass(stream));
		}
		
		delegate bool NxCookConvexMesh_7_delegate(IntPtr desc, IntPtr stream);
		
		
		
		
		
		
		private NxCookConvexMesh_7_delegate NxCookConvexMesh_7_delegatefield;
		
		/// <summary>Cooks a triangle mesh to a ClothMesh. </summary>
		/// <param name="desc">The cloth mesh descriptor on which the generation of the cooked mesh depends. </param>
		/// <param name="stream">The stream the cooked mesh is written to. </param>
		public virtual bool NxCookClothMesh(NxClothMeshDesc desc, NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCookClothMesh_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef), (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private bool NxCookClothMesh_virtual(IntPtr desc, IntPtr stream)
		{
			return NxCookClothMesh(NxClothMeshDesc.GetClass(desc), NxStream.GetClass(stream));
		}
		
		delegate bool NxCookClothMesh_8_delegate(IntPtr desc, IntPtr stream);
		
		
		
		
		
		
		private NxCookClothMesh_8_delegate NxCookClothMesh_8_delegatefield;
		
		/// <summary>Cooks a tetrahedral mesh to a SoftBodyMesh. </summary>
		/// <param name="desc">The soft body mesh descriptor on which the generation of the cooked mesh depends. </param>
		/// <param name="stream">The stream the cooked mesh is written to. </param>
		public virtual bool NxCookSoftBodyMesh(NxSoftBodyMeshDesc desc, NxStream stream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCookSoftBodyMesh_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef), (stream!=null ? stream.ClassPointer : NullRef));
		}
		
		private bool NxCookSoftBodyMesh_virtual(IntPtr desc, IntPtr stream)
		{
			return NxCookSoftBodyMesh(NxSoftBodyMeshDesc.GetClass(desc), NxStream.GetClass(stream));
		}
		
		delegate bool NxCookSoftBodyMesh_9_delegate(IntPtr desc, IntPtr stream);
		
		
		
		
		
		
		private NxCookSoftBodyMesh_9_delegate NxCookSoftBodyMesh_9_delegatefield;
		
		/// <summary>Creates a PMap from a triangle mesh. </summary>
		/// <param name="pmap">Used to store details of the created PMap. </param>
		/// <param name="mesh">Mesh to create PMap from. </param>
		/// <param name="density">The density(resolution) of the PMap. </param>
		/// <param name="outputStream">User supplied interface for reporting errors and displaying messages(see NxUserOutputStream)</param>
		public virtual bool NxCreatePMap(NxPMap pmap, NxTriangleMesh mesh, uint density, NxUserOutputStream outputStream)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCreatePMap_INVOKE(ClassPointer, doSetFunctionPointers, (pmap!=null ? pmap.ClassPointer : NullRef), (mesh!=null ? mesh.ClassPointer : NullRef), density, (outputStream!=null ? outputStream.ClassPointer : NullRef));
		}
		
		private bool NxCreatePMap_virtual(IntPtr pmap, IntPtr mesh, uint density, IntPtr outputStream)
		{
			return NxCreatePMap(NxPMap.GetClass(pmap), NxTriangleMesh.GetClass(mesh), density, NxUserOutputStream.GetClass(outputStream));
		}
		
		delegate bool NxCreatePMap_10_delegate(IntPtr pmap, IntPtr mesh, uint density, IntPtr outputStream);
		
		
		
		
		
		
		private NxCreatePMap_10_delegate NxCreatePMap_10_delegatefield;
		
		/// <summary>Creates a PMap from a triangle mesh. </summary>
		/// <param name="pmap">Used to store details of the created PMap. </param>
		/// <param name="mesh">Mesh to create PMap from. </param>
		/// <param name="density">The density(resolution) of the PMap. </param>
		/// <param name="outputStream">User supplied interface for reporting errors and displaying messages(see NxUserOutputStream)</param>
		public virtual bool NxCreatePMap(NxPMap pmap, NxTriangleMesh mesh, uint density)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxCreatePMap_1_INVOKE(ClassPointer, doSetFunctionPointers, (pmap!=null ? pmap.ClassPointer : NullRef), (mesh!=null ? mesh.ClassPointer : NullRef), density);
		}
		
		private bool NxCreatePMap_virtual(IntPtr pmap, IntPtr mesh, uint density)
		{
			return NxCreatePMap(NxPMap.GetClass(pmap), NxTriangleMesh.GetClass(mesh), density);
		}
		
		delegate bool NxCreatePMap_11_delegate(IntPtr pmap, IntPtr mesh, uint density);
		
		
		
		
		
		
		private NxCreatePMap_11_delegate NxCreatePMap_11_delegatefield;
		
		/// <summary>Releases PMap previously created with NxCreatePMap. </summary>
		/// <param name="pmap">Pmap to release.</param>
		public virtual bool NxReleasePMap(NxPMap pmap)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxReleasePMap_INVOKE(ClassPointer, doSetFunctionPointers, (pmap!=null ? pmap.ClassPointer : NullRef));
		}
		
		private bool NxReleasePMap_virtual(IntPtr pmap)
		{
			return NxReleasePMap(NxPMap.GetClass(pmap));
		}
		
		delegate bool NxReleasePMap_12_delegate(IntPtr pmap);
		
		
		
		
		
		
		private NxReleasePMap_12_delegate NxReleasePMap_12_delegatefield;
		
		/// <summary>Scales an existing cooked convex mesh and outputs it into another stream. </summary>
		/// <param name="source">The source cooked convex mesh to scale. </param>
		/// <param name="scale">The uniform scale factor to apply to the convex mesh. </param>
		/// <param name="dest">User stream to output the cooked data. </param>
		public virtual bool NxScaleCookedConvexMesh(NxStream source, float scale, NxStream dest)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCookingInterface_NxScaleCookedConvexMesh_INVOKE(ClassPointer, doSetFunctionPointers, (source!=null ? source.ClassPointer : NullRef), scale, (dest!=null ? dest.ClassPointer : NullRef));
		}
		
		private bool NxScaleCookedConvexMesh_virtual(IntPtr source, float scale, IntPtr dest)
		{
			return NxScaleCookedConvexMesh(NxStream.GetClass(source), scale, NxStream.GetClass(dest));
		}
		
		delegate bool NxScaleCookedConvexMesh_13_delegate(IntPtr source, float scale, IntPtr dest);
		
		
		
		
		
		
		private NxScaleCookedConvexMesh_13_delegate NxScaleCookedConvexMesh_13_delegatefield;
		
		/// <summary>Report state of cooking memory usage. </summary>
		public virtual void NxReportCooking()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCookingInterface_NxReportCooking_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void NxReportCooking_virtual()
		{
			NxReportCooking();
		}
		
		delegate void NxReportCooking_14_delegate();
		
		
		
		
		
		
		private NxReportCooking_14_delegate NxReportCooking_14_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxSetCookingParams")]
        private extern static System.Boolean NxCookingInterface_NxSetCookingParams_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef @params);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxGetCookingParams")]
        private extern static IntPtr NxCookingInterface_NxGetCookingParams_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxPlatformMismatch")]
        private extern static System.Boolean NxCookingInterface_NxPlatformMismatch_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxInitCooking")]
        private extern static System.Boolean NxCookingInterface_NxInitCooking_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef allocator, HandleRef outputStream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxInitCooking_1")]
        private extern static System.Boolean NxCookingInterface_NxInitCooking_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef allocator);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCloseCooking")]
        private extern static void NxCookingInterface_NxCloseCooking_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCookTriangleMesh")]
        private extern static System.Boolean NxCookingInterface_NxCookTriangleMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCookConvexMesh")]
        private extern static System.Boolean NxCookingInterface_NxCookConvexMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCookClothMesh")]
        private extern static System.Boolean NxCookingInterface_NxCookClothMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCookSoftBodyMesh")]
        private extern static System.Boolean NxCookingInterface_NxCookSoftBodyMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc, HandleRef stream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCreatePMap")]
        private extern static System.Boolean NxCookingInterface_NxCreatePMap_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef pmap, HandleRef mesh, System.UInt32 density, HandleRef outputStream);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxCreatePMap_1")]
        private extern static System.Boolean NxCookingInterface_NxCreatePMap_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef pmap, HandleRef mesh, System.UInt32 density);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxReleasePMap")]
        private extern static System.Boolean NxCookingInterface_NxReleasePMap_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef pmap);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxScaleCookedConvexMesh")]
        private extern static System.Boolean NxCookingInterface_NxScaleCookedConvexMesh_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef source, System.Single scale, HandleRef dest);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCookingInterface_NxReportCooking")]
        private extern static void NxCookingInterface_NxReportCooking_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCookingInterface")]
        private extern static IntPtr new_NxCookingInterface_INVOKE (bool do_override);

		
		protected NxCookingInterface() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxCookingInterface)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCookingInterface_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCookingInterface_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCookingInterface GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCookingInterface)(obj.Target));
				}
			}
			return new NxCookingInterface(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			NxSetCookingParams_0_delegatefield = new NxSetCookingParams_0_delegate(this.NxSetCookingParams_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxSetCookingParams_0_delegatefield));
			NxGetCookingParams_1_delegatefield = new NxGetCookingParams_1_delegate(this.NxGetCookingParams_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxGetCookingParams_1_delegatefield));
			NxPlatformMismatch_2_delegatefield = new NxPlatformMismatch_2_delegate(this.NxPlatformMismatch_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxPlatformMismatch_2_delegatefield));
			NxInitCooking_3_delegatefield = new NxInitCooking_3_delegate(this.NxInitCooking_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxInitCooking_3_delegatefield));
			NxInitCooking_4_delegatefield = new NxInitCooking_4_delegate(this.NxInitCooking_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxInitCooking_4_delegatefield));
			NxCloseCooking_5_delegatefield = new NxCloseCooking_5_delegate(this.NxCloseCooking_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCloseCooking_5_delegatefield));
			NxCookTriangleMesh_6_delegatefield = new NxCookTriangleMesh_6_delegate(this.NxCookTriangleMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCookTriangleMesh_6_delegatefield));
			NxCookConvexMesh_7_delegatefield = new NxCookConvexMesh_7_delegate(this.NxCookConvexMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCookConvexMesh_7_delegatefield));
			NxCookClothMesh_8_delegatefield = new NxCookClothMesh_8_delegate(this.NxCookClothMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCookClothMesh_8_delegatefield));
			NxCookSoftBodyMesh_9_delegatefield = new NxCookSoftBodyMesh_9_delegate(this.NxCookSoftBodyMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCookSoftBodyMesh_9_delegatefield));
			NxCreatePMap_10_delegatefield = new NxCreatePMap_10_delegate(this.NxCreatePMap_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCreatePMap_10_delegatefield));
			NxCreatePMap_11_delegatefield = new NxCreatePMap_11_delegate(this.NxCreatePMap_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxCreatePMap_11_delegatefield));
			NxReleasePMap_12_delegatefield = new NxReleasePMap_12_delegate(this.NxReleasePMap_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxReleasePMap_12_delegatefield));
			NxScaleCookedConvexMesh_13_delegatefield = new NxScaleCookedConvexMesh_13_delegate(this.NxScaleCookedConvexMesh_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxScaleCookedConvexMesh_13_delegatefield));
			NxReportCooking_14_delegatefield = new NxReportCooking_14_delegate(this.NxReportCooking_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(NxReportCooking_14_delegatefield));
			return list;
		}
	}
}
