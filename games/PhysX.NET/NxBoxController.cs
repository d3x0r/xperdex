//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxBoxController : NxController
	{
		
		internal NxBoxController(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		protected NxBoxController() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxBoxController)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxBoxController_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxBoxController_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Gets controller's extents. </summary>
		public virtual NxVec3[] getExtents()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxBoxController_getExtents_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxVec3[] getExtents_virtual()
		{
			return getExtents();
		}
		
		delegate NxVec3[] getExtents_0_delegate();
		
		
		
		
		
		
		private getExtents_0_delegate getExtents_0_delegatefield;
		
		/// <summary>Resets controller's extents. </summary>
		/// <param name="extents">The new extents for the controller. </param>
		public virtual bool setExtents(ref NxVec3 extents)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxBoxController_setExtents_INVOKE(ClassPointer, doSetFunctionPointers, ref extents);
		}
		
		private bool setExtents_virtual([In()] ref NxVec3 extents)
		{
			return setExtents(ref extents);
		}
		
		delegate bool setExtents_1_delegate([In()] ref NxVec3 extents);
		
		
		
		
		
		
		private setExtents_1_delegate setExtents_1_delegatefield;
		
		/// <summary>Sets the step height/offset for the controller. </summary>
		/// <param name="offset">The new step offset.</param>
		public override void setStepOffset(float offset)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxBoxController_setStepOffset_INVOKE(ClassPointer, doSetFunctionPointers, offset);
		}
		
		private void setStepOffset_virtual(float offset)
		{
			setStepOffset(offset);
		}
		
		delegate void setStepOffset_2_delegate(float offset);
		
		
		
		
		
		
		private setStepOffset_2_delegate setStepOffset_2_delegatefield;
		
		/// <summary>The character controller uses caching in order to speed up collision testing, this caching can not detect when static objects have changed in the scene. You need to call this method when such changes have been made. </summary>
		public override void reportSceneChanged()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxBoxController_reportSceneChanged_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void reportSceneChanged_virtual()
		{
			reportSceneChanged();
		}
		
		delegate void reportSceneChanged_3_delegate();
		
		
		
		
		
		
		private reportSceneChanged_3_delegate reportSceneChanged_3_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBoxController")]
        private extern static IntPtr new_NxBoxController_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBoxController_getExtents")]
        private extern static NxVec3[] NxBoxController_getExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBoxController_setExtents")]
        private extern static System.Boolean NxBoxController_setExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 extents);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBoxController_setStepOffset")]
        private extern static void NxBoxController_setStepOffset_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single offset);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBoxController_reportSceneChanged")]
        private extern static void NxBoxController_reportSceneChanged_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxBoxController GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxBoxController)(obj.Target));
				}
			}
			return new NxBoxController(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getExtents_0_delegatefield = new getExtents_0_delegate(this.getExtents_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getExtents_0_delegatefield));
			setExtents_1_delegatefield = new setExtents_1_delegate(this.setExtents_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setExtents_1_delegatefield));
			setStepOffset_2_delegatefield = new setStepOffset_2_delegate(this.setStepOffset_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setStepOffset_2_delegatefield));
			reportSceneChanged_3_delegatefield = new reportSceneChanged_3_delegate(this.reportSceneChanged_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(reportSceneChanged_3_delegatefield));
			return list;
		}
	}
}
