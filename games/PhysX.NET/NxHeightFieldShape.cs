//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxHeightFieldShape : NxShape
	{
		
		internal NxHeightFieldShape(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Saves the state of the shape object to a descriptor. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object.</param>
		public virtual void saveToDesc(NxHeightFieldShapeDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxHeightFieldShape_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxHeightFieldShapeDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Retrieves the height field data associated with this instance. </summary>
		public virtual NxHeightField getHeightField()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightField.GetClass(NxHeightFieldShape_getHeightField_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getHeightField_virtual()
		{
			return getHeightField().ClassPointer.Handle;
		}
		
		delegate IntPtr getHeightField_1_delegate();
		
		
		
		
		
		
		private getHeightField_1_delegate getHeightField_1_delegatefield;
		
		/// <summary>Retrieves the multiplier to transform sample height values to shape space y coordinates. </summary>
		public virtual float getHeightScale()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getHeightScale_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getHeightScale_virtual()
		{
			return getHeightScale();
		}
		
		delegate float getHeightScale_2_delegate();
		
		
		
		
		
		
		private getHeightScale_2_delegate getHeightScale_2_delegatefield;
		
		/// <summary>Retrieves the multiplier to transform height field rows to shape space x coordinates. </summary>
		public virtual float getRowScale()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getRowScale_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getRowScale_virtual()
		{
			return getRowScale();
		}
		
		delegate float getRowScale_3_delegate();
		
		
		
		
		
		
		private getRowScale_3_delegate getRowScale_3_delegatefield;
		
		/// <summary>Retrieves the multiplier to transform height field columns to shape space z coordinates. </summary>
		public virtual float getColumnScale()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getColumnScale_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getColumnScale_virtual()
		{
			return getColumnScale();
		}
		
		delegate float getColumnScale_4_delegate();
		
		
		
		
		
		
		private getColumnScale_4_delegate getColumnScale_4_delegatefield;
		
		/// <summary>Sets the multiplier to transform sample height values to shape space y coordinates. </summary>
		/// <param name="scale">The multiplier to transform sample height values to shape space y coordinates. Range: (0,inf)</param>
		public virtual void setHeightScale(float scale)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxHeightFieldShape_setHeightScale_INVOKE(ClassPointer, doSetFunctionPointers, scale);
		}
		
		private void setHeightScale_virtual(float scale)
		{
			setHeightScale(scale);
		}
		
		delegate void setHeightScale_5_delegate(float scale);
		
		
		
		
		
		
		private setHeightScale_5_delegate setHeightScale_5_delegatefield;
		
		/// <summary>Sets the multiplier to transform height field rows to shape space x coordinates. </summary>
		/// <param name="scale">The multiplier to transform height field rows to shape space x coordinates. Range: (-inf,0), (0,inf)</param>
		public virtual void setRowScale(float scale)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxHeightFieldShape_setRowScale_INVOKE(ClassPointer, doSetFunctionPointers, scale);
		}
		
		private void setRowScale_virtual(float scale)
		{
			setRowScale(scale);
		}
		
		delegate void setRowScale_6_delegate(float scale);
		
		
		
		
		
		
		private setRowScale_6_delegate setRowScale_6_delegatefield;
		
		/// <summary>Sets the multiplier to transform height field columns to shape space z coordinates. </summary>
		/// <param name="scale">The multiplier to transform height field columns to shape space z coordinates. Range: (-inf,0), (0,inf)</param>
		public virtual void setColumnScale(float scale)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxHeightFieldShape_setColumnScale_INVOKE(ClassPointer, doSetFunctionPointers, scale);
		}
		
		private void setColumnScale_virtual(float scale)
		{
			setColumnScale(scale);
		}
		
		delegate void setColumnScale_7_delegate(float scale);
		
		
		
		
		
		
		private setColumnScale_7_delegate setColumnScale_7_delegatefield;
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="worldTri">World space triangle points. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">True if the triangle should be translated to world space. </param>
		/// <param name="worldSpaceRotation">True if the triangle should be rotated to world space.</param>
		public virtual uint getTriangle(NxTriangle worldTri, NxTriangle edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getTriangle_INVOKE(ClassPointer, doSetFunctionPointers, (worldTri!=null ? worldTri.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex, worldSpaceTranslation, worldSpaceRotation);
		}
		
		private uint getTriangle_virtual(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation)
		{
			return getTriangle(NxTriangle.GetClass(worldTri), NxTriangle.GetClass(edgeTri), flags, triangleIndex, worldSpaceTranslation, worldSpaceRotation);
		}
		
		delegate uint getTriangle_8_delegate(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation, bool worldSpaceRotation);
		
		
		
		
		
		
		private getTriangle_8_delegate getTriangle_8_delegatefield;
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="worldTri">World space triangle points. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">True if the triangle should be translated to world space. </param>
		/// <param name="worldSpaceRotation">True if the triangle should be rotated to world space.</param>
		public virtual uint getTriangle(NxTriangle worldTri, NxTriangle edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getTriangle_1_INVOKE(ClassPointer, doSetFunctionPointers, (worldTri!=null ? worldTri.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex, worldSpaceTranslation);
		}
		
		private uint getTriangle_virtual(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation)
		{
			return getTriangle(NxTriangle.GetClass(worldTri), NxTriangle.GetClass(edgeTri), flags, triangleIndex, worldSpaceTranslation);
		}
		
		delegate uint getTriangle_9_delegate(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex, bool worldSpaceTranslation);
		
		
		
		
		
		
		private getTriangle_9_delegate getTriangle_9_delegatefield;
		
		/// <summary>Retrieves triangle data from a triangle ID. </summary>
		/// <param name="worldTri">World space triangle points. </param>
		/// <param name="edgeTri">World space edge normals for triangle (NULL to not compute). </param>
		/// <param name="flags">Flags which show if an edge is convex. See NxTriangleFlags</param>
		/// <param name="triangleIndex">The index of the triangle to retrieve. </param>
		/// <param name="worldSpaceTranslation">True if the triangle should be translated to world space. </param>
		/// <param name="worldSpaceRotation">True if the triangle should be rotated to world space.</param>
		public virtual uint getTriangle(NxTriangle worldTri, NxTriangle edgeTri, uint[] flags, uint triangleIndex)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getTriangle_2_INVOKE(ClassPointer, doSetFunctionPointers, (worldTri!=null ? worldTri.ClassPointer : NullRef), (edgeTri!=null ? edgeTri.ClassPointer : NullRef), flags, triangleIndex);
		}
		
		private uint getTriangle_virtual(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex)
		{
			return getTriangle(NxTriangle.GetClass(worldTri), NxTriangle.GetClass(edgeTri), flags, triangleIndex);
		}
		
		delegate uint getTriangle_10_delegate(IntPtr worldTri, IntPtr edgeTri, uint[] flags, uint triangleIndex);
		
		
		
		
		
		
		private getTriangle_10_delegate getTriangle_10_delegatefield;
		
		/// <summary>Finds triangles touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against. In object or world space depending on NxQueryFlags. Range: See NxBounds3</param>
		/// <param name="flags">Controls if the bounds are in object or world space and if we return first contact only. See NxQueryFlags. </param>
		/// <param name="nb">Retrieves the number of triangle indices touching the AABB. </param>
		/// <param name="indices">Returns an array of touching triangle indices. </param>
		public bool overlapAABBTriangles(NxBounds3 bounds, uint flags, ref uint nb, ref uint[] indices)
		{
			return NxHeightFieldShape_overlapAABBTriangles_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, ref nb, ref indices);
		}
		
		/// <summary></summary>
		public virtual bool overlapAABBTrianglesDeprecated(NxBounds3 bounds, uint flags, ref uint nb, ref uint[] indices)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_overlapAABBTrianglesDeprecated_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, ref nb, ref indices);
		}
		
		private bool overlapAABBTrianglesDeprecated_virtual(IntPtr bounds, uint flags, [In()] [Out()] ref uint nb, [In()] ref uint[] indices)
		{
			return overlapAABBTrianglesDeprecated(NxBounds3.GetClass(bounds), flags, ref nb, ref indices);
		}
		
		delegate bool overlapAABBTrianglesDeprecated_11_delegate(IntPtr bounds, uint flags, [In()] [Out()] ref uint nb, [In()] ref uint[] indices);
		
		
		
		
		
		
		private overlapAABBTrianglesDeprecated_11_delegate overlapAABBTrianglesDeprecated_11_delegatefield;
		
		/// <summary>Finds triangles touching the input bounds. </summary>
		/// <param name="bounds">Bounds to test against. In object or world space depending on NxQueryFlags. Range: See NxBounds3</param>
		/// <param name="flags">Controls if the bounds are in object or world space and if we return first contact only. See NxQueryFlags. </param>
		/// <param name="callback">Used to return triangles which intersect the AABB </param>
		public virtual bool overlapAABBTriangles(NxBounds3 bounds, uint flags, NxUserEntityReport callback)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_overlapAABBTriangles_1_INVOKE(ClassPointer, doSetFunctionPointers, (bounds!=null ? bounds.ClassPointer : NullRef), flags, (callback!=null ? callback.ClassPointer : NullRef));
		}
		
		private bool overlapAABBTriangles_virtual(IntPtr bounds, uint flags, IntPtr callback)
		{
			return overlapAABBTriangles(NxBounds3.GetClass(bounds), flags, NxUserEntityReport.GetClass(callback));
		}
		
		delegate bool overlapAABBTriangles_12_delegate(IntPtr bounds, uint flags, IntPtr callback);
		
		
		
		
		
		
		private overlapAABBTriangles_12_delegate overlapAABBTriangles_12_delegatefield;
		
		/// <summary>Checks if the point in shape space projects onto the height field surface. </summary>
		public virtual bool isShapePointOnHeightField(float x, float z)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_isShapePointOnHeightField_INVOKE(ClassPointer, doSetFunctionPointers, x, z);
		}
		
		private bool isShapePointOnHeightField_virtual(float x, float z)
		{
			return isShapePointOnHeightField(x, z);
		}
		
		delegate bool isShapePointOnHeightField_13_delegate(float x, float z);
		
		
		
		
		
		
		private isShapePointOnHeightField_13_delegate isShapePointOnHeightField_13_delegatefield;
		
		/// <summary>Returns the interpolated height at the given point in shape space. </summary>
		public virtual float getHeightAtShapePoint(float x, float z)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getHeightAtShapePoint_INVOKE(ClassPointer, doSetFunctionPointers, x, z);
		}
		
		private float getHeightAtShapePoint_virtual(float x, float z)
		{
			return getHeightAtShapePoint(x, z);
		}
		
		delegate float getHeightAtShapePoint_14_delegate(float x, float z);
		
		
		
		
		
		
		private getHeightAtShapePoint_14_delegate getHeightAtShapePoint_14_delegatefield;
		
		/// <summary>Returns the material index at the given point in shape space. The return value is the 7 low order bits as set in the samples array. The value may be compared directly with the hole material to determine if the heightfield has a hole at the given point. </summary>
		public virtual ushort getMaterialAtShapePoint(float x, float z)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getMaterialAtShapePoint_INVOKE(ClassPointer, doSetFunctionPointers, x, z);
		}
		
		private ushort getMaterialAtShapePoint_virtual(float x, float z)
		{
			return getMaterialAtShapePoint(x, z);
		}
		
		delegate ushort getMaterialAtShapePoint_15_delegate(float x, float z);
		
		
		
		
		
		
		private getMaterialAtShapePoint_15_delegate getMaterialAtShapePoint_15_delegatefield;
		
		/// <summary>Returns the normal of the heightfield surface at the given point in shape space. </summary>
		public virtual NxVec3 getNormalAtShapePoint(float x, float z)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getNormalAtShapePoint_INVOKE(ClassPointer, doSetFunctionPointers, x, z);
		}
		
		private NxVec3 getNormalAtShapePoint_virtual(float x, float z)
		{
			return getNormalAtShapePoint(x, z);
		}
		
		delegate NxVec3 getNormalAtShapePoint_16_delegate(float x, float z);
		
		
		
		
		
		
		private getNormalAtShapePoint_16_delegate getNormalAtShapePoint_16_delegatefield;
		
		/// <summary>Returns the smoothed normal of the heightfield surface at the given point in shape space. </summary>
		public virtual NxVec3 getSmoothNormalAtShapePoint(float x, float z)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxHeightFieldShape_getSmoothNormalAtShapePoint_INVOKE(ClassPointer, doSetFunctionPointers, x, z);
		}
		
		private NxVec3 getSmoothNormalAtShapePoint_virtual(float x, float z)
		{
			return getSmoothNormalAtShapePoint(x, z);
		}
		
		delegate NxVec3 getSmoothNormalAtShapePoint_17_delegate(float x, float z);
		
		
		
		
		
		
		private getSmoothNormalAtShapePoint_17_delegate getSmoothNormalAtShapePoint_17_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_saveToDesc")]
        private extern static void NxHeightFieldShape_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getHeightField")]
        private extern static IntPtr NxHeightFieldShape_getHeightField_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getHeightScale")]
        private extern static System.Single NxHeightFieldShape_getHeightScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getRowScale")]
        private extern static System.Single NxHeightFieldShape_getRowScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getColumnScale")]
        private extern static System.Single NxHeightFieldShape_getColumnScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_setHeightScale")]
        private extern static void NxHeightFieldShape_setHeightScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single scale);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_setRowScale")]
        private extern static void NxHeightFieldShape_setRowScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single scale);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_setColumnScale")]
        private extern static void NxHeightFieldShape_setColumnScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single scale);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getTriangle")]
        private extern static System.UInt32 NxHeightFieldShape_getTriangle_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldTri, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex, System.Boolean worldSpaceTranslation, System.Boolean worldSpaceRotation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getTriangle_1")]
        private extern static System.UInt32 NxHeightFieldShape_getTriangle_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldTri, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex, System.Boolean worldSpaceTranslation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getTriangle_2")]
        private extern static System.UInt32 NxHeightFieldShape_getTriangle_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef worldTri, HandleRef edgeTri, System.UInt32[] flags, System.UInt32 triangleIndex);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_overlapAABBTriangles")]
        private extern static System.Boolean NxHeightFieldShape_overlapAABBTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_overlapAABBTrianglesDeprecated")]
        private extern static System.Boolean NxHeightFieldShape_overlapAABBTrianglesDeprecated_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, [In()] [Out()] ref System.UInt32 nb, [In()] ref System.UInt32[] indices);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_overlapAABBTriangles_1")]
        private extern static System.Boolean NxHeightFieldShape_overlapAABBTriangles_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef bounds, System.UInt32 flags, HandleRef callback);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_isShapePointOnHeightField")]
        private extern static System.Boolean NxHeightFieldShape_isShapePointOnHeightField_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single z);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getHeightAtShapePoint")]
        private extern static System.Single NxHeightFieldShape_getHeightAtShapePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single z);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getMaterialAtShapePoint")]
        private extern static System.UInt16 NxHeightFieldShape_getMaterialAtShapePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single z);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getNormalAtShapePoint")]
        private extern static NxVec3 NxHeightFieldShape_getNormalAtShapePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single z);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxHeightFieldShape_getSmoothNormalAtShapePoint")]
        private extern static NxVec3 NxHeightFieldShape_getSmoothNormalAtShapePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single x, System.Single z);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxHeightFieldShape")]
        private extern static IntPtr new_NxHeightFieldShape_INVOKE (bool do_override);

		
		protected NxHeightFieldShape() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxHeightFieldShape)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxHeightFieldShape_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxHeightFieldShape_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxHeightFieldShape GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxHeightFieldShape)(obj.Target));
				}
			}
			return new NxHeightFieldShape(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getHeightField_1_delegatefield = new getHeightField_1_delegate(this.getHeightField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHeightField_1_delegatefield));
			getHeightScale_2_delegatefield = new getHeightScale_2_delegate(this.getHeightScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHeightScale_2_delegatefield));
			getRowScale_3_delegatefield = new getRowScale_3_delegate(this.getRowScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRowScale_3_delegatefield));
			getColumnScale_4_delegatefield = new getColumnScale_4_delegate(this.getColumnScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getColumnScale_4_delegatefield));
			setHeightScale_5_delegatefield = new setHeightScale_5_delegate(this.setHeightScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setHeightScale_5_delegatefield));
			setRowScale_6_delegatefield = new setRowScale_6_delegate(this.setRowScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRowScale_6_delegatefield));
			setColumnScale_7_delegatefield = new setColumnScale_7_delegate(this.setColumnScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setColumnScale_7_delegatefield));
			getTriangle_8_delegatefield = new getTriangle_8_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_8_delegatefield));
			getTriangle_9_delegatefield = new getTriangle_9_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_9_delegatefield));
			getTriangle_10_delegatefield = new getTriangle_10_delegate(this.getTriangle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTriangle_10_delegatefield));
			overlapAABBTrianglesDeprecated_11_delegatefield = new overlapAABBTrianglesDeprecated_11_delegate(this.overlapAABBTrianglesDeprecated_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTrianglesDeprecated_11_delegatefield));
			overlapAABBTriangles_12_delegatefield = new overlapAABBTriangles_12_delegate(this.overlapAABBTriangles_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(overlapAABBTriangles_12_delegatefield));
			isShapePointOnHeightField_13_delegatefield = new isShapePointOnHeightField_13_delegate(this.isShapePointOnHeightField_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isShapePointOnHeightField_13_delegatefield));
			getHeightAtShapePoint_14_delegatefield = new getHeightAtShapePoint_14_delegate(this.getHeightAtShapePoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getHeightAtShapePoint_14_delegatefield));
			getMaterialAtShapePoint_15_delegatefield = new getMaterialAtShapePoint_15_delegate(this.getMaterialAtShapePoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMaterialAtShapePoint_15_delegatefield));
			getNormalAtShapePoint_16_delegatefield = new getNormalAtShapePoint_16_delegate(this.getNormalAtShapePoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNormalAtShapePoint_16_delegatefield));
			getSmoothNormalAtShapePoint_17_delegatefield = new getSmoothNormalAtShapePoint_17_delegate(this.getSmoothNormalAtShapePoint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSmoothNormalAtShapePoint_17_delegatefield));
			return list;
		}
	}
}
