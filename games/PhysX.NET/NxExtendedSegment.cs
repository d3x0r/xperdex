//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxExtendedSegment : DoxyBindObject
	{
		
		internal NxExtendedSegment(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Start of segment. </summary>
		public NxExtendedVec3 p0
		{
			get
			{
				NxExtendedVec3 value = get_NxExtendedSegment_p0_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedSegment_p0_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>End of segment. </summary>
		public NxExtendedVec3 p1
		{
			get
			{
				NxExtendedVec3 value = get_NxExtendedSegment_p1_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxExtendedSegment_p1_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxExtendedVec3[] getOrigin()
		{
			return NxExtendedSegment_getOrigin_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public void computeDirection(ref NxVec3 dir)
		{
			NxExtendedSegment_computeDirection_INVOKE(ClassPointer, doSetFunctionPointers, ref dir);
		}
		
		/// <summary></summary>
		public void computePoint(ref NxExtendedVec3 pt, double t)
		{
			NxExtendedSegment_computePoint_INVOKE(ClassPointer, doSetFunctionPointers, ref pt, t);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedSegment_p0")]
        private extern static void set_NxExtendedSegment_p0_INVOKE (HandleRef classPointer, NxExtendedVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedSegment_p0")]
        private extern static NxExtendedVec3 get_NxExtendedSegment_p0_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxExtendedSegment_p1")]
        private extern static void set_NxExtendedSegment_p1_INVOKE (HandleRef classPointer, NxExtendedVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxExtendedSegment_p1")]
        private extern static NxExtendedVec3 get_NxExtendedSegment_p1_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedSegment_getOrigin")]
        private extern static NxExtendedVec3[] NxExtendedSegment_getOrigin_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedSegment_computeDirection")]
        private extern static void NxExtendedSegment_computeDirection_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 dir);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxExtendedSegment_computePoint")]
        private extern static void NxExtendedSegment_computePoint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxExtendedVec3 pt, System.Double t);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxExtendedSegment")]
        private extern static IntPtr new_NxExtendedSegment_INVOKE (bool do_override);

		
		public NxExtendedSegment() : 
				base(new_NxExtendedSegment_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxExtendedSegment GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxExtendedSegment)(obj.Target));
				}
			}
			return new NxExtendedSegment(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
