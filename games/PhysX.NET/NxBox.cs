//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxBox : DoxyBindObject
	{
		
		internal NxBox(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public NxVec3 center
		{
			get
			{
				NxVec3 value = get_NxBox_center_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBox_center_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxVec3 extents
		{
			get
			{
				NxVec3 value = get_NxBox_extents_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBox_extents_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxMat33 rot
		{
			get
			{
				NxMat33 value = get_NxBox_rot_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBox_rot_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor. </summary>
		public NxBox() : 
				base(new_NxBox_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Constructor. </summary>
		/// <param name="_center">Center of the OBB </param>
		/// <param name="_extents">Extents/radii of the obb. </param>
		/// <param name="_rot">rotation to apply to the obb. </param>
		public NxBox(ref NxVec3 _center, ref NxVec3 _extents, ref NxMat33 _rot) : 
				base(new_NxBox_1_INVOKE(false, _center, _extents, _rot))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Setups an empty box. </summary>
		public void setEmpty()
		{
			NxBox_setEmpty_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Recomputes the box after an arbitrary transform by a 4x4 matrix. </summary>
		/// <param name="mtx">[in] the transform matrix </param>
		/// <param name="obb">[out] the transformed OBB </param>
		public void rotate(ref NxMat34 mtx, NxBox obb)
		{
			NxBox_rotate_INVOKE(ClassPointer, doSetFunctionPointers, ref mtx, (obb!=null ? obb.ClassPointer : NullRef));
		}
		
		/// <summary>Checks the box is valid. </summary>
		public bool isValid()
		{
			return NxBox_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Return center of box. </summary>
		public NxVec3[] GetCenter()
		{
			return NxBox_GetCenter_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Return extents(radii) of box. </summary>
		public NxVec3[] GetExtents()
		{
			return NxBox_GetExtents_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>return box rotation. </summary>
		public NxMat33[] GetRot()
		{
			return NxBox_GetRot_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBox_center")]
        private extern static void set_NxBox_center_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBox_center")]
        private extern static NxVec3 get_NxBox_center_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBox_extents")]
        private extern static void set_NxBox_extents_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBox_extents")]
        private extern static NxVec3 get_NxBox_extents_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBox_rot")]
        private extern static void set_NxBox_rot_INVOKE (HandleRef classPointer, NxMat33 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBox_rot")]
        private extern static NxMat33 get_NxBox_rot_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBox")]
        private extern static IntPtr new_NxBox_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBox_1")]
        private extern static IntPtr new_NxBox_1_INVOKE (System.Boolean do_override, NxVec3 _center, NxVec3 _extents, NxMat33 _rot);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_setEmpty")]
        private extern static void NxBox_setEmpty_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_rotate")]
        private extern static void NxBox_rotate_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 mtx, HandleRef obb);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_isValid")]
        private extern static System.Boolean NxBox_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_GetCenter")]
        private extern static NxVec3[] NxBox_GetCenter_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_GetExtents")]
        private extern static NxVec3[] NxBox_GetExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBox_GetRot")]
        private extern static NxMat33[] NxBox_GetRot_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxBox GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxBox)(obj.Target));
				}
			}
			return new NxBox(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
