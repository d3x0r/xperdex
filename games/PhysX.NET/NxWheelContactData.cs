//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxWheelContactData : DoxyBindObject
	{
		
		internal NxWheelContactData(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The point of contact between the wheel shape and the ground. </summary>
		public NxVec3 contactPoint
		{
			get
			{
				NxVec3 value = get_NxWheelContactData_contactPoint_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_contactPoint_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The normal at the point of contact. </summary>
		public NxVec3 contactNormal
		{
			get
			{
				NxVec3 value = get_NxWheelContactData_contactNormal_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_contactNormal_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The direction the wheel is pointing in. </summary>
		public NxVec3 longitudalDirection
		{
			get
			{
				NxVec3 value = get_NxWheelContactData_longitudalDirection_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_longitudalDirection_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The sideways direction for the wheel(at right angles to the longitudinal direction). </summary>
		public NxVec3 lateralDirection
		{
			get
			{
				NxVec3 value = get_NxWheelContactData_lateralDirection_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_lateralDirection_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The magnitude of the force being applied for the contact. </summary>
		public float contactForce
		{
			get
			{
				float value = get_NxWheelContactData_contactForce_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_contactForce_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>What these exactly are depend on NX_WF_INPUT_LAT_SLIPVELOCITY and NX_WF_INPUT_LNG_SLIPVELOCITY flags for the wheel. </summary>
		public float longitudalSlip
		{
			get
			{
				float value = get_NxWheelContactData_longitudalSlip_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_longitudalSlip_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float lateralSlip
		{
			get
			{
				float value = get_NxWheelContactData_lateralSlip_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_lateralSlip_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>the clipped impulses applied at the wheel. </summary>
		public float longitudalImpulse
		{
			get
			{
				float value = get_NxWheelContactData_longitudalImpulse_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_longitudalImpulse_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float lateralImpulse
		{
			get
			{
				float value = get_NxWheelContactData_lateralImpulse_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_lateralImpulse_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The material index of the shape in contact with the wheel. </summary>
		public ushort otherShapeMaterialIndex
		{
			get
			{
				ushort value = get_NxWheelContactData_otherShapeMaterialIndex_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_otherShapeMaterialIndex_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The distance on the spring travel distance where the wheel would end up if it was resting on the contact point. </summary>
		public float contactPosition
		{
			get
			{
				float value = get_NxWheelContactData_contactPosition_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxWheelContactData_contactPosition_INVOKE(ClassPointer, value);
			}
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_contactPoint")]
        private extern static void set_NxWheelContactData_contactPoint_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_contactPoint")]
        private extern static NxVec3 get_NxWheelContactData_contactPoint_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_contactNormal")]
        private extern static void set_NxWheelContactData_contactNormal_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_contactNormal")]
        private extern static NxVec3 get_NxWheelContactData_contactNormal_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_longitudalDirection")]
        private extern static void set_NxWheelContactData_longitudalDirection_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_longitudalDirection")]
        private extern static NxVec3 get_NxWheelContactData_longitudalDirection_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_lateralDirection")]
        private extern static void set_NxWheelContactData_lateralDirection_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_lateralDirection")]
        private extern static NxVec3 get_NxWheelContactData_lateralDirection_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_contactForce")]
        private extern static void set_NxWheelContactData_contactForce_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_contactForce")]
        private extern static System.Single get_NxWheelContactData_contactForce_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_longitudalSlip")]
        private extern static void set_NxWheelContactData_longitudalSlip_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_longitudalSlip")]
        private extern static System.Single get_NxWheelContactData_longitudalSlip_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_lateralSlip")]
        private extern static void set_NxWheelContactData_lateralSlip_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_lateralSlip")]
        private extern static System.Single get_NxWheelContactData_lateralSlip_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_longitudalImpulse")]
        private extern static void set_NxWheelContactData_longitudalImpulse_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_longitudalImpulse")]
        private extern static System.Single get_NxWheelContactData_longitudalImpulse_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_lateralImpulse")]
        private extern static void set_NxWheelContactData_lateralImpulse_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_lateralImpulse")]
        private extern static System.Single get_NxWheelContactData_lateralImpulse_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_otherShapeMaterialIndex")]
        private extern static void set_NxWheelContactData_otherShapeMaterialIndex_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_otherShapeMaterialIndex")]
        private extern static System.UInt16 get_NxWheelContactData_otherShapeMaterialIndex_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxWheelContactData_contactPosition")]
        private extern static void set_NxWheelContactData_contactPosition_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxWheelContactData_contactPosition")]
        private extern static System.Single get_NxWheelContactData_contactPosition_INVOKE (HandleRef classPointer);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxWheelContactData")]
        private extern static IntPtr new_NxWheelContactData_INVOKE (bool do_override);

		
		public NxWheelContactData() : 
				base(new_NxWheelContactData_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxWheelContactData GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxWheelContactData)(obj.Target));
				}
			}
			return new NxWheelContactData(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
