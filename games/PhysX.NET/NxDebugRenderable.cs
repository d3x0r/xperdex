//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxDebugRenderable : DoxyBindObject
	{
		
		internal NxDebugRenderable(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public NxDebugRenderable(uint np, NxDebugPoint p, uint nl, NxDebugLine l, uint nt, NxDebugTriangle t) : 
				base(new_NxDebugRenderable_INVOKE(false, np, (p!=null ? p.ClassPointer : NullRef), nl, (l!=null ? l.ClassPointer : NullRef), nt, (t!=null ? t.ClassPointer : NullRef)))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Retrieve the number of points to render. </summary>
		public uint getNbPoints()
		{
			return NxDebugRenderable_getNbPoints_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Retrieve an array of points. </summary>
		public NxDebugPoint getPoints()
		{
			return NxDebugPoint.GetClass(NxDebugRenderable_getPoints_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Retrieve the number of lines to render. </summary>
		public uint getNbLines()
		{
			return NxDebugRenderable_getNbLines_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Retrieve an array of lines to render. </summary>
		public NxDebugLine getLines()
		{
			return NxDebugLine.GetClass(NxDebugRenderable_getLines_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		/// <summary>Retrieve the number of triangles to render. </summary>
		public uint getNbTriangles()
		{
			return NxDebugRenderable_getNbTriangles_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Retrieve an array of triangles to render. </summary>
		public NxDebugTriangle getTriangles()
		{
			return NxDebugTriangle.GetClass(NxDebugRenderable_getTriangles_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxDebugRenderable")]
        private extern static IntPtr new_NxDebugRenderable_INVOKE (System.Boolean do_override, System.UInt32 np, HandleRef p, System.UInt32 nl, HandleRef l, System.UInt32 nt, HandleRef t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getNbPoints")]
        private extern static System.UInt32 NxDebugRenderable_getNbPoints_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getPoints")]
        private extern static IntPtr NxDebugRenderable_getPoints_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getNbLines")]
        private extern static System.UInt32 NxDebugRenderable_getNbLines_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getLines")]
        private extern static IntPtr NxDebugRenderable_getLines_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getNbTriangles")]
        private extern static System.UInt32 NxDebugRenderable_getNbTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxDebugRenderable_getTriangles")]
        private extern static IntPtr NxDebugRenderable_getTriangles_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxDebugRenderable GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxDebugRenderable)(obj.Target));
				}
			}
			return new NxDebugRenderable(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
