//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCCDSkeleton : DoxyBindObject
	{
		
		internal NxCCDSkeleton(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>saves out CCDSkeleton data. </summary>
		public virtual uint save(System.IntPtr destBuffer, uint bufferSize)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton_save_INVOKE(ClassPointer, doSetFunctionPointers, destBuffer, bufferSize);
		}
		
		private uint save_virtual(System.IntPtr destBuffer, uint bufferSize)
		{
			return save(destBuffer, bufferSize);
		}
		
		delegate uint save_0_delegate(System.IntPtr destBuffer, uint bufferSize);
		
		
		
		
		
		
		private save_0_delegate save_0_delegatefield;
		
		/// <summary>returns number of bytes a call to save() will require. </summary>
		public virtual uint getDataSize()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton_getDataSize_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getDataSize_virtual()
		{
			return getDataSize();
		}
		
		delegate uint getDataSize_1_delegate();
		
		
		
		
		
		
		private getDataSize_1_delegate getDataSize_1_delegatefield;
		
		/// <summary>Returns the reference count for shared meshes. </summary>
		public virtual uint getReferenceCount()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton_getReferenceCount_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getReferenceCount_virtual()
		{
			return getReferenceCount();
		}
		
		delegate uint getReferenceCount_2_delegate();
		
		
		
		
		
		
		private getReferenceCount_2_delegate getReferenceCount_2_delegatefield;
		
		/// <summary>writes the CCD skeleton back out as an NxSimpleTriangleMesh. </summary>
		public virtual uint saveToDesc(NxSimpleTriangleMesh desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCCDSkeleton_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private uint saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxSimpleTriangleMesh.GetClass(desc));
		}
		
		delegate uint saveToDesc_3_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_3_delegate saveToDesc_3_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCCDSkeleton_save")]
        private extern static System.UInt32 NxCCDSkeleton_save_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.IntPtr destBuffer, System.UInt32 bufferSize);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCCDSkeleton_getDataSize")]
        private extern static System.UInt32 NxCCDSkeleton_getDataSize_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCCDSkeleton_getReferenceCount")]
        private extern static System.UInt32 NxCCDSkeleton_getReferenceCount_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCCDSkeleton_saveToDesc")]
        private extern static System.UInt32 NxCCDSkeleton_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCCDSkeleton")]
        private extern static IntPtr new_NxCCDSkeleton_INVOKE (bool do_override);

		
		protected NxCCDSkeleton() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxCCDSkeleton)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCCDSkeleton_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCCDSkeleton_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCCDSkeleton GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCCDSkeleton)(obj.Target));
				}
			}
			return new NxCCDSkeleton(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			save_0_delegatefield = new save_0_delegate(this.save_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(save_0_delegatefield));
			getDataSize_1_delegatefield = new getDataSize_1_delegate(this.getDataSize_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDataSize_1_delegatefield));
			getReferenceCount_2_delegatefield = new getReferenceCount_2_delegate(this.getReferenceCount_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getReferenceCount_2_delegatefield));
			saveToDesc_3_delegatefield = new saveToDesc_3_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_3_delegatefield));
			return list;
		}
	}
}
