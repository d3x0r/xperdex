//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxForceFieldDesc : DoxyBindObject
	{
		
		internal NxForceFieldDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Global or (if actor is set) actor relative transformation of the force field. Detaching from the actor will cause the force field's pose to be relative to the world frame. </summary>
		public NxMat34 pose
		{
			get
			{
				NxMat34 value = get_NxForceFieldDesc_pose_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_pose_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The field's pose is relative to the actor's pose and relative to the world frame if field is null. </summary>
		public NxActor actor
		{
			get
			{
				return NxActor.GetClass(get_NxForceFieldDesc_actor_INVOKE(ClassPointer));
			}
			set
			{
				set_NxForceFieldDesc_actor_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Coordinate space of the field. </summary>
		public NxForceFieldCoordinates coordinates
		{
			get
			{
				NxForceFieldCoordinates value = get_NxForceFieldDesc_coordinates_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_coordinates_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Array of force field shapes descriptors which will be created inside the include group of this force field. This group moves with the force field and cannot be shared. </summary>
		public NxArray< NxForceFieldShapeDesc > includeGroupShapes
		{
			get
			{
				return NxArray< NxForceFieldShapeDesc >.GetClass(get_NxForceFieldDesc_includeGroupShapes_INVOKE(ClassPointer));
			}
			set
			{
				set_NxForceFieldDesc_includeGroupShapes_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>a collection of NxForceFieldShapeGroup objects. </summary>
		public NxArray< NxForceFieldShapeGroup > shapeGroups
		{
			get
			{
				return NxArray< NxForceFieldShapeGroup >.GetClass(get_NxForceFieldDesc_shapeGroups_INVOKE(ClassPointer));
			}
			set
			{
				set_NxForceFieldDesc_shapeGroups_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Collision group used for collision filtering. </summary>
		public ushort group
		{
			get
			{
				ushort value = get_NxForceFieldDesc_group_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_group_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Groups mask used for collision filtering. </summary>
		public NxGroupsMask groupsMask
		{
			get
			{
				return NxGroupsMask.GetClass(get_NxForceFieldDesc_groupsMask_INVOKE(ClassPointer));
			}
			set
			{
				set_NxForceFieldDesc_groupsMask_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>kernel function of the force field. </summary>
		public NxForceFieldKernel kernel
		{
			get
			{
				return NxForceFieldKernel.GetClass(get_NxForceFieldDesc_kernel_INVOKE(ClassPointer));
			}
			set
			{
				set_NxForceFieldDesc_kernel_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Force Field Variety Index, index != 0 has to be created. </summary>
		public ushort forceFieldVariety
		{
			get
			{
				ushort value = get_NxForceFieldDesc_forceFieldVariety_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_forceFieldVariety_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force field type for fluids. </summary>
		public NxForceFieldType fluidType
		{
			get
			{
				NxForceFieldType value = get_NxForceFieldDesc_fluidType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_fluidType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force field type for cloth. </summary>
		public NxForceFieldType clothType
		{
			get
			{
				NxForceFieldType value = get_NxForceFieldDesc_clothType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_clothType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force field type for soft bodies. </summary>
		public NxForceFieldType softBodyType
		{
			get
			{
				NxForceFieldType value = get_NxForceFieldDesc_softBodyType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_softBodyType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force field type for rigid bodies. </summary>
		public NxForceFieldType rigidBodyType
		{
			get
			{
				NxForceFieldType value = get_NxForceFieldDesc_rigidBodyType_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_rigidBodyType_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Force field flags;. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxForceFieldDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxForceFieldDesc_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxForceField::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxForceFieldDesc_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceFieldDesc_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxForceFieldDesc() : 
				base(new_NxForceFieldDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxForceFieldDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxForceFieldDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_pose")]
        private extern static void set_NxForceFieldDesc_pose_INVOKE (HandleRef classPointer, NxMat34 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_pose")]
        private extern static NxMat34 get_NxForceFieldDesc_pose_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_actor")]
        private extern static void set_NxForceFieldDesc_actor_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_actor")]
        private extern static IntPtr get_NxForceFieldDesc_actor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_coordinates")]
        private extern static void set_NxForceFieldDesc_coordinates_INVOKE (HandleRef classPointer, NxForceFieldCoordinates newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_coordinates")]
        private extern static NxForceFieldCoordinates get_NxForceFieldDesc_coordinates_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_includeGroupShapes")]
        private extern static void set_NxForceFieldDesc_includeGroupShapes_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_includeGroupShapes")]
        private extern static IntPtr get_NxForceFieldDesc_includeGroupShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_shapeGroups")]
        private extern static void set_NxForceFieldDesc_shapeGroups_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_shapeGroups")]
        private extern static IntPtr get_NxForceFieldDesc_shapeGroups_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_group")]
        private extern static void set_NxForceFieldDesc_group_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_group")]
        private extern static System.UInt16 get_NxForceFieldDesc_group_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_groupsMask")]
        private extern static void set_NxForceFieldDesc_groupsMask_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_groupsMask")]
        private extern static IntPtr get_NxForceFieldDesc_groupsMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_kernel")]
        private extern static void set_NxForceFieldDesc_kernel_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_kernel")]
        private extern static IntPtr get_NxForceFieldDesc_kernel_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_forceFieldVariety")]
        private extern static void set_NxForceFieldDesc_forceFieldVariety_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_forceFieldVariety")]
        private extern static System.UInt16 get_NxForceFieldDesc_forceFieldVariety_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_fluidType")]
        private extern static void set_NxForceFieldDesc_fluidType_INVOKE (HandleRef classPointer, NxForceFieldType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_fluidType")]
        private extern static NxForceFieldType get_NxForceFieldDesc_fluidType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_clothType")]
        private extern static void set_NxForceFieldDesc_clothType_INVOKE (HandleRef classPointer, NxForceFieldType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_clothType")]
        private extern static NxForceFieldType get_NxForceFieldDesc_clothType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_softBodyType")]
        private extern static void set_NxForceFieldDesc_softBodyType_INVOKE (HandleRef classPointer, NxForceFieldType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_softBodyType")]
        private extern static NxForceFieldType get_NxForceFieldDesc_softBodyType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_rigidBodyType")]
        private extern static void set_NxForceFieldDesc_rigidBodyType_INVOKE (HandleRef classPointer, NxForceFieldType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_rigidBodyType")]
        private extern static NxForceFieldType get_NxForceFieldDesc_rigidBodyType_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_flags")]
        private extern static void set_NxForceFieldDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_flags")]
        private extern static System.UInt32 get_NxForceFieldDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_name")]
        private extern static void set_NxForceFieldDesc_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_name")]
        private extern static System.String get_NxForceFieldDesc_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceFieldDesc_userData")]
        private extern static void set_NxForceFieldDesc_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceFieldDesc_userData")]
        private extern static System.IntPtr get_NxForceFieldDesc_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxForceFieldDesc")]
        private extern static IntPtr new_NxForceFieldDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldDesc_setToDefault")]
        private extern static void NxForceFieldDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceFieldDesc_isValid")]
        private extern static System.Boolean NxForceFieldDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxForceFieldDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxForceFieldDesc)(obj.Target));
				}
			}
			return new NxForceFieldDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
