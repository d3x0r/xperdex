//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxForceField : DoxyBindObject
	{
		
		internal NxForceField(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>user can assign this to whatever, usually to create a 1:1 relationship with a user object. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxForceField_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxForceField_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		protected NxForceField() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxForceField)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxForceField_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxForceField_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Writes all of the effector's attributes to the description, as well as setting the actor connection point. </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the effector.</param>
		public virtual void saveToDesc(NxForceFieldDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxForceFieldDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_0_delegate saveToDesc_0_delegatefield;
		
		/// <summary>Retrieves the force field's transform. </summary>
		public virtual NxMat34 getPose()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getPose_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxMat34 getPose_virtual()
		{
			return getPose();
		}
		
		delegate NxMat34 getPose_1_delegate();
		
		
		
		
		
		
		private getPose_1_delegate getPose_1_delegatefield;
		
		/// <summary>Sets the force field's transform. </summary>
		public virtual void setPose(ref NxMat34 pose)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setPose_INVOKE(ClassPointer, doSetFunctionPointers, ref pose);
		}
		
		private void setPose_virtual([In()] ref NxMat34 pose)
		{
			setPose(ref pose);
		}
		
		delegate void setPose_2_delegate([In()] ref NxMat34 pose);
		
		
		
		
		
		
		private setPose_2_delegate setPose_2_delegatefield;
		
		/// <summary>Retrieves the actor pointer that this force field is attached to. </summary>
		public virtual NxActor getActor()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxActor.GetClass(NxForceField_getActor_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getActor_virtual()
		{
			return getActor().ClassPointer.Handle;
		}
		
		delegate IntPtr getActor_3_delegate();
		
		
		
		
		
		
		private getActor_3_delegate getActor_3_delegatefield;
		
		/// <summary>Sets the actor pointer that this force field is attached to. </summary>
		public virtual void setActor(NxActor actor)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setActor_INVOKE(ClassPointer, doSetFunctionPointers, (actor!=null ? actor.ClassPointer : NullRef));
		}
		
		private void setActor_virtual(IntPtr actor)
		{
			setActor(NxActor.GetClass(actor));
		}
		
		delegate void setActor_4_delegate(IntPtr actor);
		
		
		
		
		
		
		private setActor_4_delegate setActor_4_delegatefield;
		
		/// <summary>Sets the kernel function which this field will be using. </summary>
		public virtual void setForceFieldKernel(NxForceFieldKernel kernel)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setForceFieldKernel_INVOKE(ClassPointer, doSetFunctionPointers, (kernel!=null ? kernel.ClassPointer : NullRef));
		}
		
		private void setForceFieldKernel_virtual(IntPtr kernel)
		{
			setForceFieldKernel(NxForceFieldKernel.GetClass(kernel));
		}
		
		delegate void setForceFieldKernel_5_delegate(IntPtr kernel);
		
		
		
		
		
		
		private setForceFieldKernel_5_delegate setForceFieldKernel_5_delegatefield;
		
		/// <summary>Retrieves the kernel function which this field is using. </summary>
		public virtual NxForceFieldKernel getForceFieldKernel()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldKernel.GetClass(NxForceField_getForceFieldKernel_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getForceFieldKernel_virtual()
		{
			return getForceFieldKernel().ClassPointer.Handle;
		}
		
		delegate IntPtr getForceFieldKernel_6_delegate();
		
		
		
		
		
		
		private getForceFieldKernel_6_delegate getForceFieldKernel_6_delegatefield;
		
		/// <summary>Retrieves the include shape group of this forcefield. Shapes in this group will move with the force field. </summary>
		public virtual NxForceFieldShapeGroup getIncludeShapeGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup.GetClass(NxForceField_getIncludeShapeGroup_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getIncludeShapeGroup_virtual()
		{
			return getIncludeShapeGroup().ClassPointer.Handle;
		}
		
		delegate IntPtr getIncludeShapeGroup_7_delegate();
		
		
		
		
		
		
		private getIncludeShapeGroup_7_delegate getIncludeShapeGroup_7_delegatefield;
		
		/// <summary>Adds a force field shape group to this force field to define its volume of activity. </summary>
		/// <param name="group">A force field shape group. See NxForceFieldShapeGroup</param>
		public virtual void addShapeGroup(NxForceFieldShapeGroup group)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_addShapeGroup_INVOKE(ClassPointer, doSetFunctionPointers, (group!=null ? group.ClassPointer : NullRef));
		}
		
		private void addShapeGroup_virtual(IntPtr group)
		{
			addShapeGroup(NxForceFieldShapeGroup.GetClass(group));
		}
		
		delegate void addShapeGroup_8_delegate(IntPtr group);
		
		
		
		
		
		
		private addShapeGroup_8_delegate addShapeGroup_8_delegatefield;
		
		/// <summary>Removes a force field shape group from this force field. </summary>
		/// <param name="group">A force field shape group. See NxForceFieldShapeGroup</param>
		public virtual void removeShapeGroup(NxForceFieldShapeGroup unknown9)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_removeShapeGroup_INVOKE(ClassPointer, doSetFunctionPointers, (unknown9!=null ? unknown9.ClassPointer : NullRef));
		}
		
		private void removeShapeGroup_virtual(IntPtr unknown9)
		{
			removeShapeGroup(NxForceFieldShapeGroup.GetClass(unknown9));
		}
		
		delegate void removeShapeGroup_9_delegate(IntPtr unknown9);
		
		
		
		
		
		
		private removeShapeGroup_9_delegate removeShapeGroup_9_delegatefield;
		
		/// <summary>Returns the number of force field shape groups of this force field. (not counting the include group). </summary>
		public virtual uint getNbShapeGroups()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getNbShapeGroups_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getNbShapeGroups_virtual()
		{
			return getNbShapeGroups();
		}
		
		delegate uint getNbShapeGroups_10_delegate();
		
		
		
		
		
		
		private getNbShapeGroups_10_delegate getNbShapeGroups_10_delegatefield;
		
		/// <summary>Restarts the force field shape groups iterator so that the next call to getNextShape() returns the first shape in the force field. </summary>
		public virtual void resetShapeGroupsIterator()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_resetShapeGroupsIterator_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void resetShapeGroupsIterator_virtual()
		{
			resetShapeGroupsIterator();
		}
		
		delegate void resetShapeGroupsIterator_11_delegate();
		
		
		
		
		
		
		private resetShapeGroupsIterator_11_delegate resetShapeGroupsIterator_11_delegatefield;
		
		/// <summary>Retrieves the next FF shape group when iterating. </summary>
		public virtual NxForceFieldShapeGroup getNextShapeGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceFieldShapeGroup.GetClass(NxForceField_getNextShapeGroup_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getNextShapeGroup_virtual()
		{
			return getNextShapeGroup().ClassPointer.Handle;
		}
		
		delegate IntPtr getNextShapeGroup_12_delegate();
		
		
		
		
		
		
		private getNextShapeGroup_12_delegate getNextShapeGroup_12_delegatefield;
		
		/// <summary>Retrieves the value set with setGroup(). </summary>
		public virtual ushort getGroup()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getGroup_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getGroup_virtual()
		{
			return getGroup();
		}
		
		delegate ushort getGroup_13_delegate();
		
		
		
		
		
		
		private getGroup_13_delegate getGroup_13_delegatefield;
		
		/// <summary>Sets which collision group this shape is part of. </summary>
		/// <param name="collisionGroup">The collision group for this shape.</param>
		public virtual void setGroup(ushort collisionGroup)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setGroup_INVOKE(ClassPointer, doSetFunctionPointers, collisionGroup);
		}
		
		private void setGroup_virtual(ushort collisionGroup)
		{
			setGroup(collisionGroup);
		}
		
		delegate void setGroup_14_delegate(ushort collisionGroup);
		
		
		
		
		
		
		private setGroup_14_delegate setGroup_14_delegatefield;
		
		/// <summary>Gets 128-bit mask used for collision filtering. See comments for NxGroupsMask. </summary>
		public virtual NxGroupsMask getGroupsMask()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxGroupsMask.GetClass(NxForceField_getGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getGroupsMask_virtual()
		{
			return getGroupsMask().ClassPointer.Handle;
		}
		
		delegate IntPtr getGroupsMask_15_delegate();
		
		
		
		
		
		
		private getGroupsMask_15_delegate getGroupsMask_15_delegatefield;
		
		/// <summary>Sets 128-bit mask used for collision filtering. See comments for NxGroupsMask. </summary>
		/// <param name="mask">The group mask to set for the shape.</param>
		public virtual void setGroupsMask(NxGroupsMask mask)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setGroupsMask_INVOKE(ClassPointer, doSetFunctionPointers, (mask!=null ? mask.ClassPointer : NullRef));
		}
		
		private void setGroupsMask_virtual(IntPtr mask)
		{
			setGroupsMask(NxGroupsMask.GetClass(mask));
		}
		
		delegate void setGroupsMask_16_delegate(IntPtr mask);
		
		
		
		
		
		
		private setGroupsMask_16_delegate setGroupsMask_16_delegatefield;
		
		/// <summary>Gets the Coordinate space of the field. </summary>
		public virtual NxForceFieldCoordinates getCoordinates()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getCoordinates_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxForceFieldCoordinates getCoordinates_virtual()
		{
			return getCoordinates();
		}
		
		delegate NxForceFieldCoordinates getCoordinates_17_delegate();
		
		
		
		
		
		
		private getCoordinates_17_delegate getCoordinates_17_delegatefield;
		
		/// <summary>Sets the Coordinate space of the field. Transforms position and velocity of objects into this space prior to kernel evaluation. </summary>
		/// <param name="coordinates">The coordinate system. See NxForceFieldCoordinates</param>
		public virtual void setCoordinates(NxForceFieldCoordinates coordinates)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setCoordinates_INVOKE(ClassPointer, doSetFunctionPointers, coordinates);
		}
		
		private void setCoordinates_virtual(NxForceFieldCoordinates coordinates)
		{
			setCoordinates(coordinates);
		}
		
		delegate void setCoordinates_18_delegate(NxForceFieldCoordinates coordinates);
		
		
		
		
		
		
		private setCoordinates_18_delegate setCoordinates_18_delegatefield;
		
		/// <summary>Sets a name string for the object that can be retrieved with getName(). </summary>
		/// <param name="name">String to set the objects name to.</param>
		public virtual void setName(string name)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setName_INVOKE(ClassPointer, doSetFunctionPointers, name);
		}
		
		private void setName_virtual(string name)
		{
			setName(name);
		}
		
		delegate void setName_19_delegate(string name);
		
		
		
		
		
		
		private setName_19_delegate setName_19_delegatefield;
		
		/// <summary>Retrieves the name string set with setName(). </summary>
		public virtual string getName()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getName_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private string getName_virtual()
		{
			return getName();
		}
		
		delegate string getName_20_delegate();
		
		
		
		
		
		
		private getName_20_delegate getName_20_delegatefield;
		
		/// <summary>Gets the force field scaling type for fluids. </summary>
		public virtual NxForceFieldType getFluidType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getFluidType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxForceFieldType getFluidType_virtual()
		{
			return getFluidType();
		}
		
		delegate NxForceFieldType getFluidType_21_delegate();
		
		
		
		
		
		
		private getFluidType_21_delegate getFluidType_21_delegatefield;
		
		/// <summary>Sets the force field scaling type for fluids. </summary>
		/// <param name="t">NxForceFieldType The force field scaling type for fluids. See NxForceFieldType</param>
		public virtual void setFluidType(NxForceFieldType t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setFluidType_INVOKE(ClassPointer, doSetFunctionPointers, t);
		}
		
		private void setFluidType_virtual(NxForceFieldType t)
		{
			setFluidType(t);
		}
		
		delegate void setFluidType_22_delegate(NxForceFieldType t);
		
		
		
		
		
		
		private setFluidType_22_delegate setFluidType_22_delegatefield;
		
		/// <summary>Gets the force field scaling type for cloths. </summary>
		public virtual NxForceFieldType getClothType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getClothType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxForceFieldType getClothType_virtual()
		{
			return getClothType();
		}
		
		delegate NxForceFieldType getClothType_23_delegate();
		
		
		
		
		
		
		private getClothType_23_delegate getClothType_23_delegatefield;
		
		/// <summary>Sets the force field scaling type for cloths. </summary>
		/// <param name="t">NxForceFieldType The force field scaling type for fluids. See NxForceFieldType</param>
		public virtual void setClothType(NxForceFieldType t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setClothType_INVOKE(ClassPointer, doSetFunctionPointers, t);
		}
		
		private void setClothType_virtual(NxForceFieldType t)
		{
			setClothType(t);
		}
		
		delegate void setClothType_24_delegate(NxForceFieldType t);
		
		
		
		
		
		
		private setClothType_24_delegate setClothType_24_delegatefield;
		
		/// <summary>Gets the force field scaling type for soft bodies. </summary>
		public virtual NxForceFieldType getSoftBodyType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getSoftBodyType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxForceFieldType getSoftBodyType_virtual()
		{
			return getSoftBodyType();
		}
		
		delegate NxForceFieldType getSoftBodyType_25_delegate();
		
		
		
		
		
		
		private getSoftBodyType_25_delegate getSoftBodyType_25_delegatefield;
		
		/// <summary>Sets the force field scaling type for soft bodies. </summary>
		/// <param name="t">NxForceFieldType The force field scaling type for fluids. See NxForceFieldType</param>
		public virtual void setSoftBodyType(NxForceFieldType t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setSoftBodyType_INVOKE(ClassPointer, doSetFunctionPointers, t);
		}
		
		private void setSoftBodyType_virtual(NxForceFieldType t)
		{
			setSoftBodyType(t);
		}
		
		delegate void setSoftBodyType_26_delegate(NxForceFieldType t);
		
		
		
		
		
		
		private setSoftBodyType_26_delegate setSoftBodyType_26_delegatefield;
		
		/// <summary>Gets the force field scaling type for rigid bodies. </summary>
		public virtual NxForceFieldType getRigidBodyType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getRigidBodyType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxForceFieldType getRigidBodyType_virtual()
		{
			return getRigidBodyType();
		}
		
		delegate NxForceFieldType getRigidBodyType_27_delegate();
		
		
		
		
		
		
		private getRigidBodyType_27_delegate getRigidBodyType_27_delegatefield;
		
		/// <summary>Sets the force field scaling type for rigid bodies. </summary>
		/// <param name="t">NxForceFieldType The force field scaling type for fluids. See NxForceFieldType</param>
		public virtual void setRigidBodyType(NxForceFieldType t)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setRigidBodyType_INVOKE(ClassPointer, doSetFunctionPointers, t);
		}
		
		private void setRigidBodyType_virtual(NxForceFieldType t)
		{
			setRigidBodyType(t);
		}
		
		delegate void setRigidBodyType_28_delegate(NxForceFieldType t);
		
		
		
		
		
		
		private setRigidBodyType_28_delegate setRigidBodyType_28_delegatefield;
		
		/// <summary>Gets the force field flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_29_delegate();
		
		
		
		
		
		
		private getFlags_29_delegate getFlags_29_delegatefield;
		
		/// <summary>Sets the force field flags. </summary>
		/// <param name="f">NxForceFieldFlags The force field flags</param>
		public virtual void setFlags(uint f)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, f);
		}
		
		private void setFlags_virtual(uint f)
		{
			setFlags(f);
		}
		
		delegate void setFlags_30_delegate(uint f);
		
		
		
		
		
		
		private setFlags_30_delegate setFlags_30_delegatefield;
		
		/// <summary>Samples the force field. Incoming points & velocities must be in world space. The velocities pointer is optional and can be null. </summary>
		/// <param name="numPoints">Size of the buffers </param>
		/// <param name="points">Buffer of sample points </param>
		/// <param name="velocities">Buffer of velocities at the sample points </param>
		/// <param name="outForces">Buffer for the returned forces </param>
		/// <param name="outTorques">Buffer for the returned torques</param>
		public virtual void samplePoints(uint numPoints, NxVec3[] points, NxVec3[] velocities, NxVec3[] outForces, NxVec3[] outTorques)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_samplePoints_INVOKE(ClassPointer, doSetFunctionPointers, numPoints, points, velocities, outForces, outTorques);
		}
		
		private void samplePoints_virtual(uint numPoints, NxVec3[] points, NxVec3[] velocities, NxVec3[] outForces, NxVec3[] outTorques)
		{
			samplePoints(numPoints, points, velocities, outForces, outTorques);
		}
		
		delegate void samplePoints_31_delegate(uint numPoints, NxVec3[] points, NxVec3[] velocities, NxVec3[] outForces, NxVec3[] outTorques);
		
		
		
		
		
		
		private samplePoints_31_delegate samplePoints_31_delegatefield;
		
		/// <summary>Retrieves the scene which this force field belongs to. </summary>
		public virtual NxScene getScene()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxScene.GetClass(NxForceField_getScene_INVOKE(ClassPointer, doSetFunctionPointers));
		}
		
		private IntPtr getScene_virtual()
		{
			return getScene().ClassPointer.Handle;
		}
		
		delegate IntPtr getScene_32_delegate();
		
		
		
		
		
		
		private getScene_32_delegate getScene_32_delegatefield;
		
		/// <summary>Retrieves the force field variety index, default index is 0. </summary>
		public virtual ushort getForceFieldVariety()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxForceField_getForceFieldVariety_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private ushort getForceFieldVariety_virtual()
		{
			return getForceFieldVariety();
		}
		
		delegate ushort getForceFieldVariety_33_delegate();
		
		
		
		
		
		
		private getForceFieldVariety_33_delegate getForceFieldVariety_33_delegatefield;
		
		/// <summary>Sets the force field variety index, default index is 0. </summary>
		public virtual void setForceFieldVariety(ushort unknown10)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxForceField_setForceFieldVariety_INVOKE(ClassPointer, doSetFunctionPointers, unknown10);
		}
		
		private void setForceFieldVariety_virtual(ushort unknown10)
		{
			setForceFieldVariety(unknown10);
		}
		
		delegate void setForceFieldVariety_34_delegate(ushort unknown10);
		
		
		
		
		
		
		private setForceFieldVariety_34_delegate setForceFieldVariety_34_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxForceField_userData")]
        private extern static void set_NxForceField_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxForceField_userData")]
        private extern static System.IntPtr get_NxForceField_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxForceField")]
        private extern static IntPtr new_NxForceField_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_saveToDesc")]
        private extern static void NxForceField_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getPose")]
        private extern static NxMat34 NxForceField_getPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setPose")]
        private extern static void NxForceField_setPose_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat34 pose);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getActor")]
        private extern static IntPtr NxForceField_getActor_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setActor")]
        private extern static void NxForceField_setActor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef actor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setForceFieldKernel")]
        private extern static void NxForceField_setForceFieldKernel_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef kernel);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getForceFieldKernel")]
        private extern static IntPtr NxForceField_getForceFieldKernel_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getIncludeShapeGroup")]
        private extern static IntPtr NxForceField_getIncludeShapeGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_addShapeGroup")]
        private extern static void NxForceField_addShapeGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef group);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_removeShapeGroup")]
        private extern static void NxForceField_removeShapeGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef unknown9);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getNbShapeGroups")]
        private extern static System.UInt32 NxForceField_getNbShapeGroups_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_resetShapeGroupsIterator")]
        private extern static void NxForceField_resetShapeGroupsIterator_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getNextShapeGroup")]
        private extern static IntPtr NxForceField_getNextShapeGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getGroup")]
        private extern static System.UInt16 NxForceField_getGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setGroup")]
        private extern static void NxForceField_setGroup_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 collisionGroup);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getGroupsMask")]
        private extern static IntPtr NxForceField_getGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setGroupsMask")]
        private extern static void NxForceField_setGroupsMask_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef mask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getCoordinates")]
        private extern static NxForceFieldCoordinates NxForceField_getCoordinates_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setCoordinates")]
        private extern static void NxForceField_setCoordinates_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxForceFieldCoordinates coordinates);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setName")]
        private extern static void NxForceField_setName_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.String name);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getName")]
        private extern static System.String NxForceField_getName_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getFluidType")]
        private extern static NxForceFieldType NxForceField_getFluidType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setFluidType")]
        private extern static void NxForceField_setFluidType_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxForceFieldType t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getClothType")]
        private extern static NxForceFieldType NxForceField_getClothType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setClothType")]
        private extern static void NxForceField_setClothType_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxForceFieldType t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getSoftBodyType")]
        private extern static NxForceFieldType NxForceField_getSoftBodyType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setSoftBodyType")]
        private extern static void NxForceField_setSoftBodyType_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxForceFieldType t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getRigidBodyType")]
        private extern static NxForceFieldType NxForceField_getRigidBodyType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setRigidBodyType")]
        private extern static void NxForceField_setRigidBodyType_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxForceFieldType t);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getFlags")]
        private extern static System.UInt32 NxForceField_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setFlags")]
        private extern static void NxForceField_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 f);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_samplePoints")]
        private extern static void NxForceField_samplePoints_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 numPoints, NxVec3[] points, NxVec3[] velocities, NxVec3[] outForces, NxVec3[] outTorques);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getScene")]
        private extern static IntPtr NxForceField_getScene_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_getForceFieldVariety")]
        private extern static System.UInt16 NxForceField_getForceFieldVariety_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxForceField_setForceFieldVariety")]
        private extern static void NxForceField_setForceFieldVariety_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt16 unknown10);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxForceField GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxForceField)(obj.Target));
				}
			}
			return new NxForceField(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			saveToDesc_0_delegatefield = new saveToDesc_0_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_0_delegatefield));
			getPose_1_delegatefield = new getPose_1_delegate(this.getPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getPose_1_delegatefield));
			setPose_2_delegatefield = new setPose_2_delegate(this.setPose_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setPose_2_delegatefield));
			getActor_3_delegatefield = new getActor_3_delegate(this.getActor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getActor_3_delegatefield));
			setActor_4_delegatefield = new setActor_4_delegate(this.setActor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setActor_4_delegatefield));
			setForceFieldKernel_5_delegatefield = new setForceFieldKernel_5_delegate(this.setForceFieldKernel_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setForceFieldKernel_5_delegatefield));
			getForceFieldKernel_6_delegatefield = new getForceFieldKernel_6_delegate(this.getForceFieldKernel_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceFieldKernel_6_delegatefield));
			getIncludeShapeGroup_7_delegatefield = new getIncludeShapeGroup_7_delegate(this.getIncludeShapeGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getIncludeShapeGroup_7_delegatefield));
			addShapeGroup_8_delegatefield = new addShapeGroup_8_delegate(this.addShapeGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(addShapeGroup_8_delegatefield));
			removeShapeGroup_9_delegatefield = new removeShapeGroup_9_delegate(this.removeShapeGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(removeShapeGroup_9_delegatefield));
			getNbShapeGroups_10_delegatefield = new getNbShapeGroups_10_delegate(this.getNbShapeGroups_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNbShapeGroups_10_delegatefield));
			resetShapeGroupsIterator_11_delegatefield = new resetShapeGroupsIterator_11_delegate(this.resetShapeGroupsIterator_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(resetShapeGroupsIterator_11_delegatefield));
			getNextShapeGroup_12_delegatefield = new getNextShapeGroup_12_delegate(this.getNextShapeGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getNextShapeGroup_12_delegatefield));
			getGroup_13_delegatefield = new getGroup_13_delegate(this.getGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroup_13_delegatefield));
			setGroup_14_delegatefield = new setGroup_14_delegate(this.setGroup_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroup_14_delegatefield));
			getGroupsMask_15_delegatefield = new getGroupsMask_15_delegate(this.getGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGroupsMask_15_delegatefield));
			setGroupsMask_16_delegatefield = new setGroupsMask_16_delegate(this.setGroupsMask_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setGroupsMask_16_delegatefield));
			getCoordinates_17_delegatefield = new getCoordinates_17_delegate(this.getCoordinates_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getCoordinates_17_delegatefield));
			setCoordinates_18_delegatefield = new setCoordinates_18_delegate(this.setCoordinates_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setCoordinates_18_delegatefield));
			setName_19_delegatefield = new setName_19_delegate(this.setName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setName_19_delegatefield));
			getName_20_delegatefield = new getName_20_delegate(this.getName_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getName_20_delegatefield));
			getFluidType_21_delegatefield = new getFluidType_21_delegate(this.getFluidType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFluidType_21_delegatefield));
			setFluidType_22_delegatefield = new setFluidType_22_delegate(this.setFluidType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFluidType_22_delegatefield));
			getClothType_23_delegatefield = new getClothType_23_delegate(this.getClothType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getClothType_23_delegatefield));
			setClothType_24_delegatefield = new setClothType_24_delegate(this.setClothType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setClothType_24_delegatefield));
			getSoftBodyType_25_delegatefield = new getSoftBodyType_25_delegate(this.getSoftBodyType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSoftBodyType_25_delegatefield));
			setSoftBodyType_26_delegatefield = new setSoftBodyType_26_delegate(this.setSoftBodyType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSoftBodyType_26_delegatefield));
			getRigidBodyType_27_delegatefield = new getRigidBodyType_27_delegate(this.getRigidBodyType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getRigidBodyType_27_delegatefield));
			setRigidBodyType_28_delegatefield = new setRigidBodyType_28_delegate(this.setRigidBodyType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setRigidBodyType_28_delegatefield));
			getFlags_29_delegatefield = new getFlags_29_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_29_delegatefield));
			setFlags_30_delegatefield = new setFlags_30_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_30_delegatefield));
			samplePoints_31_delegatefield = new samplePoints_31_delegate(this.samplePoints_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(samplePoints_31_delegatefield));
			getScene_32_delegatefield = new getScene_32_delegate(this.getScene_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getScene_32_delegatefield));
			getForceFieldVariety_33_delegatefield = new getForceFieldVariety_33_delegate(this.getForceFieldVariety_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getForceFieldVariety_33_delegatefield));
			setForceFieldVariety_34_delegatefield = new setForceFieldVariety_34_delegate(this.setForceFieldVariety_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setForceFieldVariety_34_delegatefield));
			return list;
		}
	}
}
