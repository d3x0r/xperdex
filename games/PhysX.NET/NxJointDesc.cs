//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxJointDesc : DoxyBindObject
	{
		
		internal NxJointDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The two actors connected by the joint. </summary>
		public DoxyBindArray<NxActor> actor
		{
			get
			{
				IntPtr[] value = new IntPtr[2];
				get_NxJointDesc_actor_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxJointDesc_actor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>X axis of joint space, in actor[i]'s space, orthogonal to localAxis[i]. </summary>
		public NxVec3[] localNormal
		{
			get
			{
				NxVec3[] value = new NxVec3[2];
				get_NxJointDesc_localNormal_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxJointDesc_localNormal_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Z axis of joint space, in actor[i]'s space. This is the primary axis of the joint. </summary>
		public NxVec3[] localAxis
		{
			get
			{
				NxVec3[] value = new NxVec3[2];
				get_NxJointDesc_localAxis_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxJointDesc_localAxis_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Attachment point of joint in actor[i]'s space. </summary>
		public NxVec3[] localAnchor
		{
			get
			{
				NxVec3[] value = new NxVec3[2];
				get_NxJointDesc_localAnchor_INVOKE(ClassPointer, value);
				return value;
			}
			set
			{
				set_NxJointDesc_localAnchor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float maxForce
		{
			get
			{
				float value = get_NxJointDesc_maxForce_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_maxForce_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximum angular force (torque) that the joint can withstand before breaking, must be positive. </summary>
		public float maxTorque
		{
			get
			{
				float value = get_NxJointDesc_maxTorque_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_maxTorque_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Extrapolation factor for solving joint constraints. </summary>
		public float solverExtrapolationFactor
		{
			get
			{
				float value = get_NxJointDesc_solverExtrapolationFactor_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_solverExtrapolationFactor_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Switch to acceleration based spring. </summary>
		public uint useAccelerationSpring
		{
			get
			{
				uint value = get_NxJointDesc_useAccelerationSpring_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_useAccelerationSpring_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxJoint::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxJointDesc_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxJointDesc_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>This is a combination of the bits defined by NxJointFlag . </summary>
		public uint jointFlags
		{
			get
			{
				uint value = get_NxJointDesc_jointFlags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxJointDesc_jointFlags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public virtual void setToDefault()
		{
			NxJointDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void setToDefault_virtual()
		{
			setToDefault();
		}
		
		delegate void setToDefault_0_delegate();
		
		
		
		
		
		
		private setToDefault_0_delegate setToDefault_0_delegatefield;
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public virtual bool isValid()
		{
			return NxJointDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isValid_virtual()
		{
			return isValid();
		}
		
		delegate bool isValid_1_delegate();
		
		
		
		
		
		
		private isValid_1_delegate isValid_1_delegatefield;
		
		/// <summary>Set the localAnchor[] members using a world space point. </summary>
		/// <param name="wsAnchor">Global frame anchor point. Range: position vector</param>
		public void setGlobalAnchor(ref NxVec3 wsAnchor)
		{
			NxJointDesc_setGlobalAnchor_INVOKE(ClassPointer, doSetFunctionPointers, ref wsAnchor);
		}
		
		/// <summary>Set the local axis/normal using a world space axis. </summary>
		/// <param name="wsAxis">Global frame axis. Range: direction vector</param>
		public void setGlobalAxis(ref NxVec3 wsAxis)
		{
			NxJointDesc_setGlobalAxis_INVOKE(ClassPointer, doSetFunctionPointers, ref wsAxis);
		}
		
		/// <summary>Retrieves the joint type. </summary>
		public NxJointType getType()
		{
			return NxJointDesc_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Constructor sets to default. </summary>
		/// <param name="t">Joint type </param>
		protected NxJointDesc(NxJointType t) : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxJointDesc)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxJointDesc_INVOKE(doSetFunctionPointers, t));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxJointDesc_INVOKE(doSetFunctionPointers, t));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_actor")]
        private extern static void set_NxJointDesc_actor_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] IntPtr[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_actor")]
        private extern static void get_NxJointDesc_actor_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] IntPtr[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_localNormal")]
        private extern static void set_NxJointDesc_localNormal_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_localNormal")]
        private extern static void get_NxJointDesc_localNormal_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_localAxis")]
        private extern static void set_NxJointDesc_localAxis_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_localAxis")]
        private extern static void get_NxJointDesc_localAxis_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_localAnchor")]
        private extern static void set_NxJointDesc_localAnchor_INVOKE (HandleRef classPointer, [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_localAnchor")]
        private extern static void get_NxJointDesc_localAnchor_INVOKE (HandleRef classPointer, [Out()] [MarshalAs(UnmanagedType.LPArray, SizeConst=2)] NxVec3[] value);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_maxForce")]
        private extern static void set_NxJointDesc_maxForce_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_maxForce")]
        private extern static System.Single get_NxJointDesc_maxForce_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_maxTorque")]
        private extern static void set_NxJointDesc_maxTorque_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_maxTorque")]
        private extern static System.Single get_NxJointDesc_maxTorque_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_solverExtrapolationFactor")]
        private extern static void set_NxJointDesc_solverExtrapolationFactor_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_solverExtrapolationFactor")]
        private extern static System.Single get_NxJointDesc_solverExtrapolationFactor_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_useAccelerationSpring")]
        private extern static void set_NxJointDesc_useAccelerationSpring_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_useAccelerationSpring")]
        private extern static System.UInt32 get_NxJointDesc_useAccelerationSpring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_userData")]
        private extern static void set_NxJointDesc_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_userData")]
        private extern static System.IntPtr get_NxJointDesc_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_name")]
        private extern static void set_NxJointDesc_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_name")]
        private extern static System.String get_NxJointDesc_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxJointDesc_jointFlags")]
        private extern static void set_NxJointDesc_jointFlags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxJointDesc_jointFlags")]
        private extern static System.UInt32 get_NxJointDesc_jointFlags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointDesc_setToDefault")]
        private extern static void NxJointDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointDesc_isValid")]
        private extern static System.Boolean NxJointDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointDesc_setGlobalAnchor")]
        private extern static void NxJointDesc_setGlobalAnchor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 wsAnchor);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointDesc_setGlobalAxis")]
        private extern static void NxJointDesc_setGlobalAxis_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 wsAxis);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxJointDesc_getType")]
        private extern static NxJointType NxJointDesc_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxJointDesc")]
        private extern static IntPtr new_NxJointDesc_INVOKE (System.Boolean do_override, NxJointType t);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxJointDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxJointDesc)(obj.Target));
				}
			}
			return new NxJointDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setToDefault_0_delegatefield = new setToDefault_0_delegate(this.setToDefault_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToDefault_0_delegatefield));
			isValid_1_delegatefield = new isValid_1_delegate(this.isValid_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isValid_1_delegatefield));
			return list;
		}
	}
}
