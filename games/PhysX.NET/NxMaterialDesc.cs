//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxMaterialDesc : DoxyBindObject
	{
		
		internal NxMaterialDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public float dynamicFriction
		{
			get
			{
				float value = get_NxMaterialDesc_dynamicFriction_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_dynamicFriction_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float staticFriction
		{
			get
			{
				float value = get_NxMaterialDesc_staticFriction_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_staticFriction_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float restitution
		{
			get
			{
				float value = get_NxMaterialDesc_restitution_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_restitution_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float dynamicFrictionV
		{
			get
			{
				float value = get_NxMaterialDesc_dynamicFrictionV_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_dynamicFrictionV_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public float staticFrictionV
		{
			get
			{
				float value = get_NxMaterialDesc_staticFrictionV_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_staticFrictionV_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxVec3 dirOfAnisotropy
		{
			get
			{
				NxVec3 value = get_NxMaterialDesc_dirOfAnisotropy_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_dirOfAnisotropy_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public uint flags
		{
			get
			{
				uint value = get_NxMaterialDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxCombineMode frictionCombineMode
		{
			get
			{
				NxCombineMode value = get_NxMaterialDesc_frictionCombineMode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_frictionCombineMode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxCombineMode restitutionCombineMode
		{
			get
			{
				NxCombineMode value = get_NxMaterialDesc_restitutionCombineMode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMaterialDesc_restitutionCombineMode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxSpringDesc spring
		{
			get
			{
				return NxSpringDesc.GetClass(get_NxMaterialDesc_spring_INVOKE(ClassPointer));
			}
			set
			{
				set_NxMaterialDesc_spring_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>constructor sets to default. </summary>
		public NxMaterialDesc() : 
				base(new_NxMaterialDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxMaterialDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxMaterialDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_dynamicFriction")]
        private extern static void set_NxMaterialDesc_dynamicFriction_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_dynamicFriction")]
        private extern static System.Single get_NxMaterialDesc_dynamicFriction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_staticFriction")]
        private extern static void set_NxMaterialDesc_staticFriction_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_staticFriction")]
        private extern static System.Single get_NxMaterialDesc_staticFriction_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_restitution")]
        private extern static void set_NxMaterialDesc_restitution_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_restitution")]
        private extern static System.Single get_NxMaterialDesc_restitution_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_dynamicFrictionV")]
        private extern static void set_NxMaterialDesc_dynamicFrictionV_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_dynamicFrictionV")]
        private extern static System.Single get_NxMaterialDesc_dynamicFrictionV_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_staticFrictionV")]
        private extern static void set_NxMaterialDesc_staticFrictionV_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_staticFrictionV")]
        private extern static System.Single get_NxMaterialDesc_staticFrictionV_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_dirOfAnisotropy")]
        private extern static void set_NxMaterialDesc_dirOfAnisotropy_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_dirOfAnisotropy")]
        private extern static NxVec3 get_NxMaterialDesc_dirOfAnisotropy_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_flags")]
        private extern static void set_NxMaterialDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_flags")]
        private extern static System.UInt32 get_NxMaterialDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_frictionCombineMode")]
        private extern static void set_NxMaterialDesc_frictionCombineMode_INVOKE (HandleRef classPointer, NxCombineMode newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_frictionCombineMode")]
        private extern static NxCombineMode get_NxMaterialDesc_frictionCombineMode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_restitutionCombineMode")]
        private extern static void set_NxMaterialDesc_restitutionCombineMode_INVOKE (HandleRef classPointer, NxCombineMode newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_restitutionCombineMode")]
        private extern static NxCombineMode get_NxMaterialDesc_restitutionCombineMode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMaterialDesc_spring")]
        private extern static void set_NxMaterialDesc_spring_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMaterialDesc_spring")]
        private extern static IntPtr get_NxMaterialDesc_spring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMaterialDesc")]
        private extern static IntPtr new_NxMaterialDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterialDesc_setToDefault")]
        private extern static void NxMaterialDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMaterialDesc_isValid")]
        private extern static System.Boolean NxMaterialDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxMaterialDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxMaterialDesc)(obj.Target));
				}
			}
			return new NxMaterialDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
