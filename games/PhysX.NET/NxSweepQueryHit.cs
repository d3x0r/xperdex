//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSweepQueryHit : DoxyBindObject
	{
		
		internal NxSweepQueryHit(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Distance to hit expressed as a percentage of the source motion vector ([0,1] coeff). </summary>
		public float t
		{
			get
			{
				float value = get_NxSweepQueryHit_t_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_t_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Hit shape. </summary>
		public NxShape hitShape
		{
			get
			{
				return NxShape.GetClass(get_NxSweepQueryHit_hitShape_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSweepQueryHit_hitShape_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Only nonzero when using NxActor::linearSweep. Shape from NxActor that hits the hitShape. </summary>
		public NxShape sweepShape
		{
			get
			{
				return NxShape.GetClass(get_NxSweepQueryHit_sweepShape_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSweepQueryHit_sweepShape_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>User-defined data. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxSweepQueryHit_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>ID of touched triangle (internal). </summary>
		public uint internalFaceID
		{
			get
			{
				uint value = get_NxSweepQueryHit_internalFaceID_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_internalFaceID_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>ID of touched triangle (external). </summary>
		public uint faceID
		{
			get
			{
				uint value = get_NxSweepQueryHit_faceID_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_faceID_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>World-space impact point. </summary>
		public NxVec3 point
		{
			get
			{
				NxVec3 value = get_NxSweepQueryHit_point_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_point_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>World-space impact normal. </summary>
		public NxVec3 normal
		{
			get
			{
				NxVec3 value = get_NxSweepQueryHit_normal_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSweepQueryHit_normal_INVOKE(ClassPointer, value);
			}
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_t")]
        private extern static void set_NxSweepQueryHit_t_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_t")]
        private extern static System.Single get_NxSweepQueryHit_t_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_hitShape")]
        private extern static void set_NxSweepQueryHit_hitShape_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_hitShape")]
        private extern static IntPtr get_NxSweepQueryHit_hitShape_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_sweepShape")]
        private extern static void set_NxSweepQueryHit_sweepShape_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_sweepShape")]
        private extern static IntPtr get_NxSweepQueryHit_sweepShape_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_userData")]
        private extern static void set_NxSweepQueryHit_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_userData")]
        private extern static System.IntPtr get_NxSweepQueryHit_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_internalFaceID")]
        private extern static void set_NxSweepQueryHit_internalFaceID_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_internalFaceID")]
        private extern static System.UInt32 get_NxSweepQueryHit_internalFaceID_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_faceID")]
        private extern static void set_NxSweepQueryHit_faceID_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_faceID")]
        private extern static System.UInt32 get_NxSweepQueryHit_faceID_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_point")]
        private extern static void set_NxSweepQueryHit_point_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_point")]
        private extern static NxVec3 get_NxSweepQueryHit_point_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSweepQueryHit_normal")]
        private extern static void set_NxSweepQueryHit_normal_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSweepQueryHit_normal")]
        private extern static NxVec3 get_NxSweepQueryHit_normal_INVOKE (HandleRef classPointer);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSweepQueryHit")]
        private extern static IntPtr new_NxSweepQueryHit_INVOKE (bool do_override);

		
		public NxSweepQueryHit() : 
				base(new_NxSweepQueryHit_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSweepQueryHit GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSweepQueryHit)(obj.Target));
				}
			}
			return new NxSweepQueryHit(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
