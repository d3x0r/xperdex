//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCompartmentDesc : DoxyBindObject
	{
		
		internal NxCompartmentDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Compartment meant for this type of simulation. Will be removed in 3.0, as comparments will become type-neutral. Cloth type compartments must have a non-CPU device code. </summary>
		public NxCompartmentType type
		{
			get
			{
				NxCompartmentType value = get_NxCompartmentDesc_type_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_type_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>A NxDeviceCode, incl. a PPU index from 0 to 31. </summary>
		public uint deviceCode
		{
			get
			{
				uint value = get_NxCompartmentDesc_deviceCode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_deviceCode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Size in distance units of a single cell in the paging grid. Should be set to the size of the largest common dynamic object in this compartment. </summary>
		public float gridHashCellSize
		{
			get
			{
				float value = get_NxCompartmentDesc_gridHashCellSize_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_gridHashCellSize_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>2-power used to determine size of the hash table that geometry gets hashed into. Hash table size is (1 << gridHashTablePower). </summary>
		public uint gridHashTablePower
		{
			get
			{
				uint value = get_NxCompartmentDesc_gridHashTablePower_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_gridHashTablePower_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Combination of NxCompartmentFlag values. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxCompartmentDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Thread affinity mask for the compartment thread. Defaults to 0 which means the SDK determines the affinity. </summary>
		public uint threadMask
		{
			get
			{
				uint value = get_NxCompartmentDesc_threadMask_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_threadMask_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>It is possible to scale the simulation time steps of this compartment relative to the primary scene using this nonnegative value. A scale of zero does not simulate the compartment. The default value is 1.0f. </summary>
		public float timeScale
		{
			get
			{
				float value = get_NxCompartmentDesc_timeScale_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxCompartmentDesc_timeScale_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public void setToDefault()
		{
			NxCompartmentDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public bool isValid()
		{
			return NxCompartmentDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary></summary>
		public NxCompartmentDesc() : 
				base(new_NxCompartmentDesc_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_type")]
        private extern static void set_NxCompartmentDesc_type_INVOKE (HandleRef classPointer, NxCompartmentType newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_type")]
        private extern static NxCompartmentType get_NxCompartmentDesc_type_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_deviceCode")]
        private extern static void set_NxCompartmentDesc_deviceCode_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_deviceCode")]
        private extern static System.UInt32 get_NxCompartmentDesc_deviceCode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_gridHashCellSize")]
        private extern static void set_NxCompartmentDesc_gridHashCellSize_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_gridHashCellSize")]
        private extern static System.Single get_NxCompartmentDesc_gridHashCellSize_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_gridHashTablePower")]
        private extern static void set_NxCompartmentDesc_gridHashTablePower_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_gridHashTablePower")]
        private extern static System.UInt32 get_NxCompartmentDesc_gridHashTablePower_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_flags")]
        private extern static void set_NxCompartmentDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_flags")]
        private extern static System.UInt32 get_NxCompartmentDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_threadMask")]
        private extern static void set_NxCompartmentDesc_threadMask_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_threadMask")]
        private extern static System.UInt32 get_NxCompartmentDesc_threadMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxCompartmentDesc_timeScale")]
        private extern static void set_NxCompartmentDesc_timeScale_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxCompartmentDesc_timeScale")]
        private extern static System.Single get_NxCompartmentDesc_timeScale_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartmentDesc_setToDefault")]
        private extern static void NxCompartmentDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartmentDesc_isValid")]
        private extern static System.Boolean NxCompartmentDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCompartmentDesc")]
        private extern static IntPtr new_NxCompartmentDesc_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCompartmentDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCompartmentDesc)(obj.Target));
				}
			}
			return new NxCompartmentDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
