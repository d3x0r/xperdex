//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxBounds3 : DoxyBindObject
	{
		
		internal NxBounds3(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public NxVec3 min
		{
			get
			{
				NxVec3 value = get_NxBounds3_min_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBounds3_min_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxVec3 max
		{
			get
			{
				NxVec3 value = get_NxBounds3_max_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxBounds3_max_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary></summary>
		public NxBounds3() : 
				base(new_NxBounds3_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>Sets empty to true. </summary>
		public void setEmpty()
		{
			NxBounds3_setEmpty_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Sets infinite bounds. </summary>
		public void setInfinite()
		{
			NxBounds3_setInfinite_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>low level assignment. </summary>
		/// <param name="minx">Minimum X value </param>
		/// <param name="miny">Minimum Y value </param>
		/// <param name="minz">Minimum Z value </param>
		/// <param name="maxx">Maximum X value </param>
		/// <param name="maxy">Maximum Y value </param>
		/// <param name="maxz">Maximum Z value </param>
		public void set(float minx, float miny, float minz, float maxx, float maxy, float maxz)
		{
			NxBounds3_set_INVOKE(ClassPointer, doSetFunctionPointers, minx, miny, minz, maxx, maxy, maxz);
		}
		
		/// <summary>vector assignment. </summary>
		/// <param name="min">Minimum point of bounds. </param>
		/// <param name="max">Maximum point of bounds. </param>
		public void set(ref NxVec3 min, ref NxVec3 max)
		{
			NxBounds3_set_1_INVOKE(ClassPointer, doSetFunctionPointers, ref min, ref max);
		}
		
		/// <summary>expands the volume to include v </summary>
		/// <param name="v">Point to expand to. </param>
		public void include(ref NxVec3 v)
		{
			NxBounds3_include_INVOKE(ClassPointer, doSetFunctionPointers, ref v);
		}
		
		/// <summary>sets this to the union of this and b2. </summary>
		/// <param name="b2">Bounds to perform union with. </param>
		public void combine(NxBounds3 b2)
		{
			NxBounds3_combine_INVOKE(ClassPointer, doSetFunctionPointers, (b2!=null ? b2.ClassPointer : NullRef));
		}
		
		/// <summary>sets this to the AABB of the OBB passed. </summary>
		/// <param name="orientation">Orientation of the OBB. </param>
		/// <param name="translation">Translation of the OBB. </param>
		/// <param name="halfDims">radii of the OBB. </param>
		public void boundsOfOBB(ref NxMat33 orientation, ref NxVec3 translation, ref NxVec3 halfDims)
		{
			NxBounds3_boundsOfOBB_INVOKE(ClassPointer, doSetFunctionPointers, ref orientation, ref translation, ref halfDims);
		}
		
		/// <summary>transforms this volume as if it was an axis aligned bounding box, and then assigns the results' bounds to this. </summary>
		/// <param name="orientation">Orientation to apply. </param>
		/// <param name="translation">Translation to apply(applied after orientation transform) </param>
		public void transform(ref NxMat33 orientation, ref NxVec3 translation)
		{
			NxBounds3_transform_INVOKE(ClassPointer, doSetFunctionPointers, ref orientation, ref translation);
		}
		
		/// <summary></summary>
		public bool isEmpty()
		{
			return NxBounds3_isEmpty_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>indicates whether the intersection of this and b is empty or not. </summary>
		/// <param name="b">Bounds to test for intersection. </param>
		public bool intersects(NxBounds3 b)
		{
			return NxBounds3_intersects_INVOKE(ClassPointer, doSetFunctionPointers, (b!=null ? b.ClassPointer : NullRef));
		}
		
		/// <summary>indicates whether the intersection of this and b is empty or not in the plane orthogonal to the axis passed (X = 0, Y = 1 or Z = 2). </summary>
		/// <param name="b">Bounds to test for intersection. </param>
		/// <param name="axisToIgnore">Axis to ignore when performing the intersection test. </param>
		public bool intersects2D(NxBounds3 b, uint axisToIgnore)
		{
			return NxBounds3_intersects2D_INVOKE(ClassPointer, doSetFunctionPointers, (b!=null ? b.ClassPointer : NullRef), axisToIgnore);
		}
		
		/// <summary>indicates if these bounds contain v. </summary>
		/// <param name="v">Point to test against bounds. </param>
		public bool contain(ref NxVec3 v)
		{
			return NxBounds3_contain_INVOKE(ClassPointer, doSetFunctionPointers, ref v);
		}
		
		/// <summary>returns the center of this axis aligned box. </summary>
		/// <param name="center">The center of the bounds. </param>
		public void getCenter(ref NxVec3 center)
		{
			NxBounds3_getCenter_INVOKE(ClassPointer, doSetFunctionPointers, ref center);
		}
		
		/// <summary>returns the dimensions (width/height/depth) of this axis aligned box. </summary>
		/// <param name="dims">The dimensions of the bounds. </param>
		public void getDimensions(ref NxVec3 dims)
		{
			NxBounds3_getDimensions_INVOKE(ClassPointer, doSetFunctionPointers, ref dims);
		}
		
		/// <summary>returns the extents, which are half of the width/height/depth. </summary>
		/// <param name="extents">The extents/radii of the bounds. </param>
		public void getExtents(ref NxVec3 extents)
		{
			NxBounds3_getExtents_INVOKE(ClassPointer, doSetFunctionPointers, ref extents);
		}
		
		/// <summary>setups an AABB from center & extents vectors. </summary>
		/// <param name="c">Center vector </param>
		/// <param name="e">Extents vector </param>
		public void setCenterExtents(ref NxVec3 c, ref NxVec3 e)
		{
			NxBounds3_setCenterExtents_INVOKE(ClassPointer, doSetFunctionPointers, ref c, ref e);
		}
		
		/// <summary>scales the AABB. </summary>
		/// <param name="scale">Factor to scale AABB by. </param>
		public void scale(float scale)
		{
			NxBounds3_scale_INVOKE(ClassPointer, doSetFunctionPointers, scale);
		}
		
		/// <summary></summary>
		public void fatten(float distance)
		{
			NxBounds3_fatten_INVOKE(ClassPointer, doSetFunctionPointers, distance);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBounds3_min")]
        private extern static void set_NxBounds3_min_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBounds3_min")]
        private extern static NxVec3 get_NxBounds3_min_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxBounds3_max")]
        private extern static void set_NxBounds3_max_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxBounds3_max")]
        private extern static NxVec3 get_NxBounds3_max_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxBounds3")]
        private extern static IntPtr new_NxBounds3_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_setEmpty")]
        private extern static void NxBounds3_setEmpty_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_setInfinite")]
        private extern static void NxBounds3_setInfinite_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_set")]
        private extern static void NxBounds3_set_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single minx, System.Single miny, System.Single minz, System.Single maxx, System.Single maxy, System.Single maxz);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_set_1")]
        private extern static void NxBounds3_set_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 min, [In()] ref NxVec3 max);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_include")]
        private extern static void NxBounds3_include_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 v);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_combine")]
        private extern static void NxBounds3_combine_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef b2);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_boundsOfOBB")]
        private extern static void NxBounds3_boundsOfOBB_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 orientation, [In()] ref NxVec3 translation, [In()] ref NxVec3 halfDims);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_transform")]
        private extern static void NxBounds3_transform_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxMat33 orientation, [In()] ref NxVec3 translation);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_isEmpty")]
        private extern static System.Boolean NxBounds3_isEmpty_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_intersects")]
        private extern static System.Boolean NxBounds3_intersects_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef b);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_intersects2D")]
        private extern static System.Boolean NxBounds3_intersects2D_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef b, System.UInt32 axisToIgnore);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_contain")]
        private extern static System.Boolean NxBounds3_contain_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 v);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_getCenter")]
        private extern static void NxBounds3_getCenter_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 center);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_getDimensions")]
        private extern static void NxBounds3_getDimensions_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 dims);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_getExtents")]
        private extern static void NxBounds3_getExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref NxVec3 extents);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_setCenterExtents")]
        private extern static void NxBounds3_setCenterExtents_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] ref NxVec3 c, [In()] ref NxVec3 e);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_scale")]
        private extern static void NxBounds3_scale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single scale);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxBounds3_fatten")]
        private extern static void NxBounds3_fatten_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single distance);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxBounds3 GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxBounds3)(obj.Target));
				}
			}
			return new NxBounds3(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
