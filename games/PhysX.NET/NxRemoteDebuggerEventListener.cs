//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxRemoteDebuggerEventListener : DoxyBindObject
	{
		
		internal NxRemoteDebuggerEventListener(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public virtual void onConnect()
		{
			NxRemoteDebuggerEventListener_onConnect_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void onConnect_virtual()
		{
			onConnect();
		}
		
		delegate void onConnect_0_delegate();
		
		
		
		
		
		
		private onConnect_0_delegate onConnect_0_delegatefield;
		
		/// <summary></summary>
		public virtual void onDisconnect()
		{
			NxRemoteDebuggerEventListener_onDisconnect_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void onDisconnect_virtual()
		{
			onDisconnect();
		}
		
		delegate void onDisconnect_1_delegate();
		
		
		
		
		
		
		private onDisconnect_1_delegate onDisconnect_1_delegatefield;
		
		/// <summary></summary>
		public virtual void beforeMaskChange(uint oldMask, uint newMask)
		{
			NxRemoteDebuggerEventListener_beforeMaskChange_INVOKE(ClassPointer, doSetFunctionPointers, oldMask, newMask);
		}
		
		private void beforeMaskChange_virtual(uint oldMask, uint newMask)
		{
			beforeMaskChange(oldMask, newMask);
		}
		
		delegate void beforeMaskChange_2_delegate(uint oldMask, uint newMask);
		
		
		
		
		
		
		private beforeMaskChange_2_delegate beforeMaskChange_2_delegatefield;
		
		/// <summary></summary>
		public virtual void afterMaskChange(uint oldMask, uint newMask)
		{
			NxRemoteDebuggerEventListener_afterMaskChange_INVOKE(ClassPointer, doSetFunctionPointers, oldMask, newMask);
		}
		
		private void afterMaskChange_virtual(uint oldMask, uint newMask)
		{
			afterMaskChange(oldMask, newMask);
		}
		
		delegate void afterMaskChange_3_delegate(uint oldMask, uint newMask);
		
		
		
		
		
		
		private afterMaskChange_3_delegate afterMaskChange_3_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebuggerEventListener_onConnect")]
        private extern static void NxRemoteDebuggerEventListener_onConnect_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebuggerEventListener_onDisconnect")]
        private extern static void NxRemoteDebuggerEventListener_onDisconnect_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebuggerEventListener_beforeMaskChange")]
        private extern static void NxRemoteDebuggerEventListener_beforeMaskChange_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 oldMask, System.UInt32 newMask);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRemoteDebuggerEventListener_afterMaskChange")]
        private extern static void NxRemoteDebuggerEventListener_afterMaskChange_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 oldMask, System.UInt32 newMask);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxRemoteDebuggerEventListener")]
        private extern static IntPtr new_NxRemoteDebuggerEventListener_INVOKE (bool do_override);

		
		public NxRemoteDebuggerEventListener() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxRemoteDebuggerEventListener)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxRemoteDebuggerEventListener_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxRemoteDebuggerEventListener_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxRemoteDebuggerEventListener GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxRemoteDebuggerEventListener)(obj.Target));
				}
			}
			return new NxRemoteDebuggerEventListener(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onConnect_0_delegatefield = new onConnect_0_delegate(this.onConnect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onConnect_0_delegatefield));
			onDisconnect_1_delegatefield = new onDisconnect_1_delegate(this.onDisconnect_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onDisconnect_1_delegatefield));
			beforeMaskChange_2_delegatefield = new beforeMaskChange_2_delegate(this.beforeMaskChange_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(beforeMaskChange_2_delegatefield));
			afterMaskChange_3_delegatefield = new afterMaskChange_3_delegate(this.afterMaskChange_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(afterMaskChange_3_delegatefield));
			return list;
		}
	}
}
