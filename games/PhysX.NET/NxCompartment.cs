//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxCompartment : DoxyBindObject
	{
		
		internal NxCompartment(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary></summary>
		public virtual NxCompartmentType getType()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxCompartmentType getType_virtual()
		{
			return getType();
		}
		
		delegate NxCompartmentType getType_0_delegate();
		
		
		
		
		
		
		private getType_0_delegate getType_0_delegatefield;
		
		/// <summary>The device code that is specified when creating a compartment or the automatically assigned device code, if NX_DC_PPU_AUTO_ASSIGN was used. </summary>
		public virtual uint getDeviceCode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_getDeviceCode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getDeviceCode_virtual()
		{
			return getDeviceCode();
		}
		
		delegate uint getDeviceCode_1_delegate();
		
		
		
		
		
		
		private getDeviceCode_1_delegate getDeviceCode_1_delegatefield;
		
		/// <summary></summary>
		public virtual float getGridHashCellSize()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_getGridHashCellSize_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getGridHashCellSize_virtual()
		{
			return getGridHashCellSize();
		}
		
		delegate float getGridHashCellSize_2_delegate();
		
		
		
		
		
		
		private getGridHashCellSize_2_delegate getGridHashCellSize_2_delegatefield;
		
		/// <summary></summary>
		public virtual uint gridHashTablePower()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_gridHashTablePower_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint gridHashTablePower_virtual()
		{
			return gridHashTablePower();
		}
		
		delegate uint gridHashTablePower_3_delegate();
		
		
		
		
		
		
		private gridHashTablePower_3_delegate gridHashTablePower_3_delegatefield;
		
		/// <summary>Sets the time scale for the compartment. </summary>
		public virtual void setTimeScale(float unknown8)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_setTimeScale_INVOKE(ClassPointer, doSetFunctionPointers, unknown8);
		}
		
		private void setTimeScale_virtual(float unknown8)
		{
			setTimeScale(unknown8);
		}
		
		delegate void setTimeScale_4_delegate(float unknown8);
		
		
		
		
		
		
		private setTimeScale_4_delegate setTimeScale_4_delegatefield;
		
		/// <summary></summary>
		public virtual float getTimeScale()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_getTimeScale_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getTimeScale_virtual()
		{
			return getTimeScale();
		}
		
		delegate float getTimeScale_5_delegate();
		
		
		
		
		
		
		private getTimeScale_5_delegate getTimeScale_5_delegatefield;
		
		/// <summary>Sets simulation timing parameters used to simulate the compartment. </summary>
		/// <param name="maxTimestep">Maximum size of a substep. Range: (0,inf) </param>
		/// <param name="maxIter">Maximum number of iterations to divide a timestep into. </param>
		/// <param name="method">Method to use for timestep (either variable time step or fixed). See NxTimeStepMethod.</param>
		public virtual void setTiming(float maxTimestep, uint maxIter, NxTimeStepMethod method)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_setTiming_INVOKE(ClassPointer, doSetFunctionPointers, maxTimestep, maxIter, method);
		}
		
		private void setTiming_virtual(float maxTimestep, uint maxIter, NxTimeStepMethod method)
		{
			setTiming(maxTimestep, maxIter, method);
		}
		
		delegate void setTiming_6_delegate(float maxTimestep, uint maxIter, NxTimeStepMethod method);
		
		
		
		
		
		
		private setTiming_6_delegate setTiming_6_delegatefield;
		
		/// <summary>Sets simulation timing parameters used to simulate the compartment. </summary>
		/// <param name="maxTimestep">Maximum size of a substep. Range: (0,inf) </param>
		/// <param name="maxIter">Maximum number of iterations to divide a timestep into. </param>
		/// <param name="method">Method to use for timestep (either variable time step or fixed). See NxTimeStepMethod.</param>
		public virtual void setTiming(float maxTimestep, uint maxIter)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_setTiming_1_INVOKE(ClassPointer, doSetFunctionPointers, maxTimestep, maxIter);
		}
		
		private void setTiming_virtual(float maxTimestep, uint maxIter)
		{
			setTiming(maxTimestep, maxIter);
		}
		
		delegate void setTiming_7_delegate(float maxTimestep, uint maxIter);
		
		
		
		
		
		
		private setTiming_7_delegate setTiming_7_delegatefield;
		
		/// <summary>Sets simulation timing parameters used to simulate the compartment. </summary>
		/// <param name="maxTimestep">Maximum size of a substep. Range: (0,inf) </param>
		/// <param name="maxIter">Maximum number of iterations to divide a timestep into. </param>
		/// <param name="method">Method to use for timestep (either variable time step or fixed). See NxTimeStepMethod.</param>
		public virtual void setTiming(float maxTimestep)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_setTiming_2_INVOKE(ClassPointer, doSetFunctionPointers, maxTimestep);
		}
		
		private void setTiming_virtual(float maxTimestep)
		{
			setTiming(maxTimestep);
		}
		
		delegate void setTiming_8_delegate(float maxTimestep);
		
		
		
		
		
		
		private setTiming_8_delegate setTiming_8_delegatefield;
		
		/// <summary>Retrieves simulation timing parameters. </summary>
		/// <param name="maxTimestep">Maximum size to divide a substep into. Range: (0,inf) </param>
		/// <param name="maxIter">Maximum number of iterations to divide a timestep into. </param>
		/// <param name="method">Method to use for timestep (either variable time step or fixed). See NxTimeStepMethod. </param>
		/// <param name="numSubSteps">The number of sub steps the time step will be divided into.</param>
		public virtual void getTiming(ref float maxTimestep, ref uint maxIter, ref NxTimeStepMethod method, uint[] numSubSteps)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_getTiming_INVOKE(ClassPointer, doSetFunctionPointers, ref maxTimestep, ref maxIter, ref method, numSubSteps);
		}
		
		private void getTiming_virtual([In()] [Out()] ref float maxTimestep, [In()] [Out()] ref uint maxIter, [In()] [Out()] ref NxTimeStepMethod method, uint[] numSubSteps)
		{
			getTiming(ref maxTimestep, ref maxIter, ref method, numSubSteps);
		}
		
		delegate void getTiming_9_delegate([In()] [Out()] ref float maxTimestep, [In()] [Out()] ref uint maxIter, [In()] [Out()] ref NxTimeStepMethod method, uint[] numSubSteps);
		
		
		
		
		
		
		private getTiming_9_delegate getTiming_9_delegatefield;
		
		/// <summary>Retrieves simulation timing parameters. </summary>
		/// <param name="maxTimestep">Maximum size to divide a substep into. Range: (0,inf) </param>
		/// <param name="maxIter">Maximum number of iterations to divide a timestep into. </param>
		/// <param name="method">Method to use for timestep (either variable time step or fixed). See NxTimeStepMethod. </param>
		/// <param name="numSubSteps">The number of sub steps the time step will be divided into.</param>
		public virtual void getTiming(ref float maxTimestep, ref uint maxIter, ref NxTimeStepMethod method)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_getTiming_1_INVOKE(ClassPointer, doSetFunctionPointers, ref maxTimestep, ref maxIter, ref method);
		}
		
		private void getTiming_virtual([In()] [Out()] ref float maxTimestep, [In()] [Out()] ref uint maxIter, [In()] [Out()] ref NxTimeStepMethod method)
		{
			getTiming(ref maxTimestep, ref maxIter, ref method);
		}
		
		delegate void getTiming_10_delegate([In()] [Out()] ref float maxTimestep, [In()] [Out()] ref uint maxIter, [In()] [Out()] ref NxTimeStepMethod method);
		
		
		
		
		
		
		private getTiming_10_delegate getTiming_10_delegatefield;
		
		/// <summary>This checks to see if the simulation of the objects in this compartment has completed. </summary>
		/// <param name="block">When set to true will block until the condition is met. </param>
		public virtual bool checkResults(bool block)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_checkResults_INVOKE(ClassPointer, doSetFunctionPointers, block);
		}
		
		private bool checkResults_virtual(bool block)
		{
			return checkResults(block);
		}
		
		delegate bool checkResults_11_delegate(bool block);
		
		
		
		
		
		
		private checkResults_11_delegate checkResults_11_delegatefield;
		
		/// <summary></summary>
		/// <param name="block">When set to true will block until the condition is met. </param>
		public virtual bool fetchResults(bool block)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_fetchResults_INVOKE(ClassPointer, doSetFunctionPointers, block);
		}
		
		private bool fetchResults_virtual(bool block)
		{
			return fetchResults(block);
		}
		
		delegate bool fetchResults_12_delegate(bool block);
		
		
		
		
		
		
		private fetchResults_12_delegate fetchResults_12_delegatefield;
		
		/// <summary>Saves the compartment to a descriptor. Please note that the device code will be the same as the value returned by getDeviceCode(), i.e. not necessarily the same as the value you assigned when first creating the compartment (when using auto-assign). </summary>
		public virtual bool saveToDesc(NxCompartmentDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private bool saveToDesc_virtual(IntPtr desc)
		{
			return saveToDesc(NxCompartmentDesc.GetClass(desc));
		}
		
		delegate bool saveToDesc_13_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_13_delegate saveToDesc_13_delegatefield;
		
		/// <summary>Sets the compartment flags, a combination of the bits defined by the enum NxCompartmentFlag. </summary>
		/// <param name="flags">NxCompartmentFlag combination.</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxCompartment_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_14_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_14_delegate setFlags_14_delegatefield;
		
		/// <summary>Retrieves the compartment flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxCompartment_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_15_delegate();
		
		
		
		
		
		
		private getFlags_15_delegate getFlags_15_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getType")]
        private extern static NxCompartmentType NxCompartment_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getDeviceCode")]
        private extern static System.UInt32 NxCompartment_getDeviceCode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getGridHashCellSize")]
        private extern static System.Single NxCompartment_getGridHashCellSize_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_gridHashTablePower")]
        private extern static System.UInt32 NxCompartment_gridHashTablePower_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_setTimeScale")]
        private extern static void NxCompartment_setTimeScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single unknown8);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getTimeScale")]
        private extern static System.Single NxCompartment_getTimeScale_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_setTiming")]
        private extern static void NxCompartment_setTiming_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single maxTimestep, System.UInt32 maxIter, NxTimeStepMethod method);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_setTiming_1")]
        private extern static void NxCompartment_setTiming_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single maxTimestep, System.UInt32 maxIter);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_setTiming_2")]
        private extern static void NxCompartment_setTiming_2_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Single maxTimestep);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getTiming")]
        private extern static void NxCompartment_getTiming_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single maxTimestep, [In()] [Out()] ref System.UInt32 maxIter, [In()] [Out()] ref NxTimeStepMethod method, System.UInt32[] numSubSteps);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getTiming_1")]
        private extern static void NxCompartment_getTiming_1_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.Single maxTimestep, [In()] [Out()] ref System.UInt32 maxIter, [In()] [Out()] ref NxTimeStepMethod method);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_checkResults")]
        private extern static System.Boolean NxCompartment_checkResults_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean block);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_fetchResults")]
        private extern static System.Boolean NxCompartment_fetchResults_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.Boolean block);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_saveToDesc")]
        private extern static System.Boolean NxCompartment_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_setFlags")]
        private extern static void NxCompartment_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxCompartment_getFlags")]
        private extern static System.UInt32 NxCompartment_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxCompartment")]
        private extern static IntPtr new_NxCompartment_INVOKE (bool do_override);

		
		protected NxCompartment() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxCompartment)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxCompartment_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxCompartment_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxCompartment GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxCompartment)(obj.Target));
				}
			}
			return new NxCompartment(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			getType_0_delegatefield = new getType_0_delegate(this.getType_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getType_0_delegatefield));
			getDeviceCode_1_delegatefield = new getDeviceCode_1_delegate(this.getDeviceCode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getDeviceCode_1_delegatefield));
			getGridHashCellSize_2_delegatefield = new getGridHashCellSize_2_delegate(this.getGridHashCellSize_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getGridHashCellSize_2_delegatefield));
			gridHashTablePower_3_delegatefield = new gridHashTablePower_3_delegate(this.gridHashTablePower_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(gridHashTablePower_3_delegatefield));
			setTimeScale_4_delegatefield = new setTimeScale_4_delegate(this.setTimeScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTimeScale_4_delegatefield));
			getTimeScale_5_delegatefield = new getTimeScale_5_delegate(this.getTimeScale_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTimeScale_5_delegatefield));
			setTiming_6_delegatefield = new setTiming_6_delegate(this.setTiming_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTiming_6_delegatefield));
			setTiming_7_delegatefield = new setTiming_7_delegate(this.setTiming_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTiming_7_delegatefield));
			setTiming_8_delegatefield = new setTiming_8_delegate(this.setTiming_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setTiming_8_delegatefield));
			getTiming_9_delegatefield = new getTiming_9_delegate(this.getTiming_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTiming_9_delegatefield));
			getTiming_10_delegatefield = new getTiming_10_delegate(this.getTiming_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getTiming_10_delegatefield));
			checkResults_11_delegatefield = new checkResults_11_delegate(this.checkResults_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(checkResults_11_delegatefield));
			fetchResults_12_delegatefield = new fetchResults_12_delegate(this.fetchResults_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(fetchResults_12_delegatefield));
			saveToDesc_13_delegatefield = new saveToDesc_13_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_13_delegatefield));
			setFlags_14_delegatefield = new setFlags_14_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_14_delegatefield));
			getFlags_15_delegatefield = new getFlags_15_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_15_delegatefield));
			return list;
		}
	}
}
