//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxMeshData : DoxyBindObject
	{
		
		internal NxMeshData(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>The pointer to the user specified buffer for vertex positions. </summary>
		public System.IntPtr verticesPosBegin
		{
			get
			{
				System.IntPtr value = get_NxMeshData_verticesPosBegin_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_verticesPosBegin_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The pointer to the user specified buffer for vertex normals. </summary>
		public System.IntPtr verticesNormalBegin
		{
			get
			{
				System.IntPtr value = get_NxMeshData_verticesNormalBegin_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_verticesNormalBegin_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Specifies the distance of two vertex position start addresses in bytes. </summary>
		public int verticesPosByteStride
		{
			get
			{
				int value = get_NxMeshData_verticesPosByteStride_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_verticesPosByteStride_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Specifies the distance of two vertex normal start addresses in bytes. </summary>
		public int verticesNormalByteStride
		{
			get
			{
				int value = get_NxMeshData_verticesNormalByteStride_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_verticesNormalByteStride_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The maximal number of vertices which can be stored in the user vertex buffers. </summary>
		public uint maxVertices
		{
			get
			{
				uint value = get_NxMeshData_maxVertices_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_maxVertices_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Must point to the user allocated memory holding the number of vertices stored in the user vertex buffers. </summary>
		public uint[] numVerticesPtr
		{
			get
			{
				uint[] value = get_NxMeshData_numVerticesPtr_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_numVerticesPtr_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The pointer to the user specified buffer for vertex indices. </summary>
		public System.IntPtr indicesBegin
		{
			get
			{
				System.IntPtr value = get_NxMeshData_indicesBegin_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_indicesBegin_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Specifies the distance of two vertex indices start addresses in bytes. </summary>
		public int indicesByteStride
		{
			get
			{
				int value = get_NxMeshData_indicesByteStride_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_indicesByteStride_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The maximal number of indices which can be stored in the user index buffer. </summary>
		public uint maxIndices
		{
			get
			{
				uint value = get_NxMeshData_maxIndices_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_maxIndices_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Must point to the user allocated memory holding the number of vertex triplets used to define triangles. </summary>
		public uint[] numIndicesPtr
		{
			get
			{
				uint[] value = get_NxMeshData_numIndicesPtr_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_numIndicesPtr_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The pointer to the user specified buffer for vertex parent indices. </summary>
		public System.IntPtr parentIndicesBegin
		{
			get
			{
				System.IntPtr value = get_NxMeshData_parentIndicesBegin_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_parentIndicesBegin_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Specifies the distance of two vertex parent indices start addresses in bytes. </summary>
		public int parentIndicesByteStride
		{
			get
			{
				int value = get_NxMeshData_parentIndicesByteStride_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_parentIndicesByteStride_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The maximal number of parent indices which can be stored in the user parent index buffer. </summary>
		public uint maxParentIndices
		{
			get
			{
				uint value = get_NxMeshData_maxParentIndices_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_maxParentIndices_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Must point to the user allocated memory holding the number of vertex parent indices. </summary>
		public uint[] numParentIndicesPtr
		{
			get
			{
				uint[] value = get_NxMeshData_numParentIndicesPtr_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_numParentIndicesPtr_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Must point to the user allocated memory holding the dirty buffer flags. </summary>
		public uint[] dirtyBufferFlagsPtr
		{
			get
			{
				uint[] value = get_NxMeshData_dirtyBufferFlagsPtr_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_dirtyBufferFlagsPtr_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Flags of type NxMeshDataFlags. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxMeshData_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxMeshData_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxMeshData_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>(Re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxMeshData_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the current settings are valid. </summary>
		public bool isValid()
		{
			return NxMeshData_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxMeshData() : 
				base(new_NxMeshData_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_verticesPosBegin")]
        private extern static void set_NxMeshData_verticesPosBegin_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_verticesPosBegin")]
        private extern static System.IntPtr get_NxMeshData_verticesPosBegin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_verticesNormalBegin")]
        private extern static void set_NxMeshData_verticesNormalBegin_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_verticesNormalBegin")]
        private extern static System.IntPtr get_NxMeshData_verticesNormalBegin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_verticesPosByteStride")]
        private extern static void set_NxMeshData_verticesPosByteStride_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_verticesPosByteStride")]
        private extern static System.Int32 get_NxMeshData_verticesPosByteStride_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_verticesNormalByteStride")]
        private extern static void set_NxMeshData_verticesNormalByteStride_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_verticesNormalByteStride")]
        private extern static System.Int32 get_NxMeshData_verticesNormalByteStride_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_maxVertices")]
        private extern static void set_NxMeshData_maxVertices_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_maxVertices")]
        private extern static System.UInt32 get_NxMeshData_maxVertices_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_numVerticesPtr")]
        private extern static void set_NxMeshData_numVerticesPtr_INVOKE (HandleRef classPointer, System.UInt32[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_numVerticesPtr")]
        private extern static System.UInt32[] get_NxMeshData_numVerticesPtr_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_indicesBegin")]
        private extern static void set_NxMeshData_indicesBegin_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_indicesBegin")]
        private extern static System.IntPtr get_NxMeshData_indicesBegin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_indicesByteStride")]
        private extern static void set_NxMeshData_indicesByteStride_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_indicesByteStride")]
        private extern static System.Int32 get_NxMeshData_indicesByteStride_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_maxIndices")]
        private extern static void set_NxMeshData_maxIndices_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_maxIndices")]
        private extern static System.UInt32 get_NxMeshData_maxIndices_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_numIndicesPtr")]
        private extern static void set_NxMeshData_numIndicesPtr_INVOKE (HandleRef classPointer, System.UInt32[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_numIndicesPtr")]
        private extern static System.UInt32[] get_NxMeshData_numIndicesPtr_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_parentIndicesBegin")]
        private extern static void set_NxMeshData_parentIndicesBegin_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_parentIndicesBegin")]
        private extern static System.IntPtr get_NxMeshData_parentIndicesBegin_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_parentIndicesByteStride")]
        private extern static void set_NxMeshData_parentIndicesByteStride_INVOKE (HandleRef classPointer, System.Int32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_parentIndicesByteStride")]
        private extern static System.Int32 get_NxMeshData_parentIndicesByteStride_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_maxParentIndices")]
        private extern static void set_NxMeshData_maxParentIndices_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_maxParentIndices")]
        private extern static System.UInt32 get_NxMeshData_maxParentIndices_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_numParentIndicesPtr")]
        private extern static void set_NxMeshData_numParentIndicesPtr_INVOKE (HandleRef classPointer, System.UInt32[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_numParentIndicesPtr")]
        private extern static System.UInt32[] get_NxMeshData_numParentIndicesPtr_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_dirtyBufferFlagsPtr")]
        private extern static void set_NxMeshData_dirtyBufferFlagsPtr_INVOKE (HandleRef classPointer, System.UInt32[] newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_dirtyBufferFlagsPtr")]
        private extern static System.UInt32[] get_NxMeshData_dirtyBufferFlagsPtr_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_flags")]
        private extern static void set_NxMeshData_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_flags")]
        private extern static System.UInt32 get_NxMeshData_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxMeshData_name")]
        private extern static void set_NxMeshData_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxMeshData_name")]
        private extern static System.String get_NxMeshData_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMeshData_setToDefault")]
        private extern static void NxMeshData_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxMeshData_isValid")]
        private extern static System.Boolean NxMeshData_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxMeshData")]
        private extern static IntPtr new_NxMeshData_INVOKE (System.Boolean do_override);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxMeshData GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxMeshData)(obj.Target));
				}
			}
			return new NxMeshData(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
