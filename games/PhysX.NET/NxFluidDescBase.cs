//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxFluidDescBase : DoxyBindObject
	{
		
		internal NxFluidDescBase(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Describes the particles which are added to the fluid initially. </summary>
		public NxParticleData initialParticleData
		{
			get
			{
				return NxParticleData.GetClass(get_NxFluidDescBase_initialParticleData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_initialParticleData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Sets the maximal number of particles for the fluid used in the simulation. </summary>
		public uint maxParticles
		{
			get
			{
				uint value = get_NxFluidDescBase_maxParticles_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_maxParticles_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the number of particles which are reserved for creation at runtime. </summary>
		public uint numReserveParticles
		{
			get
			{
				uint value = get_NxFluidDescBase_numReserveParticles_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_numReserveParticles_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The particle resolution given as particles per linear meter measured when the fluid is in its rest state (relaxed). </summary>
		public float restParticlesPerMeter
		{
			get
			{
				float value = get_NxFluidDescBase_restParticlesPerMeter_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_restParticlesPerMeter_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Target density for the fluid (water is about 1000). </summary>
		public float restDensity
		{
			get
			{
				float value = get_NxFluidDescBase_restDensity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_restDensity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Radius of sphere of influence for particle interaction. </summary>
		public float kernelRadiusMultiplier
		{
			get
			{
				float value = get_NxFluidDescBase_kernelRadiusMultiplier_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_kernelRadiusMultiplier_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Maximal distance a particle is allowed to travel within one timestep. </summary>
		public float motionLimitMultiplier
		{
			get
			{
				float value = get_NxFluidDescBase_motionLimitMultiplier_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_motionLimitMultiplier_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the distance between particles and collision geometry, which is maintained during simulation. </summary>
		public float collisionDistanceMultiplier
		{
			get
			{
				float value = get_NxFluidDescBase_collisionDistanceMultiplier_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_collisionDistanceMultiplier_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>This parameter controls the parallelization of the fluid. </summary>
		public uint packetSizeMultiplier
		{
			get
			{
				uint value = get_NxFluidDescBase_packetSizeMultiplier_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_packetSizeMultiplier_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The stiffness of the particle interaction related to the pressure. </summary>
		public float stiffness
		{
			get
			{
				float value = get_NxFluidDescBase_stiffness_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_stiffness_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The viscosity of the fluid defines its viscous behavior. </summary>
		public float viscosity
		{
			get
			{
				float value = get_NxFluidDescBase_viscosity_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_viscosity_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The surfaceTension of the fluid defines an attractive force between particles. </summary>
		public float surfaceTension
		{
			get
			{
				float value = get_NxFluidDescBase_surfaceTension_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_surfaceTension_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Velocity damping constant, which is globally applied to each particle. </summary>
		public float damping
		{
			get
			{
				float value = get_NxFluidDescBase_damping_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_damping_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a timespan for the particle "fade-in". </summary>
		public float fadeInTime
		{
			get
			{
				float value = get_NxFluidDescBase_fadeInTime_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_fadeInTime_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Acceleration (m/s^2) applied to all particles at all time steps. </summary>
		public NxVec3 externalAcceleration
		{
			get
			{
				NxVec3 value = get_NxFluidDescBase_externalAcceleration_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_externalAcceleration_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the plane the fluid particles are projected to. This parameter is only used if NX_FF_PROJECT_TO_PLANE is set. </summary>
		public NxPlane projectionPlane
		{
			get
			{
				return NxPlane.GetClass(get_NxFluidDescBase_projectionPlane_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_projectionPlane_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Defines the restitution coefficient used for collisions of the fluid particles with static shapes. </summary>
		public float restitutionForStaticShapes
		{
			get
			{
				float value = get_NxFluidDescBase_restitutionForStaticShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_restitutionForStaticShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the dynamic friction of the fluid regarding the surface of a static shape. </summary>
		public float dynamicFrictionForStaticShapes
		{
			get
			{
				float value = get_NxFluidDescBase_dynamicFrictionForStaticShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_dynamicFrictionForStaticShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the static friction of the fluid regarding the surface of a static shape. </summary>
		public float staticFrictionForStaticShapes
		{
			get
			{
				float value = get_NxFluidDescBase_staticFrictionForStaticShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_staticFrictionForStaticShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the strength of attraction between the particles and static rigid bodies on collision. </summary>
		public float attractionForStaticShapes
		{
			get
			{
				float value = get_NxFluidDescBase_attractionForStaticShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_attractionForStaticShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the restitution coefficient used for collisions of the fluid particles with dynamic shapes. </summary>
		public float restitutionForDynamicShapes
		{
			get
			{
				float value = get_NxFluidDescBase_restitutionForDynamicShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_restitutionForDynamicShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the dynamic friction of the fluid regarding the surface of a dynamic shape. </summary>
		public float dynamicFrictionForDynamicShapes
		{
			get
			{
				float value = get_NxFluidDescBase_dynamicFrictionForDynamicShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_dynamicFrictionForDynamicShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the static friction of the fluid regarding the surface of a dynamic shape. </summary>
		public float staticFrictionForDynamicShapes
		{
			get
			{
				float value = get_NxFluidDescBase_staticFrictionForDynamicShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_staticFrictionForDynamicShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the strength of attraction between the particles and the dynamic rigid bodies on collision. </summary>
		public float attractionForDynamicShapes
		{
			get
			{
				float value = get_NxFluidDescBase_attractionForDynamicShapes_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_attractionForDynamicShapes_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines a factor for the impulse transfer from fluid to colliding rigid bodies. </summary>
		public float collisionResponseCoefficient
		{
			get
			{
				float value = get_NxFluidDescBase_collisionResponseCoefficient_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_collisionResponseCoefficient_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>NxFluidSimulationMethod flags. Defines whether or not particle interactions are considered in the simulation. </summary>
		public uint simulationMethod
		{
			get
			{
				uint value = get_NxFluidDescBase_simulationMethod_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_simulationMethod_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>NxFluidCollisionMethod flags. Selects whether static collision and/or dynamic collision with the environment is performed. </summary>
		public uint collisionMethod
		{
			get
			{
				uint value = get_NxFluidDescBase_collisionMethod_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_collisionMethod_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets which collision group this fluid is part of. </summary>
		public ushort collisionGroup
		{
			get
			{
				ushort value = get_NxFluidDescBase_collisionGroup_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_collisionGroup_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Sets the 128-bit mask used for collision filtering. </summary>
		public NxGroupsMask groupsMask
		{
			get
			{
				return NxGroupsMask.GetClass(get_NxFluidDescBase_groupsMask_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_groupsMask_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Force Field Material Index, index != 0 has to be created. </summary>
		public ushort forceFieldMaterial
		{
			get
			{
				ushort value = get_NxFluidDescBase_forceFieldMaterial_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_forceFieldMaterial_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Defines the user data buffers which are used to store particle data, which can be used for rendering. </summary>
		public NxParticleData particlesWriteData
		{
			get
			{
				return NxParticleData.GetClass(get_NxFluidDescBase_particlesWriteData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_particlesWriteData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Defines the user data buffer which is used to store IDs of deleted particles. </summary>
		public NxParticleIdData particleDeletionIdWriteData
		{
			get
			{
				return NxParticleIdData.GetClass(get_NxFluidDescBase_particleDeletionIdWriteData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_particleDeletionIdWriteData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Defines the user data buffer which is used to store IDs of created particles. </summary>
		public NxParticleIdData particleCreationIdWriteData
		{
			get
			{
				return NxParticleIdData.GetClass(get_NxFluidDescBase_particleCreationIdWriteData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_particleCreationIdWriteData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Defines the user data buffer which is used to store fluid packets. </summary>
		public NxFluidPacketData fluidPacketData
		{
			get
			{
				return NxFluidPacketData.GetClass(get_NxFluidDescBase_fluidPacketData_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_fluidPacketData_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Flags defining certain properties of the fluid. </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxFluidDescBase_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Will be copied to NxFluid::userData. </summary>
		public System.IntPtr userData
		{
			get
			{
				System.IntPtr value = get_NxFluidDescBase_userData_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_userData_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Possible debug name. The string is not copied by the SDK, only the pointer is stored. </summary>
		public string name
		{
			get
			{
				string value = get_NxFluidDescBase_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxFluidDescBase_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The compartment to place the fluid in. Must be either a pointer to an NxCompartment of type NX_SCT_FLUID, or NULL. A NULL compartment means creating the fluid in the first available fluid compartment (a default fluid compartment is created if none exists). </summary>
		public NxCompartment compartment
		{
			get
			{
				return NxCompartment.GetClass(get_NxFluidDescBase_compartment_INVOKE(ClassPointer));
			}
			set
			{
				set_NxFluidDescBase_compartment_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxFluidDescBase() : 
				base(new_NxFluidDescBase_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(Re)sets the structure to the default. </summary>
		public void setToDefault()
		{
			NxFluidDescBase_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Returns true if the current settings are valid. </summary>
		public bool isValid()
		{
			return NxFluidDescBase_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		/// <summary>Retrieve the fluid desc type. </summary>
		public NxFluidDescType getType()
		{
			return NxFluidDescBase_getType_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_initialParticleData")]
        private extern static void set_NxFluidDescBase_initialParticleData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_initialParticleData")]
        private extern static IntPtr get_NxFluidDescBase_initialParticleData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_maxParticles")]
        private extern static void set_NxFluidDescBase_maxParticles_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_maxParticles")]
        private extern static System.UInt32 get_NxFluidDescBase_maxParticles_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_numReserveParticles")]
        private extern static void set_NxFluidDescBase_numReserveParticles_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_numReserveParticles")]
        private extern static System.UInt32 get_NxFluidDescBase_numReserveParticles_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_restParticlesPerMeter")]
        private extern static void set_NxFluidDescBase_restParticlesPerMeter_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_restParticlesPerMeter")]
        private extern static System.Single get_NxFluidDescBase_restParticlesPerMeter_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_restDensity")]
        private extern static void set_NxFluidDescBase_restDensity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_restDensity")]
        private extern static System.Single get_NxFluidDescBase_restDensity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_kernelRadiusMultiplier")]
        private extern static void set_NxFluidDescBase_kernelRadiusMultiplier_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_kernelRadiusMultiplier")]
        private extern static System.Single get_NxFluidDescBase_kernelRadiusMultiplier_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_motionLimitMultiplier")]
        private extern static void set_NxFluidDescBase_motionLimitMultiplier_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_motionLimitMultiplier")]
        private extern static System.Single get_NxFluidDescBase_motionLimitMultiplier_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_collisionDistanceMultiplier")]
        private extern static void set_NxFluidDescBase_collisionDistanceMultiplier_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_collisionDistanceMultiplier")]
        private extern static System.Single get_NxFluidDescBase_collisionDistanceMultiplier_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_packetSizeMultiplier")]
        private extern static void set_NxFluidDescBase_packetSizeMultiplier_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_packetSizeMultiplier")]
        private extern static System.UInt32 get_NxFluidDescBase_packetSizeMultiplier_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_stiffness")]
        private extern static void set_NxFluidDescBase_stiffness_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_stiffness")]
        private extern static System.Single get_NxFluidDescBase_stiffness_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_viscosity")]
        private extern static void set_NxFluidDescBase_viscosity_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_viscosity")]
        private extern static System.Single get_NxFluidDescBase_viscosity_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_surfaceTension")]
        private extern static void set_NxFluidDescBase_surfaceTension_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_surfaceTension")]
        private extern static System.Single get_NxFluidDescBase_surfaceTension_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_damping")]
        private extern static void set_NxFluidDescBase_damping_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_damping")]
        private extern static System.Single get_NxFluidDescBase_damping_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_fadeInTime")]
        private extern static void set_NxFluidDescBase_fadeInTime_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_fadeInTime")]
        private extern static System.Single get_NxFluidDescBase_fadeInTime_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_externalAcceleration")]
        private extern static void set_NxFluidDescBase_externalAcceleration_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_externalAcceleration")]
        private extern static NxVec3 get_NxFluidDescBase_externalAcceleration_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_projectionPlane")]
        private extern static void set_NxFluidDescBase_projectionPlane_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_projectionPlane")]
        private extern static IntPtr get_NxFluidDescBase_projectionPlane_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_restitutionForStaticShapes")]
        private extern static void set_NxFluidDescBase_restitutionForStaticShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_restitutionForStaticShapes")]
        private extern static System.Single get_NxFluidDescBase_restitutionForStaticShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_dynamicFrictionForStaticShapes")]
        private extern static void set_NxFluidDescBase_dynamicFrictionForStaticShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_dynamicFrictionForStaticShapes")]
        private extern static System.Single get_NxFluidDescBase_dynamicFrictionForStaticShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_staticFrictionForStaticShapes")]
        private extern static void set_NxFluidDescBase_staticFrictionForStaticShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_staticFrictionForStaticShapes")]
        private extern static System.Single get_NxFluidDescBase_staticFrictionForStaticShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_attractionForStaticShapes")]
        private extern static void set_NxFluidDescBase_attractionForStaticShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_attractionForStaticShapes")]
        private extern static System.Single get_NxFluidDescBase_attractionForStaticShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_restitutionForDynamicShapes")]
        private extern static void set_NxFluidDescBase_restitutionForDynamicShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_restitutionForDynamicShapes")]
        private extern static System.Single get_NxFluidDescBase_restitutionForDynamicShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_dynamicFrictionForDynamicShapes")]
        private extern static void set_NxFluidDescBase_dynamicFrictionForDynamicShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_dynamicFrictionForDynamicShapes")]
        private extern static System.Single get_NxFluidDescBase_dynamicFrictionForDynamicShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_staticFrictionForDynamicShapes")]
        private extern static void set_NxFluidDescBase_staticFrictionForDynamicShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_staticFrictionForDynamicShapes")]
        private extern static System.Single get_NxFluidDescBase_staticFrictionForDynamicShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_attractionForDynamicShapes")]
        private extern static void set_NxFluidDescBase_attractionForDynamicShapes_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_attractionForDynamicShapes")]
        private extern static System.Single get_NxFluidDescBase_attractionForDynamicShapes_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_collisionResponseCoefficient")]
        private extern static void set_NxFluidDescBase_collisionResponseCoefficient_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_collisionResponseCoefficient")]
        private extern static System.Single get_NxFluidDescBase_collisionResponseCoefficient_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_simulationMethod")]
        private extern static void set_NxFluidDescBase_simulationMethod_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_simulationMethod")]
        private extern static System.UInt32 get_NxFluidDescBase_simulationMethod_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_collisionMethod")]
        private extern static void set_NxFluidDescBase_collisionMethod_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_collisionMethod")]
        private extern static System.UInt32 get_NxFluidDescBase_collisionMethod_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_collisionGroup")]
        private extern static void set_NxFluidDescBase_collisionGroup_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_collisionGroup")]
        private extern static System.UInt16 get_NxFluidDescBase_collisionGroup_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_groupsMask")]
        private extern static void set_NxFluidDescBase_groupsMask_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_groupsMask")]
        private extern static IntPtr get_NxFluidDescBase_groupsMask_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_forceFieldMaterial")]
        private extern static void set_NxFluidDescBase_forceFieldMaterial_INVOKE (HandleRef classPointer, System.UInt16 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_forceFieldMaterial")]
        private extern static System.UInt16 get_NxFluidDescBase_forceFieldMaterial_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_particlesWriteData")]
        private extern static void set_NxFluidDescBase_particlesWriteData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_particlesWriteData")]
        private extern static IntPtr get_NxFluidDescBase_particlesWriteData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_particleDeletionIdWriteData")]
        private extern static void set_NxFluidDescBase_particleDeletionIdWriteData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_particleDeletionIdWriteData")]
        private extern static IntPtr get_NxFluidDescBase_particleDeletionIdWriteData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_particleCreationIdWriteData")]
        private extern static void set_NxFluidDescBase_particleCreationIdWriteData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_particleCreationIdWriteData")]
        private extern static IntPtr get_NxFluidDescBase_particleCreationIdWriteData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_fluidPacketData")]
        private extern static void set_NxFluidDescBase_fluidPacketData_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_fluidPacketData")]
        private extern static IntPtr get_NxFluidDescBase_fluidPacketData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_flags")]
        private extern static void set_NxFluidDescBase_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_flags")]
        private extern static System.UInt32 get_NxFluidDescBase_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_userData")]
        private extern static void set_NxFluidDescBase_userData_INVOKE (HandleRef classPointer, System.IntPtr newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_userData")]
        private extern static System.IntPtr get_NxFluidDescBase_userData_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_name")]
        private extern static void set_NxFluidDescBase_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_name")]
        private extern static System.String get_NxFluidDescBase_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxFluidDescBase_compartment")]
        private extern static void set_NxFluidDescBase_compartment_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxFluidDescBase_compartment")]
        private extern static IntPtr get_NxFluidDescBase_compartment_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxFluidDescBase")]
        private extern static IntPtr new_NxFluidDescBase_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidDescBase_setToDefault")]
        private extern static void NxFluidDescBase_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidDescBase_isValid")]
        private extern static System.Boolean NxFluidDescBase_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxFluidDescBase_getType")]
        private extern static NxFluidDescType NxFluidDescBase_getType_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxFluidDescBase GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxFluidDescBase)(obj.Target));
				}
			}
			return new NxFluidDescBase(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
