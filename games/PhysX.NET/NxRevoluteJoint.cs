//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxRevoluteJoint : NxJoint
	{
		
		internal NxRevoluteJoint(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Use this for changing a significant number of joint parameters at once. </summary>
		/// <param name="desc">The descriptor used to set the state of the object.</param>
		public virtual void loadFromDesc(NxRevoluteJointDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_loadFromDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void loadFromDesc_virtual(IntPtr desc)
		{
			loadFromDesc(NxRevoluteJointDesc.GetClass(desc));
		}
		
		delegate void loadFromDesc_0_delegate(IntPtr desc);
		
		
		
		
		
		
		private loadFromDesc_0_delegate loadFromDesc_0_delegatefield;
		
		/// <summary>Writes all of the object's attributes to the desc struct . </summary>
		/// <param name="desc">The descriptor used to retrieve the state of the object.</param>
		public virtual void saveToDesc(NxRevoluteJointDesc desc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_saveToDesc_INVOKE(ClassPointer, doSetFunctionPointers, (desc!=null ? desc.ClassPointer : NullRef));
		}
		
		private void saveToDesc_virtual(IntPtr desc)
		{
			saveToDesc(NxRevoluteJointDesc.GetClass(desc));
		}
		
		delegate void saveToDesc_1_delegate(IntPtr desc);
		
		
		
		
		
		
		private saveToDesc_1_delegate saveToDesc_1_delegatefield;
		
		/// <summary>Sets angular joint limits. </summary>
		/// <param name="pair">The new joint limit settings. Range: See NxJointLimitPairDesc</param>
		public virtual void setLimits(NxJointLimitPairDesc pair)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_setLimits_INVOKE(ClassPointer, doSetFunctionPointers, (pair!=null ? pair.ClassPointer : NullRef));
		}
		
		private void setLimits_virtual(IntPtr pair)
		{
			setLimits(NxJointLimitPairDesc.GetClass(pair));
		}
		
		delegate void setLimits_2_delegate(IntPtr pair);
		
		
		
		
		
		
		private setLimits_2_delegate setLimits_2_delegatefield;
		
		/// <summary>Retrieves the joint limits. </summary>
		/// <param name="pair">Used to retrieve the joint limit settings. </param>
		public virtual bool getLimits(NxJointLimitPairDesc pair)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getLimits_INVOKE(ClassPointer, doSetFunctionPointers, (pair!=null ? pair.ClassPointer : NullRef));
		}
		
		private bool getLimits_virtual(IntPtr pair)
		{
			return getLimits(NxJointLimitPairDesc.GetClass(pair));
		}
		
		delegate bool getLimits_3_delegate(IntPtr pair);
		
		
		
		
		
		
		private getLimits_3_delegate getLimits_3_delegatefield;
		
		/// <summary>Sets motor parameters for the joint. </summary>
		/// <param name="motorDesc">The new motor parameters for the joint. Range: See NxMotorDesc</param>
		public virtual void setMotor(NxMotorDesc motorDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_setMotor_INVOKE(ClassPointer, doSetFunctionPointers, (motorDesc!=null ? motorDesc.ClassPointer : NullRef));
		}
		
		private void setMotor_virtual(IntPtr motorDesc)
		{
			setMotor(NxMotorDesc.GetClass(motorDesc));
		}
		
		delegate void setMotor_4_delegate(IntPtr motorDesc);
		
		
		
		
		
		
		private setMotor_4_delegate setMotor_4_delegatefield;
		
		/// <summary>Reads back the motor parameters. </summary>
		/// <param name="motorDesc">Used to store the motor parameters of the joint. See NxMotorDesc</param>
		public virtual bool getMotor(NxMotorDesc motorDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getMotor_INVOKE(ClassPointer, doSetFunctionPointers, (motorDesc!=null ? motorDesc.ClassPointer : NullRef));
		}
		
		private bool getMotor_virtual(IntPtr motorDesc)
		{
			return getMotor(NxMotorDesc.GetClass(motorDesc));
		}
		
		delegate bool getMotor_5_delegate(IntPtr motorDesc);
		
		
		
		
		
		
		private getMotor_5_delegate getMotor_5_delegatefield;
		
		/// <summary>Sets spring parameters. </summary>
		/// <param name="springDesc">The new spring parameters for the joint. Range: See NxSpringDesc.</param>
		public virtual void setSpring(NxSpringDesc springDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_setSpring_INVOKE(ClassPointer, doSetFunctionPointers, (springDesc!=null ? springDesc.ClassPointer : NullRef));
		}
		
		private void setSpring_virtual(IntPtr springDesc)
		{
			setSpring(NxSpringDesc.GetClass(springDesc));
		}
		
		delegate void setSpring_6_delegate(IntPtr springDesc);
		
		
		
		
		
		
		private setSpring_6_delegate setSpring_6_delegatefield;
		
		/// <summary>Retrieves spring settings. </summary>
		/// <param name="springDesc">Used to retrieve the spring parameters for the joint. See NxSpringDesc. </param>
		public virtual bool getSpring(NxSpringDesc springDesc)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getSpring_INVOKE(ClassPointer, doSetFunctionPointers, (springDesc!=null ? springDesc.ClassPointer : NullRef));
		}
		
		private bool getSpring_virtual(IntPtr springDesc)
		{
			return getSpring(NxSpringDesc.GetClass(springDesc));
		}
		
		delegate bool getSpring_7_delegate(IntPtr springDesc);
		
		
		
		
		
		
		private getSpring_7_delegate getSpring_7_delegatefield;
		
		/// <summary>Retrieves the current revolute joint angle. </summary>
		public virtual float getAngle()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getAngle_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getAngle_virtual()
		{
			return getAngle();
		}
		
		delegate float getAngle_8_delegate();
		
		
		
		
		
		
		private getAngle_8_delegate getAngle_8_delegatefield;
		
		/// <summary>Retrieves the revolute joint angle's rate of change (angular velocity). </summary>
		public virtual float getVelocity()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getVelocity_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private float getVelocity_virtual()
		{
			return getVelocity();
		}
		
		delegate float getVelocity_9_delegate();
		
		
		
		
		
		
		private getVelocity_9_delegate getVelocity_9_delegatefield;
		
		/// <summary>Sets the flags to enable/disable the spring/motor/limit. </summary>
		/// <param name="flags">A combination of NxRevoluteJointFlag flags to set for this joint</param>
		public virtual void setFlags(uint flags)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_setFlags_INVOKE(ClassPointer, doSetFunctionPointers, flags);
		}
		
		private void setFlags_virtual(uint flags)
		{
			setFlags(flags);
		}
		
		delegate void setFlags_10_delegate(uint flags);
		
		
		
		
		
		
		private setFlags_10_delegate setFlags_10_delegatefield;
		
		/// <summary>Retrieve the revolute joints flags. </summary>
		public virtual uint getFlags()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getFlags_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private uint getFlags_virtual()
		{
			return getFlags();
		}
		
		delegate uint getFlags_11_delegate();
		
		
		
		
		
		
		private getFlags_11_delegate getFlags_11_delegatefield;
		
		/// <summary>Sets the joint projection mode. </summary>
		/// <param name="projectionMode">The new projection mode. See NxJointProjectionMode.</param>
		public virtual void setProjectionMode(NxJointProjectionMode projectionMode)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			NxRevoluteJoint_setProjectionMode_INVOKE(ClassPointer, doSetFunctionPointers, projectionMode);
		}
		
		private void setProjectionMode_virtual(NxJointProjectionMode projectionMode)
		{
			setProjectionMode(projectionMode);
		}
		
		delegate void setProjectionMode_12_delegate(NxJointProjectionMode projectionMode);
		
		
		
		
		
		
		private setProjectionMode_12_delegate setProjectionMode_12_delegatefield;
		
		/// <summary>Retrieves the joints projection mode. </summary>
		public virtual NxJointProjectionMode getProjectionMode()
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxRevoluteJoint_getProjectionMode_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private NxJointProjectionMode getProjectionMode_virtual()
		{
			return getProjectionMode();
		}
		
		delegate NxJointProjectionMode getProjectionMode_13_delegate();
		
		
		
		
		
		
		private getProjectionMode_13_delegate getProjectionMode_13_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_loadFromDesc")]
        private extern static void NxRevoluteJoint_loadFromDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_saveToDesc")]
        private extern static void NxRevoluteJoint_saveToDesc_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef desc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_setLimits")]
        private extern static void NxRevoluteJoint_setLimits_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef pair);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getLimits")]
        private extern static System.Boolean NxRevoluteJoint_getLimits_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef pair);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_setMotor")]
        private extern static void NxRevoluteJoint_setMotor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef motorDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getMotor")]
        private extern static System.Boolean NxRevoluteJoint_getMotor_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef motorDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_setSpring")]
        private extern static void NxRevoluteJoint_setSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef springDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getSpring")]
        private extern static System.Boolean NxRevoluteJoint_getSpring_INVOKE (HandleRef classPointer, System.Boolean call_explicit, HandleRef springDesc);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getAngle")]
        private extern static System.Single NxRevoluteJoint_getAngle_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getVelocity")]
        private extern static System.Single NxRevoluteJoint_getVelocity_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_setFlags")]
        private extern static void NxRevoluteJoint_setFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit, System.UInt32 flags);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getFlags")]
        private extern static System.UInt32 NxRevoluteJoint_getFlags_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_setProjectionMode")]
        private extern static void NxRevoluteJoint_setProjectionMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit, NxJointProjectionMode projectionMode);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxRevoluteJoint_getProjectionMode")]
        private extern static NxJointProjectionMode NxRevoluteJoint_getProjectionMode_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxRevoluteJoint")]
        private extern static IntPtr new_NxRevoluteJoint_INVOKE (bool do_override);

		
		protected NxRevoluteJoint() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxRevoluteJoint)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxRevoluteJoint_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxRevoluteJoint_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxRevoluteJoint GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxRevoluteJoint)(obj.Target));
				}
			}
			return new NxRevoluteJoint(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			loadFromDesc_0_delegatefield = new loadFromDesc_0_delegate(this.loadFromDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(loadFromDesc_0_delegatefield));
			saveToDesc_1_delegatefield = new saveToDesc_1_delegate(this.saveToDesc_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(saveToDesc_1_delegatefield));
			setLimits_2_delegatefield = new setLimits_2_delegate(this.setLimits_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setLimits_2_delegatefield));
			getLimits_3_delegatefield = new getLimits_3_delegate(this.getLimits_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getLimits_3_delegatefield));
			setMotor_4_delegatefield = new setMotor_4_delegate(this.setMotor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setMotor_4_delegatefield));
			getMotor_5_delegatefield = new getMotor_5_delegate(this.getMotor_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getMotor_5_delegatefield));
			setSpring_6_delegatefield = new setSpring_6_delegate(this.setSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setSpring_6_delegatefield));
			getSpring_7_delegatefield = new getSpring_7_delegate(this.getSpring_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getSpring_7_delegatefield));
			getAngle_8_delegatefield = new getAngle_8_delegate(this.getAngle_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getAngle_8_delegatefield));
			getVelocity_9_delegatefield = new getVelocity_9_delegate(this.getVelocity_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getVelocity_9_delegatefield));
			setFlags_10_delegatefield = new setFlags_10_delegate(this.setFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setFlags_10_delegatefield));
			getFlags_11_delegatefield = new getFlags_11_delegate(this.getFlags_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getFlags_11_delegatefield));
			setProjectionMode_12_delegatefield = new setProjectionMode_12_delegate(this.setProjectionMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setProjectionMode_12_delegatefield));
			getProjectionMode_13_delegatefield = new getProjectionMode_13_delegate(this.getProjectionMode_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(getProjectionMode_13_delegatefield));
			return list;
		}
	}
}
