//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxSphericalJointDesc : NxJointDesc
	{
		
		internal NxSphericalJointDesc(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>swing limit axis defined in the joint space of actor 0. </summary>
		public NxVec3 swingAxis
		{
			get
			{
				NxVec3 value = get_NxSphericalJointDesc_swingAxis_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSphericalJointDesc_swingAxis_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Distance above which to project joint. </summary>
		public float projectionDistance
		{
			get
			{
				float value = get_NxSphericalJointDesc_projectionDistance_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSphericalJointDesc_projectionDistance_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>limits rotation around twist axis </summary>
		public NxJointLimitPairDesc twistLimit
		{
			get
			{
				return NxJointLimitPairDesc.GetClass(get_NxSphericalJointDesc_twistLimit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSphericalJointDesc_twistLimit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>limits swing of twist axis </summary>
		public NxJointLimitDesc swingLimit
		{
			get
			{
				return NxJointLimitDesc.GetClass(get_NxSphericalJointDesc_swingLimit_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSphericalJointDesc_swingLimit_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>spring that works against twisting </summary>
		public NxSpringDesc twistSpring
		{
			get
			{
				return NxSpringDesc.GetClass(get_NxSphericalJointDesc_twistSpring_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSphericalJointDesc_twistSpring_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>spring that works against swinging </summary>
		public NxSpringDesc swingSpring
		{
			get
			{
				return NxSpringDesc.GetClass(get_NxSphericalJointDesc_swingSpring_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSphericalJointDesc_swingSpring_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>spring that lets the joint get pulled apart </summary>
		public NxSpringDesc jointSpring
		{
			get
			{
				return NxSpringDesc.GetClass(get_NxSphericalJointDesc_jointSpring_INVOKE(ClassPointer));
			}
			set
			{
				set_NxSphericalJointDesc_jointSpring_INVOKE(ClassPointer, value.ClassPointer);
			}
		}
		
		/// <summary>This is a combination of the bits defined by NxSphericalJointFlag . </summary>
		public uint flags
		{
			get
			{
				uint value = get_NxSphericalJointDesc_flags_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSphericalJointDesc_flags_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>use this to enable joint projection </summary>
		public NxJointProjectionMode projectionMode
		{
			get
			{
				NxJointProjectionMode value = get_NxSphericalJointDesc_projectionMode_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxSphericalJointDesc_projectionMode_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Constructor sets to default. </summary>
		public NxSphericalJointDesc() : 
				base(IntPtr.Zero)
		{
			if ((GetType() != typeof(NxSphericalJointDesc)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxSphericalJointDesc_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxSphericalJointDesc_INVOKE(doSetFunctionPointers));
			}
			GC.ReRegisterForFinalize(this);
		}
		
		/// <summary>(re)sets the structure to the default. </summary>
		public override void setToDefault()
		{
			NxSphericalJointDesc_setToDefault_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private void setToDefault_virtual()
		{
			setToDefault();
		}
		
		delegate void setToDefault_0_delegate();
		
		
		
		
		
		
		private setToDefault_0_delegate setToDefault_0_delegatefield;
		
		/// <summary>Returns true if the descriptor is valid. </summary>
		public override bool isValid()
		{
			return NxSphericalJointDesc_isValid_INVOKE(ClassPointer, doSetFunctionPointers);
		}
		
		private bool isValid_virtual()
		{
			return isValid();
		}
		
		delegate bool isValid_1_delegate();
		
		
		
		
		
		
		private isValid_1_delegate isValid_1_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_swingAxis")]
        private extern static void set_NxSphericalJointDesc_swingAxis_INVOKE (HandleRef classPointer, NxVec3 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_swingAxis")]
        private extern static NxVec3 get_NxSphericalJointDesc_swingAxis_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_projectionDistance")]
        private extern static void set_NxSphericalJointDesc_projectionDistance_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_projectionDistance")]
        private extern static System.Single get_NxSphericalJointDesc_projectionDistance_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_twistLimit")]
        private extern static void set_NxSphericalJointDesc_twistLimit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_twistLimit")]
        private extern static IntPtr get_NxSphericalJointDesc_twistLimit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_swingLimit")]
        private extern static void set_NxSphericalJointDesc_swingLimit_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_swingLimit")]
        private extern static IntPtr get_NxSphericalJointDesc_swingLimit_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_twistSpring")]
        private extern static void set_NxSphericalJointDesc_twistSpring_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_twistSpring")]
        private extern static IntPtr get_NxSphericalJointDesc_twistSpring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_swingSpring")]
        private extern static void set_NxSphericalJointDesc_swingSpring_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_swingSpring")]
        private extern static IntPtr get_NxSphericalJointDesc_swingSpring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_jointSpring")]
        private extern static void set_NxSphericalJointDesc_jointSpring_INVOKE (HandleRef classPointer, HandleRef newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_jointSpring")]
        private extern static IntPtr get_NxSphericalJointDesc_jointSpring_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_flags")]
        private extern static void set_NxSphericalJointDesc_flags_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_flags")]
        private extern static System.UInt32 get_NxSphericalJointDesc_flags_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxSphericalJointDesc_projectionMode")]
        private extern static void set_NxSphericalJointDesc_projectionMode_INVOKE (HandleRef classPointer, NxJointProjectionMode newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxSphericalJointDesc_projectionMode")]
        private extern static NxJointProjectionMode get_NxSphericalJointDesc_projectionMode_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxSphericalJointDesc")]
        private extern static IntPtr new_NxSphericalJointDesc_INVOKE (System.Boolean do_override);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJointDesc_setToDefault")]
        private extern static void NxSphericalJointDesc_setToDefault_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxSphericalJointDesc_isValid")]
        private extern static System.Boolean NxSphericalJointDesc_isValid_INVOKE (HandleRef classPointer, System.Boolean call_explicit);

		#endregion
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxSphericalJointDesc GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxSphericalJointDesc)(obj.Target));
				}
			}
			return new NxSphericalJointDesc(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			setToDefault_0_delegatefield = new setToDefault_0_delegate(this.setToDefault_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(setToDefault_0_delegatefield));
			isValid_1_delegatefield = new isValid_1_delegate(this.isValid_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(isValid_1_delegatefield));
			return list;
		}
	}
}
