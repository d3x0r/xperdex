//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxProfileZone : DoxyBindObject
	{
		
		internal NxProfileZone(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>Name of the zone. </summary>
		public string name
		{
			get
			{
				string value = get_NxProfileZone_name_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_name_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The number of times this zone was executed over the last profiling run (since readProfileData(true) was called.). </summary>
		public uint callCount
		{
			get
			{
				uint value = get_NxProfileZone_callCount_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_callCount_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Time in micro seconds that it took to execute the total of the calls to this zone. </summary>
		public uint hierTime
		{
			get
			{
				uint value = get_NxProfileZone_hierTime_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_hierTime_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>Time in micro seconds that it took to execute the total of the calls to this zone, minus the time it took to execute the zones called from this zone. </summary>
		public uint selfTime
		{
			get
			{
				uint value = get_NxProfileZone_selfTime_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_selfTime_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The number of parent zones this zone has, each of which called the next until this zone was called. Can be used to indent a tree display of the zones. Sometimes a zone could have multiple rec. levels as it was called from different places. In this case the first encountered rec level is displayed. </summary>
		public uint recursionLevel
		{
			get
			{
				uint value = get_NxProfileZone_recursionLevel_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_recursionLevel_INVOKE(ClassPointer, value);
			}
		}
		
		/// <summary>The percentage time this zone took of its parent zone's time. If this zone has multiple parents (the code was called from multiple places), this is zero. </summary>
		public float percent
		{
			get
			{
				float value = get_NxProfileZone_percent_INVOKE(ClassPointer);
				return value;
			}
			set
			{
				set_NxProfileZone_percent_INVOKE(ClassPointer, value);
			}
		}
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_name")]
        private extern static void set_NxProfileZone_name_INVOKE (HandleRef classPointer, System.String newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_name")]
        private extern static System.String get_NxProfileZone_name_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_callCount")]
        private extern static void set_NxProfileZone_callCount_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_callCount")]
        private extern static System.UInt32 get_NxProfileZone_callCount_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_hierTime")]
        private extern static void set_NxProfileZone_hierTime_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_hierTime")]
        private extern static System.UInt32 get_NxProfileZone_hierTime_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_selfTime")]
        private extern static void set_NxProfileZone_selfTime_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_selfTime")]
        private extern static System.UInt32 get_NxProfileZone_selfTime_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_recursionLevel")]
        private extern static void set_NxProfileZone_recursionLevel_INVOKE (HandleRef classPointer, System.UInt32 newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_recursionLevel")]
        private extern static System.UInt32 get_NxProfileZone_recursionLevel_INVOKE (HandleRef classPointer);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxProfileZone_percent")]
        private extern static void set_NxProfileZone_percent_INVOKE (HandleRef classPointer, System.Single newvalue);

		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxProfileZone_percent")]
        private extern static System.Single get_NxProfileZone_percent_INVOKE (HandleRef classPointer);

		#endregion
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxProfileZone")]
        private extern static IntPtr new_NxProfileZone_INVOKE (bool do_override);

		
		public NxProfileZone() : 
				base(new_NxProfileZone_INVOKE(false))
		{
			GC.ReRegisterForFinalize(this);
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxProfileZone GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxProfileZone)(obj.Target));
				}
			}
			return new NxProfileZone(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			return list;
		}
	}
}
