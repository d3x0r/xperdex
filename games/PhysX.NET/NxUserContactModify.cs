//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007-2008
// Available under the terms of the
// Eclipse Public License with GPL exception
// See enclosed license file for more information
namespace PhysX.NET
{
	using System;
	using System.Runtime.InteropServices;
	
	
	public class NxUserContactModify : DoxyBindObject
	{
		
		internal NxUserContactModify(IntPtr ptr) : 
				base(ptr)
		{
		}
		
		/// <summary>This is called when a contact constraint is generated. Modify the parameters in order to affect the generated contact constraint. This callback needs to be both thread safe and reentrant. </summary>
		/// <param name="changeFlags">when making changes to the contact point, you must mark in this flag what changes have been made, see NxContactConstraintChange. </param>
		/// <param name="shape0">one of the two shapes in contact </param>
		/// <param name="shape1">the other shape </param>
		/// <param name="featureIndex0">feature on the first shape, which is in contact with the other shape </param>
		/// <param name="featureIndex1">feature on the second shape, which is in contact with the other shape </param>
		/// <param name="data">contact constraint properties, for the user to change. Changes in this also requires changes in the changeFlags parameter.</param>
		public virtual bool onContactConstraint(ref uint changeFlags, NxShape shape0, NxShape shape1, uint featureIndex0, uint featureIndex1, NxContactCallbackData data)
		{
			if (doSetFunctionPointers)
			{
				throw new System.NotSupportedException("Cannot call abstract base member");
			}
			return NxUserContactModify_onContactConstraint_INVOKE(ClassPointer, doSetFunctionPointers, ref changeFlags, (shape0!=null ? shape0.ClassPointer : NullRef), (shape1!=null ? shape1.ClassPointer : NullRef), featureIndex0, featureIndex1, (data!=null ? data.ClassPointer : NullRef));
		}
		
		private bool onContactConstraint_virtual([In()] [Out()] ref uint changeFlags, IntPtr shape0, IntPtr shape1, uint featureIndex0, uint featureIndex1, IntPtr data)
		{
			return onContactConstraint(ref changeFlags, NxShape.GetClass(shape0), NxShape.GetClass(shape1), featureIndex0, featureIndex1, NxContactCallbackData.GetClass(data));
		}
		
		delegate bool onContactConstraint_0_delegate([In()] [Out()] ref uint changeFlags, IntPtr shape0, IntPtr shape1, uint featureIndex0, uint featureIndex1, IntPtr data);
		
		
		
		
		
		
		private onContactConstraint_0_delegate onContactConstraint_0_delegatefield;
		
		#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="NxUserContactModify_onContactConstraint")]
        private extern static System.Boolean NxUserContactModify_onContactConstraint_INVOKE (HandleRef classPointer, System.Boolean call_explicit, [In()] [Out()] ref System.UInt32 changeFlags, HandleRef shape0, HandleRef shape1, System.UInt32 featureIndex0, System.UInt32 featureIndex1, HandleRef data);

		#endregion
		
		public class NxContactCallbackData : DoxyBindObject
		{
			
			internal NxContactCallbackData(IntPtr ptr) : 
					base(ptr)
			{
			}
			
			/// <summary>Minimum impulse value that the solver can apply. Normally this should be 0, negative amount gives sticky contacts. </summary>
			public float minImpulse
			{
				get
				{
					float value = get_NxContactCallbackData_minImpulse_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_minImpulse_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Maximum impulse value that the solver can apply. Normally this is FLT_MAX. If you set this to 0 (and the min impulse value is 0) then you will void contact effects of the constraint. </summary>
			public float maxImpulse
			{
				get
				{
					float value = get_NxContactCallbackData_maxImpulse_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_maxImpulse_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Error vector. This is the current error that the solver should try to relax. </summary>
			public NxVec3 error
			{
				get
				{
					NxVec3 value = get_NxContactCallbackData_error_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_error_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Target velocity. This is the relative target velocity of the two bodies. </summary>
			public NxVec3 target
			{
				get
				{
					NxVec3 value = get_NxContactCallbackData_target_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_target_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Constraint attachment point for shape 0. </summary>
			public NxVec3 localpos0
			{
				get
				{
					NxVec3 value = get_NxContactCallbackData_localpos0_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_localpos0_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Constraint attachment point for shape 1. </summary>
			public NxVec3 localpos1
			{
				get
				{
					NxVec3 value = get_NxContactCallbackData_localpos1_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_localpos1_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Constraint orientation quaternion for shape 0 relative to shape 0s body frame for dynamic actors and relative to the world frame for static actors. </summary>
			public NxQuat localorientation0
			{
				get
				{
					NxQuat value = get_NxContactCallbackData_localorientation0_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_localorientation0_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Constraint orientation quaternion for shape 1 relative to shape 1s body frame for dynamic actors and relative to the world frame for static actors. </summary>
			public NxQuat localorientation1
			{
				get
				{
					NxQuat value = get_NxContactCallbackData_localorientation1_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_localorientation1_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Static friction parameter 0. </summary>
			public float staticFriction0
			{
				get
				{
					float value = get_NxContactCallbackData_staticFriction0_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_staticFriction0_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Static friction parameter 1. </summary>
			public float staticFriction1
			{
				get
				{
					float value = get_NxContactCallbackData_staticFriction1_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_staticFriction1_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Dynamic friction parameter 0. </summary>
			public float dynamicFriction0
			{
				get
				{
					float value = get_NxContactCallbackData_dynamicFriction0_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_dynamicFriction0_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Dynamic friction parameter 1. </summary>
			public float dynamicFriction1
			{
				get
				{
					float value = get_NxContactCallbackData_dynamicFriction1_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_dynamicFriction1_INVOKE(ClassPointer, value);
				}
			}
			
			/// <summary>Restitution value. </summary>
			public float restitution
			{
				get
				{
					float value = get_NxContactCallbackData_restitution_INVOKE(ClassPointer);
					return value;
				}
				set
				{
					set_NxContactCallbackData_restitution_INVOKE(ClassPointer, value);
				}
			}
			
			#region Imports
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_minImpulse")]
        private extern static void set_NxContactCallbackData_minImpulse_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_minImpulse")]
        private extern static System.Single get_NxContactCallbackData_minImpulse_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_maxImpulse")]
        private extern static void set_NxContactCallbackData_maxImpulse_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_maxImpulse")]
        private extern static System.Single get_NxContactCallbackData_maxImpulse_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_error")]
        private extern static void set_NxContactCallbackData_error_INVOKE (HandleRef classPointer, NxVec3 newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_error")]
        private extern static NxVec3 get_NxContactCallbackData_error_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_target")]
        private extern static void set_NxContactCallbackData_target_INVOKE (HandleRef classPointer, NxVec3 newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_target")]
        private extern static NxVec3 get_NxContactCallbackData_target_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_localpos0")]
        private extern static void set_NxContactCallbackData_localpos0_INVOKE (HandleRef classPointer, NxVec3 newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_localpos0")]
        private extern static NxVec3 get_NxContactCallbackData_localpos0_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_localpos1")]
        private extern static void set_NxContactCallbackData_localpos1_INVOKE (HandleRef classPointer, NxVec3 newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_localpos1")]
        private extern static NxVec3 get_NxContactCallbackData_localpos1_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_localorientation0")]
        private extern static void set_NxContactCallbackData_localorientation0_INVOKE (HandleRef classPointer, NxQuat newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_localorientation0")]
        private extern static NxQuat get_NxContactCallbackData_localorientation0_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_localorientation1")]
        private extern static void set_NxContactCallbackData_localorientation1_INVOKE (HandleRef classPointer, NxQuat newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_localorientation1")]
        private extern static NxQuat get_NxContactCallbackData_localorientation1_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_staticFriction0")]
        private extern static void set_NxContactCallbackData_staticFriction0_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_staticFriction0")]
        private extern static System.Single get_NxContactCallbackData_staticFriction0_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_staticFriction1")]
        private extern static void set_NxContactCallbackData_staticFriction1_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_staticFriction1")]
        private extern static System.Single get_NxContactCallbackData_staticFriction1_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_dynamicFriction0")]
        private extern static void set_NxContactCallbackData_dynamicFriction0_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_dynamicFriction0")]
        private extern static System.Single get_NxContactCallbackData_dynamicFriction0_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_dynamicFriction1")]
        private extern static void set_NxContactCallbackData_dynamicFriction1_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_dynamicFriction1")]
        private extern static System.Single get_NxContactCallbackData_dynamicFriction1_INVOKE (HandleRef classPointer);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="set_NxContactCallbackData_restitution")]
        private extern static void set_NxContactCallbackData_restitution_INVOKE (HandleRef classPointer, System.Single newvalue);

			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="get_NxContactCallbackData_restitution")]
        private extern static System.Single get_NxContactCallbackData_restitution_INVOKE (HandleRef classPointer);

			#endregion
			
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxContactCallbackData")]
        private extern static IntPtr new_NxContactCallbackData_INVOKE (bool do_override);

			
			public NxContactCallbackData() : 
					base(new_NxContactCallbackData_INVOKE(false))
			{
				GC.ReRegisterForFinalize(this);
			}
			
			private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
			
			protected override void SetPointer(IntPtr ptr)
			{
				base.SetPointer(ptr);
				database[ptr] = new WeakReference(this);
			}
			
			public override void Dispose()
			{
				database.Remove(ClassPointer.Handle);
				base.Dispose();
			}
			
			public static NxContactCallbackData GetClass(IntPtr ptr)
			{
				if ((ptr == IntPtr.Zero))
				{
					return null;
				}
				System.WeakReference obj;
				if (database.TryGetValue(ptr, out obj))
				{
					if (obj.IsAlive)
					{
						return ((NxContactCallbackData)(obj.Target));
					}
				}
				return new NxContactCallbackData(ptr);
			}
			
			protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
			{
				System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
				return list;
			}
		}
		
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(NATIVE_LIBRARY, EntryPoint="new_NxUserContactModify")]
        private extern static IntPtr new_NxUserContactModify_INVOKE (bool do_override);

		
		protected NxUserContactModify() : 
				base(IntPtr.Zero)
		{
			GC.ReRegisterForFinalize(this);
			if ((GetType() != typeof(NxUserContactModify)))
			{
				doSetFunctionPointers = true;
				SetPointer(new_NxUserContactModify_INVOKE(doSetFunctionPointers));
				System.IntPtr[] pointers = CreateFunctionPointers().ToArray();
				set_pointers_INVOKE(ClassPointer, pointers, pointers.Length);
			}
			else
			{
				SetPointer(new_NxUserContactModify_INVOKE(doSetFunctionPointers));
			}
		}
		
		private static System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference> database = new System.Collections.Generic.Dictionary<System.IntPtr, System.WeakReference>();
		
		protected override void SetPointer(IntPtr ptr)
		{
			base.SetPointer(ptr);
			database[ptr] = new WeakReference(this);
		}
		
		public override void Dispose()
		{
			database.Remove(ClassPointer.Handle);
			base.Dispose();
		}
		
		public static NxUserContactModify GetClass(IntPtr ptr)
		{
			if ((ptr == IntPtr.Zero))
			{
				return null;
			}
			System.WeakReference obj;
			if (database.TryGetValue(ptr, out obj))
			{
				if (obj.IsAlive)
				{
					return ((NxUserContactModify)(obj.Target));
				}
			}
			return new NxUserContactModify(ptr);
		}
		
		protected override System.Collections.Generic.List<System.IntPtr> CreateFunctionPointers()
		{
			System.Collections.Generic.List<System.IntPtr> list = base.CreateFunctionPointers();
			onContactConstraint_0_delegatefield = new onContactConstraint_0_delegate(this.onContactConstraint_virtual);
			list.Add(Marshal.GetFunctionPointerForDelegate(onContactConstraint_0_delegatefield));
			return list;
		}
	}
}
